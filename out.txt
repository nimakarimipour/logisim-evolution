build.gradle.kts:  var desc = "DEPRECATED: Use `createAll` task instead."
src/main/java/com/cburch/draw/actions/ModelAction.java:      final var shape = coll.iterator().next();
src/main/java/com/cburch/draw/actions/ModelChangeAttributeAction.java:      var found = false;
src/main/java/com/cburch/draw/actions/ModelChangeAttributeAction.java:      for (final var key : newValues.keySet()) {
src/main/java/com/cburch/draw/actions/ModelChangeAttributeAction.java:        final var at = key.getAttribute();
src/main/java/com/cburch/draw/actions/ModelChangeAttributeAction.java:    final var ret = new HashSet<CanvasObject>();
src/main/java/com/cburch/draw/actions/ModelChangeAttributeAction.java:    for (final var key : newValues.keySet()) {
src/main/java/com/cburch/draw/actions/ModelMoveHandleAction.java:    final var oldHandle = gesture.getHandle();
src/main/java/com/cburch/draw/actions/ModelMoveHandleAction.java:    final var dx = oldHandle.getX() - newHandle.getX();
src/main/java/com/cburch/draw/actions/ModelMoveHandleAction.java:    final var dy = oldHandle.getY() - newHandle.getY();
src/main/java/com/cburch/draw/actions/ModelMoveHandleAction.java:    final var reverse = new HandleGesture(newHandle, dx, dy, 0);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var req : requests) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    var typeIndex = 0; // 0 = mixed/unknown, -1 = to greater index, 1 = to
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var req : requests) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var from = req.getFromIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var to = req.getToIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var thisType = Integer.compare(to, from);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var reqs = new ArrayList<ReorderRequest>();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var zmap = ZOrder.getZIndex(objects, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var entry : zmap.entrySet()) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var obj = entry.getKey();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var from = entry.getValue();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var above = ZOrder.getObjectBelow(obj, model, objects);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:        var to = ZOrder.getZIndex(above, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var reqs = new ArrayList<ReorderRequest>();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var zmap = ZOrder.getZIndex(objects, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    var to = 0;
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var entry : zmap.entrySet()) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var obj = entry.getKey();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var from = entry.getValue();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var reqs = new ArrayList<ReorderRequest>();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var zmap = ZOrder.getZIndex(objects, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var entry : zmap.entrySet()) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var obj = entry.getKey();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var from = entry.getValue();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var above = ZOrder.getObjectAbove(obj, model, objects);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:        var to = ZOrder.getZIndex(above, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var reqs = new ArrayList<ReorderRequest>();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var zmap = ZOrder.getZIndex(objects, model);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var to = model.getObjectsFromBottom().size() - 1;
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (final var entry : zmap.entrySet()) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var obj = entry.getKey();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var from = entry.getValue();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var req = reqs.get(i);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      var from = req.getFromIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      var to = req.getToIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      for (var j = 0; j < i; j++) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:        final var prev = reqs.get(j);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:        final var prevFrom = prev.getFromIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:        final var prevTo = prev.getToIndex();
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (var i = reqs.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var req = reqs.get(i);
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    final var inv = new ArrayList<ReorderRequest>(requests.size());
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:    for (var i = requests.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/draw/actions/ModelReorderAction.java:      final var request = requests.get(i);
src/main/java/com/cburch/draw/canvas/Canvas.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var x = (int) (tooltipLocation.getX() * getZoomFactor());
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var y = (int) (tooltipLocation.getY() * getZoomFactor());
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var width =
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var height =
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var canvasModel = this.model;
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var tool = listener.getTool();
src/main/java/com/cburch/draw/canvas/Canvas.java:      final var dup = g.create();
src/main/java/com/cburch/draw/canvas/Canvas.java:      var dup = g.create();
src/main/java/com/cburch/draw/canvas/Canvas.java:    final var oldValue = model;
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var oldValue = tool;
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var loc = Location.create(e.getX(), e.getY(), false);
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var objects = canvas.getModel().getObjectsFromTop();
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    for (final var o : objects) {
src/main/java/com/cburch/draw/canvas/CanvasListener.java:      for (final var o : objects) {
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var loc = Location.create(e.getX(), e.getY(), true);
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var objects = canvas.getModel().getObjectsFromTop();
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    final var ports = new ArrayList<CanvasObject>();
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    for (final var object : objects) {
src/main/java/com/cburch/draw/canvas/CanvasListener.java:    for (final var port : ports) {
src/main/java/com/cburch/draw/canvas/Selection.java:      final var oldSelected = new ArrayList<>(selected);
src/main/java/com/cburch/draw/canvas/Selection.java:    final var state = suppressed.get(shape);
src/main/java/com/cburch/draw/canvas/Selection.java:    for (final var listener : listeners) {
src/main/java/com/cburch/draw/canvas/Selection.java:        final var affected = event.getAffected();
src/main/java/com/cburch/draw/canvas/Selection.java:          final var handle = selectedHandle;
src/main/java/com/cburch/draw/canvas/Selection.java:        final var gesture = event.getHandleGesture();
src/main/java/com/cburch/draw/canvas/Selection.java:    final var g = curHandleGesture;
src/main/java/com/cburch/draw/canvas/Selection.java:    final var h = gesture.getHandle();
src/main/java/com/cburch/draw/canvas/Selection.java:    final var cur = selectedHandle;
src/main/java/com/cburch/draw/canvas/Selection.java:    final var same = Objects.equals(cur, handle);
src/main/java/com/cburch/draw/canvas/Selection.java:      for (final var o : shapes) {
src/main/java/com/cburch/draw/canvas/Selection.java:    for (final var o : shapes) {
src/main/java/com/cburch/draw/canvas/Selection.java:      final var added = new ArrayList<CanvasObject>(shapes.size());
src/main/java/com/cburch/draw/canvas/Selection.java:      for (final var shape : shapes) {
src/main/java/com/cburch/draw/canvas/Selection.java:      final var removed = new ArrayList<CanvasObject>(shapes.size());
src/main/java/com/cburch/draw/canvas/Selection.java:      for (final var shape : shapes) {
src/main/java/com/cburch/draw/canvas/Selection.java:          final var h = selectedHandle;
src/main/java/com/cburch/draw/canvas/Selection.java:    final var added = new ArrayList<CanvasObject>(shapes.size());
src/main/java/com/cburch/draw/canvas/Selection.java:    final var removed = new ArrayList<CanvasObject>(shapes.size());
src/main/java/com/cburch/draw/canvas/Selection.java:    for (final var shape : shapes) {
src/main/java/com/cburch/draw/canvas/Selection.java:        final var h = selectedHandle;
src/main/java/com/cburch/draw/gui/AttrTableDrawManager.java:    final var prop = evt.getPropertyName();
src/main/java/com/cburch/draw/gui/AttrTableDrawManager.java:    final var tool = canvas.getTool();
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    var commonCount = 0;
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    var totalCount = 0;
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    for (final var obj : sel.getSelected()) {
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    final var attrs = (SelectionAttributes) getAttributeSet();
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    final var oldVals = new HashMap<AttributeMapKey, Object>();
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    final var newVals = new HashMap<AttributeMapKey, Object>();
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    for (final var ent : attrs.entries()) {
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:      final var key = new AttributeMapKey(attr, ent.getValue());
src/main/java/com/cburch/draw/gui/AttrTableSelectionModel.java:    final var model = canvas.getModel();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    for (final var attrs : sel) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        final var val = attrs.getValue(attr);
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    final var raw = selected.entrySet();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    final var attrs = selAttrs;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    final var values = selValues;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    for (var i = 0; i < attrs.length; i++) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    final var attrs = this.selAttrs;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    final var values = this.selValues;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:    for (var i = 0; i < attrs.length; i++) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        final var same = Objects.equals(value, values[i]);
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:          for (final var objAttrs : selected.keySet()) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        final var attrs = SelectionAttributes.this.selAttrs;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        final var values = SelectionAttributes.this.selValues;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        for (var i = 0; i < attrs.length; i++) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var attrSet = new LinkedHashSet<Attribute<?>>();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var sit = attrsSet.iterator();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:        final var first = sit.next();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:          final var next = sit.next();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var attrs = new Attribute<?>[attrSet.size()];
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var values = new Object[attrs.length];
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      var i = 0;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      for (final var attr : attrSet) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var oldSel = selected;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      final var newSel = new HashMap<AttributeSet, CanvasObject>();
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      for (final var o : selection.getSelected()) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      var change = false;
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      for (final var attrs : oldSel.keySet()) {
src/main/java/com/cburch/draw/gui/SelectionAttributes.java:      for (final var attrs : newSel.keySet()) {
src/main/java/com/cburch/draw/icons/DrawCurveIcon.java:    final var wh = scale(3);
src/main/java/com/cburch/draw/icons/DrawCurveIcon.java:    final var p = new GeneralPath();
src/main/java/com/cburch/draw/icons/DrawLineIcon.java:    final var wh = AppPreferences.getScaled(3);
src/main/java/com/cburch/draw/icons/DrawPolylineIcon.java:    final var p = new GeneralPath();
src/main/java/com/cburch/draw/icons/DrawPolylineIcon.java:    var i = 0;
src/main/java/com/cburch/draw/icons/DrawPolylineIcon.java:    final var wh = AppPreferences.getScaled(3);
src/main/java/com/cburch/draw/icons/DrawShapeIcon.java:    final var state = 3;
src/main/java/com/cburch/draw/icons/DrawShapeIcon.java:    final var x = scale(1);
src/main/java/com/cburch/draw/icons/DrawShapeIcon.java:    final var y = scale(3);
src/main/java/com/cburch/draw/icons/DrawShapeIcon.java:    final var width = scale(points[(state - 1) * 2]);
src/main/java/com/cburch/draw/icons/DrawShapeIcon.java:    final var height = scale(points[(state - 1) * 2 + 1]);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var ret = (AbstractCanvasObject) super.clone();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var e = new AttributeEvent(this);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    for (final var listener : listeners) {
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    for (final var attr : getAttributes()) {
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var x = bds.getX();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var y = bds.getY();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var w = bds.getWidth();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var h = bds.getHeight();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    for (var i = 0; i < GENERATE_RANDOM_TRIES; i++) {
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var loc = Location.create(x + rand.nextInt(w), y + rand.nextInt(h), false);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var a = this.getBounds();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var b = other.getBounds();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var c = a.intersect(b);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var rand = new Random();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      for (var i = 0; i < OVERLAP_TRIES; i++) {
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:          final var loc = this.getRandomPoint(c, rand);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:          final var loc = that.getRandomPoint(c, rand);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      for (var i = 0; i < OVERLAP_TRIES; i++) {
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:        final var loc = this.getRandomPoint(c, rand);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var attrs = getAttributes();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var value = getValue(DrawAttr.PAINT_TYPE);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var color = getValue(DrawAttr.FILL_COLOR);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var attrs = getAttributes();
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var value = getValue(DrawAttr.PAINT_TYPE);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var width = getValue(DrawAttr.STROKE_WIDTH);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var color = getValue(DrawAttr.STROKE_COLOR);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var old = getValue(attr);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:    final var same = Objects.equals(old, value);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      final var e = new AttributeEvent(this, attr, value, old);
src/main/java/com/cburch/draw/model/AbstractCanvasObject.java:      for (final var listener : listeners) {
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    final var affected = new ArrayList<CanvasObject>(requests.size());
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    for (final var r : requests) {
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    final var affected = new HashSet<CanvasObject>(newValues.size());
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    for (final var key : newValues.keySet()) {
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    final var oldValuesCopy = new HashMap<>(oldValues);
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    final var newValuesCopy = new HashMap<>(newValues);
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:    var ret = affected;
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:      final var newVals = newValues;
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:        final var keys = new HashSet<CanvasObject>();
src/main/java/com/cburch/draw/model/CanvasModelEvent.java:        for (final var key : newVals.keySet()) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var indexes = new LinkedHashMap<CanvasObject, Integer>();
src/main/java/com/cburch/draw/model/Drawing.java:    var i = index;
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var shape : shapes) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forAdd(this, shapes.keySet());
src/main/java/com/cburch/draw/model/Drawing.java:      for (final var entry : shapes.entrySet()) {
src/main/java/com/cburch/draw/model/Drawing.java:        final var shape = entry.getKey();
src/main/java/com/cburch/draw/model/Drawing.java:        final var index = entry.getValue();
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forDeleteHandle(this, handle);
src/main/java/com/cburch/draw/model/Drawing.java:    final var o = handle.getObject();
src/main/java/com/cburch/draw/model/Drawing.java:    final var ret = o.deleteHandle(handle);
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var listener : listeners) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var ret = new ArrayList<>(getObjectsFromBottom());
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var shape : getObjectsFromBottom()) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var obj = desired.getObject();
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forInsertHandle(this, desired);
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forMoveHandle(this, gesture);
src/main/java/com/cburch/draw/model/Drawing.java:    final var o = gesture.getHandle().getObject();
src/main/java/com/cburch/draw/model/Drawing.java:      final var moved = o.moveHandle(gesture);
src/main/java/com/cburch/draw/model/Drawing.java:    final var suppressed = selection.getDrawsSuppressed();
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var shape : getObjectsFromBottom()) {
src/main/java/com/cburch/draw/model/Drawing.java:      final var dup = g.create();
src/main/java/com/cburch/draw/model/Drawing.java:    final var found = restrict(shapes);
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forRemove(this, found);
src/main/java/com/cburch/draw/model/Drawing.java:      for (final var shape : found) {
src/main/java/com/cburch/draw/model/Drawing.java:    var hasEffect = false;
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var r : requests) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forReorder(this, requests);
src/main/java/com/cburch/draw/model/Drawing.java:      for (final var r : requests) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var ret = new ArrayList<CanvasObject>(shapes.size());
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var shape : shapes) {
src/main/java/com/cburch/draw/model/Drawing.java:    final var oldValues = new HashMap<AttributeMapKey, Object>();
src/main/java/com/cburch/draw/model/Drawing.java:    for (final var key : values.keySet()) {
src/main/java/com/cburch/draw/model/Drawing.java:      final var attr = (Attribute<Object>) key.getAttribute();
src/main/java/com/cburch/draw/model/Drawing.java:      final var oldValue = key.getObject().getValue(attr);
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forChangeAttributes(this, oldValues, values);
src/main/java/com/cburch/draw/model/Drawing.java:      for (final var entry : values.entrySet()) {
src/main/java/com/cburch/draw/model/Drawing.java:        final var key = entry.getKey();
src/main/java/com/cburch/draw/model/Drawing.java:        final var shape = key.getObject();
src/main/java/com/cburch/draw/model/Drawing.java:    final var oldValue = text.getText();
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forChangeText(this, text, oldValue, value);
src/main/java/com/cburch/draw/model/Drawing.java:    final var found = restrict(shapes);
src/main/java/com/cburch/draw/model/Drawing.java:    final var e = CanvasModelEvent.forTranslate(this, found);
src/main/java/com/cburch/draw/model/Drawing.java:      for (final var shape : shapes) {
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:    final var alist = map.computeIfAbsent(a, k -> new ArrayList<>());
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:    for (final var o : untested) {
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:      final var over = new ArrayList<CanvasObject>();
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:      for (final var o2 : map.keySet()) {
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:    final var ret = map.get(o);
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:    for (final var o : shapes) {
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:    final var mapped = map.remove(shape);
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:      for (final var o : mapped) {
src/main/java/com/cburch/draw/model/DrawingOverlaps.java:        final var reverse = map.get(o);
src/main/java/com/cburch/draw/model/ReorderRequest.java:      final var i = onFrom ? a.fromIndex : a.toIndex;
src/main/java/com/cburch/draw/model/ReorderRequest.java:      final var j = onFrom ? b.fromIndex : b.toIndex;
src/main/java/com/cburch/draw/shapes/Curve.java:      final var q = toArray(loc);
src/main/java/com/cburch/draw/shapes/Curve.java:      final var p0 = toArray(this.p0);
src/main/java/com/cburch/draw/shapes/Curve.java:      final var p1 = toArray(this.p1);
src/main/java/com/cburch/draw/shapes/Curve.java:      final var p2 = toArray(this.p2);
src/main/java/com/cburch/draw/shapes/Curve.java:      final var p = CurveUtil.findNearestPoint(q, p0, p1, p2);
src/main/java/com/cburch/draw/shapes/Curve.java:      final var stroke = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Curve.java:      final var thr = (type == DrawAttr.PAINT_STROKE) ? Math.max(Line.ON_LINE_THRESH, stroke / 2) : stroke / 2;
src/main/java/com/cburch/draw/shapes/Curve.java:    final var p = getHandleArray(gesture);
src/main/java/com/cburch/draw/shapes/Curve.java:    final var g = gesture.getHandle();
src/main/java/com/cburch/draw/shapes/Curve.java:    var gx = g.getX() + gesture.getDeltaX();
src/main/java/com/cburch/draw/shapes/Curve.java:    var gy = g.getY() + gesture.getDeltaY();
src/main/java/com/cburch/draw/shapes/Curve.java:        final var x0 = p0.getX();
src/main/java/com/cburch/draw/shapes/Curve.java:        final var y0 = p0.getY();
src/main/java/com/cburch/draw/shapes/Curve.java:        final var x1 = p2.getX();
src/main/java/com/cburch/draw/shapes/Curve.java:        final var y1 = p2.getY();
src/main/java/com/cburch/draw/shapes/Curve.java:        final var midx = (x0 + x1) / 2;
src/main/java/com/cburch/draw/shapes/Curve.java:        final var midy = (y0 + y1) / 2;
src/main/java/com/cburch/draw/shapes/Curve.java:        final var dx = x1 - x0;
src/main/java/com/cburch/draw/shapes/Curve.java:        final var dy = y1 - y0;
src/main/java/com/cburch/draw/shapes/Curve.java:        final var p = LineUtil.nearestPointInfinite(gx, gy, midx, midy, midx - dy, midy + dx);
src/main/java/com/cburch/draw/shapes/Curve.java:        final var ct = CurveUtil.interpolate(e0, e1, mid);
src/main/java/com/cburch/draw/shapes/Curve.java:    var ret = p0.hashCode();
src/main/java/com/cburch/draw/shapes/Curve.java:    final var hs = getHandleArray(gesture);
src/main/java/com/cburch/draw/shapes/Curve.java:    final var curve = getCurve(gesture);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var A = computeA(p0, p1);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var B = computeB(p0, p1, p2);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var a = B[0] * B[0] + B[1] * B[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var b = 3 * (A[0] * B[0] + A[1] * B[1]);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var c = 2 * (A[0] * A[0] + A[1] * A[1]) + pos[0] * B[0] + pos[1] * B[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var d = pos[0] * A[0] + pos[1] * A[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var roots = solveCubic(a, b, c, d);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var tMin = Double.MAX_VALUE;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var dist2Min = Double.MAX_VALUE;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var posMin = new double[2];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    for (final var root : roots) {
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var lx = q[0] - pos[0];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var ly = q[1] - pos[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var dist2 = lx * lx + ly * ly;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var A = computeA(p0, p1);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var B = computeB(p0, p1, p2);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var xMin = Math.min(p0[0], Math.min(p1[0], p2[0]));
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var xMax = Math.max(p0[0], Math.max(p1[0], p2[0]));
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var yMin = Math.min(p0[1], Math.min(p1[1], p2[1]));
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var yMax = Math.max(p0[1], Math.max(p1[1], p2[1]));
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      var u = -A[0] / B[0]; // u where getTan(u)[0] == 0
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      var u = -A[1] / B[1]; // u where getTan(u)[1] == 0
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var x = (int) xMin;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var y = (int) yMin;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var w = (int) Math.ceil(xMax) - x;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var h = (int) Math.ceil(yMax) - y;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var dx = mid[0] - end0[0];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    var dy = mid[1] - end0[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var d0 = Math.sqrt(dx * dx + dy * dy);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var d1 = Math.sqrt(dx * dx + dy * dy);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var t = d0 / (d0 + d1);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var u = 1.0 - t;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var t2 = t * t;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var u2 = u * u;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var den = 2 * t * u;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var xNum = mid[0] - u2 * end0[0] - t2 * end1[0];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:    final var yNum = mid[1] - u2 * end0[1] - t2 * end1[1];
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      var z = a; // multi-purpose util variable
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var p = b - a * a / 3;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var q = a * (2 * a * a - 9 * b) / 27 + c;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var p3 = p * p * p;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var D = q * q + 4 * p3 / 27;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      final var offset = -a / 3;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:        final var u = 2 * Math.sqrt(-p / 3);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:        final var v = Math.acos(-Math.sqrt(-27 / p3) * q / 2) / 3;
src/main/java/com/cburch/draw/shapes/CurveUtil.java:        final var u = (q < 0) ? Math.pow(-q / 2, 1. / 3) : -Math.pow(q / 2, 1. / 3);
src/main/java/com/cburch/draw/shapes/CurveUtil.java:      var D = b * b - 4 * a * c;
src/main/java/com/cburch/draw/shapes/FillableCanvasObject.java:    var ret = this.paintType == that.paintType;
src/main/java/com/cburch/draw/shapes/FillableCanvasObject.java:    var ret = paintType.hashCode();
src/main/java/com/cburch/draw/shapes/Line.java:    final var xq = loc.getX();
src/main/java/com/cburch/draw/shapes/Line.java:    final var yq = loc.getY();
src/main/java/com/cburch/draw/shapes/Line.java:    final var d = LineUtil.ptDistSqSegment(x0, y0, x1, y1, xq, yq);
src/main/java/com/cburch/draw/shapes/Line.java:    final var thresh = Math.max(ON_LINE_THRESH, strokeWidth / 2);
src/main/java/com/cburch/draw/shapes/Line.java:      final var h = gesture.getHandle();
src/main/java/com/cburch/draw/shapes/Line.java:      final var dx = gesture.getDeltaX();
src/main/java/com/cburch/draw/shapes/Line.java:      final var dy = gesture.getDeltaY();
src/main/java/com/cburch/draw/shapes/Line.java:      final var ret = new Handle[2];
src/main/java/com/cburch/draw/shapes/Line.java:    final var u = rand.nextDouble();
src/main/java/com/cburch/draw/shapes/Line.java:    var x = (int) Math.round(x0 + u * (x1 - x0));
src/main/java/com/cburch/draw/shapes/Line.java:    var y = (int) Math.round(y0 + u * (y1 - y0));
src/main/java/com/cburch/draw/shapes/Line.java:    final var w = strokeWidth;
src/main/java/com/cburch/draw/shapes/Line.java:    var ret = x0 * 31 + y0;
src/main/java/com/cburch/draw/shapes/Line.java:    final var h = gesture.getHandle();
src/main/java/com/cburch/draw/shapes/Line.java:    final var dx = gesture.getDeltaX();
src/main/java/com/cburch/draw/shapes/Line.java:    final var dy = gesture.getDeltaY();
src/main/java/com/cburch/draw/shapes/Line.java:      var x0 = this.x0;
src/main/java/com/cburch/draw/shapes/Line.java:      var y0 = this.y0;
src/main/java/com/cburch/draw/shapes/Line.java:      var x1 = this.x1;
src/main/java/com/cburch/draw/shapes/Line.java:      var y1 = this.y1;
src/main/java/com/cburch/draw/shapes/Line.java:      final var h = gesture.getHandle();
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dx = x1 - x0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dy = y1 - y0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dx = x1 - x0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dy = y1 - y0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var len2 = dx * dx + dy * dy;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var num = (xq - x0) * dx + (yq - y0) * dy;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dx = x1 - x0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var dy = y1 - y0;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var len2 = dx * dx + dy * dy;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var u = ((xq - x0) * dx + (yq - y0) * dy) / len2;
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var px = from.getX();
src/main/java/com/cburch/draw/shapes/LineUtil.java:    final var py = from.getY();
src/main/java/com/cburch/draw/shapes/LineUtil.java:      final var ang = Math.atan2(my - py, mx - px);
src/main/java/com/cburch/draw/shapes/LineUtil.java:      final var d45 = (Math.abs(mx - px) + Math.abs(my - py)) / 2;
src/main/java/com/cburch/draw/shapes/LineUtil.java:      final var d = (int) (4 * ang / Math.PI + 4.5);
src/main/java/com/cburch/draw/shapes/Oval.java:    final var qx = q.getX();
src/main/java/com/cburch/draw/shapes/Oval.java:    final var qy = q.getY();
src/main/java/com/cburch/draw/shapes/Oval.java:    final var dx = qx - (x + 0.5 * w);
src/main/java/com/cburch/draw/shapes/Oval.java:    final var dy = qy - (y + 0.5 * h);
src/main/java/com/cburch/draw/shapes/Oval.java:    final var sum = (dx * dx) / (w * w) + (dy * dy) / (h * h);
src/main/java/com/cburch/draw/shapes/Oval.java:    final var rx = getWidth() / 2.0;
src/main/java/com/cburch/draw/shapes/Oval.java:    final var ry = getHeight() / 2.0;
src/main/java/com/cburch/draw/shapes/Oval.java:    final var u = 2 * Math.PI * rand.nextDouble();
src/main/java/com/cburch/draw/shapes/Oval.java:    var x = (int) Math.round(getX() + rx + rx * Math.cos(u));
src/main/java/com/cburch/draw/shapes/Oval.java:    var y = (int) Math.round(getY() + ry + ry * Math.sin(u));
src/main/java/com/cburch/draw/shapes/Oval.java:    var d = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = new Handle[locations.size()];
src/main/java/com/cburch/draw/shapes/Poly.java:    var i = -1;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (final var loc : locations) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var minHandles = closed ? 3 : 2;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:      final var qx = loc.getX();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var qy = loc.getY();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var w = Math.max(Line.ON_LINE_THRESH, getStrokeWidth() / 2);
src/main/java/com/cburch/draw/shapes/Poly.java:      for (final var h : hs) {
src/main/java/com/cburch/draw/shapes/Poly.java:        final var hx = h.getX();
src/main/java/com/cburch/draw/shapes/Poly.java:        final var hy = h.getY();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var result = PolyUtil.getClosestPoint(loc, closed, handles);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var thresh = Math.max(Line.ON_LINE_THRESH, getStrokeWidth() / 2);
src/main/java/com/cburch/draw/shapes/Poly.java:      final var resLoc = result.getLocation();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var ret = (Poly) super.clone();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = this.handles.clone();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var oldHandle = hs[i];
src/main/java/com/cburch/draw/shapes/Poly.java:      final var thresh = Math.max(Line.ON_LINE_THRESH, getStrokeWidth() / 2);
src/main/java/com/cburch/draw/shapes/Poly.java:      final var result = PolyUtil.getClosestPoint(loc, closed, handles);
src/main/java/com/cburch/draw/shapes/Poly.java:      final var path = getPath();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var path = getPath();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var width = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var result = PolyUtil.getClosestPoint(loc, closed, handles);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var n = hs.length;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var is = new Handle[n - 1];
src/main/java/com/cburch/draw/shapes/Poly.java:    var deleted = false;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var g = gesture.getHandle();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var ret = new Handle[hs.length];
src/main/java/com/cburch/draw/shapes/Poly.java:      final var h = hs[i];
src/main/java/com/cburch/draw/shapes/Poly.java:        final var x = h.getX() + gesture.getDeltaX();
src/main/java/com/cburch/draw/shapes/Poly.java:        final var y = h.getY() + gesture.getDeltaY();
src/main/java/com/cburch/draw/shapes/Poly.java:          var prev = hs[(i + n - 1) % n].getLocation();
src/main/java/com/cburch/draw/shapes/Poly.java:          var next = hs[(i + 1) % n].getLocation();
src/main/java/com/cburch/draw/shapes/Poly.java:            final var to = Location.create(x, y, false);
src/main/java/com/cburch/draw/shapes/Poly.java:            final var a = LineUtil.snapTo8Cardinals(prev, x, y);
src/main/java/com/cburch/draw/shapes/Poly.java:            final var b = LineUtil.snapTo8Cardinals(next, x, y);
src/main/java/com/cburch/draw/shapes/Poly.java:            final var ad = a.manhattanDistanceTo(to);
src/main/java/com/cburch/draw/shapes/Poly.java:            final var bd = b.manhattanDistanceTo(to);
src/main/java/com/cburch/draw/shapes/Poly.java:    var p = path;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:      var first = true;
src/main/java/com/cburch/draw/shapes/Poly.java:      for (final var h : hs) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    var ls = lens;
src/main/java/com/cburch/draw/shapes/Poly.java:      var total = 0.0;
src/main/java/com/cburch/draw/shapes/Poly.java:      for (var i = 0; i < ls.length; i++) {
src/main/java/com/cburch/draw/shapes/Poly.java:        final var j = (i + 1) % hs.length;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var pos = ls[ls.length - 1] * rand.nextDouble();
src/main/java/com/cburch/draw/shapes/Poly.java:    for (var i = 0; true; i++) {
src/main/java/com/cburch/draw/shapes/Poly.java:        final var p = hs[i];
src/main/java/com/cburch/draw/shapes/Poly.java:        final var q = hs[(i + 1) % hs.length];
src/main/java/com/cburch/draw/shapes/Poly.java:        final var u = Math.random();
src/main/java/com/cburch/draw/shapes/Poly.java:        final var x = (int) Math.round(p.getX() + u * (q.getX() - p.getX()));
src/main/java/com/cburch/draw/shapes/Poly.java:        final var y = (int) Math.round(p.getY() + u * (q.getY() - p.getY()));
src/main/java/com/cburch/draw/shapes/Poly.java:    var ret = getRandomBoundaryPoint(rand);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var w = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Poly.java:      final var dx = rand.nextInt(w) - w / 2;
src/main/java/com/cburch/draw/shapes/Poly.java:      final var dy = rand.nextInt(w) - w / 2;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var loc = desired.getLocation();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var prev =
src/main/java/com/cburch/draw/shapes/Poly.java:    final var is = new Handle[hs.length + 1];
src/main/java/com/cburch/draw/shapes/Poly.java:    var inserted = false;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (var i = 0; i < hs.length; i++) {
src/main/java/com/cburch/draw/shapes/Poly.java:      final var a = this.handles;
src/main/java/com/cburch/draw/shapes/Poly.java:      final var b = that.handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    var ret = super.matchesHashCode();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (final var h : hs) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = getHandles(gesture);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var is = new Handle[hs.size()];
src/main/java/com/cburch/draw/shapes/Poly.java:    var i = 0;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (final var h : hs) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = getHandles(gesture);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var xs = new int[hs.size()];
src/main/java/com/cburch/draw/shapes/Poly.java:    final var ys = new int[hs.size()];
src/main/java/com/cburch/draw/shapes/Poly.java:    var i = 0;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (final var h : hs) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    var x0 = hs[0].getX();
src/main/java/com/cburch/draw/shapes/Poly.java:    var y0 = hs[0].getY();
src/main/java/com/cburch/draw/shapes/Poly.java:    var x1 = x0;
src/main/java/com/cburch/draw/shapes/Poly.java:    var y1 = y0;
src/main/java/com/cburch/draw/shapes/Poly.java:    for (var i = 1; i < hs.length; i++) {
src/main/java/com/cburch/draw/shapes/Poly.java:    final var bds = Bounds.create(x0, y0, x1 - x0 + 1, y1 - y0 + 1);
src/main/java/com/cburch/draw/shapes/Poly.java:    final var stroke = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Poly.java:    final var hs = handles;
src/main/java/com/cburch/draw/shapes/Poly.java:    final var is = new Handle[hs.length];
src/main/java/com/cburch/draw/shapes/Poly.java:    for (var i = 0; i < hs.length; i++) {
src/main/java/com/cburch/draw/shapes/PolyUtil.java:    final var xq = loc.getX();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:    final var yq = loc.getY();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:    final var ret = new ClosestResult();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      var h0 = hs[0];
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      var x0 = h0.getX();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      var y0 = h0.getY();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      final var stop = closed ? hs.length : (hs.length - 1);
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      for (var i = 0; i < stop; i++) {
src/main/java/com/cburch/draw/shapes/PolyUtil.java:        final var h1 = hs[(i + 1) % hs.length];
src/main/java/com/cburch/draw/shapes/PolyUtil.java:        final var x1 = h1.getX();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:        final var y1 = h1.getY();
src/main/java/com/cburch/draw/shapes/PolyUtil.java:        final var d = LineUtil.ptDistSqSegment(x0, y0, x1, y1, xq, yq);
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      final var h0 = ret.prevHandle;
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      final var h1 = ret.nextHandle;
src/main/java/com/cburch/draw/shapes/PolyUtil.java:      final var p =
src/main/java/com/cburch/draw/shapes/Rectangle.java:    final var w = getWidth();
src/main/java/com/cburch/draw/shapes/Rectangle.java:    final var h = getHeight();
src/main/java/com/cburch/draw/shapes/Rectangle.java:    final var u = rand.nextInt(2 * w + 2 * h);
src/main/java/com/cburch/draw/shapes/Rectangle.java:    var x = getX();
src/main/java/com/cburch/draw/shapes/Rectangle.java:    var y = getY();
src/main/java/com/cburch/draw/shapes/Rectangle.java:    final var d = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var type = getPaintType();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var b = bounds;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var x = b.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var y = b.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var w = b.getWidth();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var h = b.getHeight();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var qx = loc.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var qy = loc.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var stroke = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var tol2 = Math.max(2 * Line.ON_LINE_THRESH, stroke);
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var tol = tol2 / 2;
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var tol = getStrokeWidth() / 2;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var wid = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var type = getPaintType();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var bds = bounds;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var x0 = bds.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var y0 = bds.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var x1 = x0 + bds.getWidth();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var y1 = y0 + bds.getHeight();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var hx = gesture.getHandle().getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var hy = gesture.getHandle().getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var dx = gesture.getDeltaX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var dy = gesture.getDeltaY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var newX0 = x0 == hx ? x0 + dx : x0;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var newY0 = y0 == hy ? y0 + dy : y0;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var newX1 = x1 == hx ? x1 + dx : x1;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var newY1 = y1 == hy ? y1 + dy : y1;
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var w = Math.abs(newX1 - newX0);
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var h = Math.abs(newY1 - newY0);
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var w = Math.abs(newX1 - newX0);
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var h = Math.abs(newY1 - newY0);
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var oldHandles = getHandleArray(null);
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var newHandles = getHandleArray(gesture);
src/main/java/com/cburch/draw/shapes/Rectangular.java:    final var moved = gesture == null ? null : gesture.getHandle();
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var x0 = Integer.MAX_VALUE;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var x1 = Integer.MIN_VALUE;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var y0 = Integer.MAX_VALUE;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    var y1 = Integer.MIN_VALUE;
src/main/java/com/cburch/draw/shapes/Rectangular.java:    for (final var h : newHandles) {
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var hx = h.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var hy = h.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var bds = bounds;
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var handles = getHandleArray(gesture);
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var p0 = handles[0];
src/main/java/com/cburch/draw/shapes/Rectangular.java:      final var p1 = handles[2];
src/main/java/com/cburch/draw/shapes/Rectangular.java:      var x0 = p0.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      var y0 = p0.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      var x1 = p1.getX();
src/main/java/com/cburch/draw/shapes/Rectangular.java:      var y1 = p1.getY();
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var t = x0;
src/main/java/com/cburch/draw/shapes/Rectangular.java:        final var t = y0;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var qx = q.getX();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var qy = q.getY();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    var rx = radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    var ry = radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var diam = 2 * radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var w = getWidth();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var h = getHeight();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var r = radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var horz = Math.max(0, w - 2 * r); // length of horizontal segment
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var vert = Math.max(0, h - 2 * r);
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var len = 2 * horz + 2 * vert + 2 * Math.PI * r;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    var u = len * rand.nextDouble();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    var x = getX();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    var y = getY();
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:      var rx = radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:      var ry = radius;
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:      final var dx = (int) Math.round(rx * Math.cos(u));
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:      final var dy = (int) Math.round(ry * Math.sin(u));
src/main/java/com/cburch/draw/shapes/RoundRectangle.java:    final var d = getStrokeWidth();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = doc.createElement("path");
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var e0 = curve.getEnd0();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var e1 = curve.getEnd1();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var ct = curve.getControl();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = doc.createElement("line");
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var v1 = line.getEnd0();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var v2 = line.getEnd1();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var x = oval.getX();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var y = oval.getY();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var width = oval.getWidth();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var height = oval.getHeight();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = doc.createElement("ellipse");
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var points = new StringBuilder();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    var first = true;
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    for (final var h : poly.getHandles(null)) {
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = doc.createElement("rect");
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = createRectangular(doc, rrect);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var r = rrect.getValue(DrawAttr.CORNER_RADIUS);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var elt = doc.createElement("text");
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var loc = text.getLocation();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var font = text.getValue(DrawAttr.FONT);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var fill = text.getValue(DrawAttr.FILL_COLOR);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var style = font.getStyle();
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var type = shape.getValue(DrawAttr.PAINT_TYPE);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:      final var fill = shape.getValue(DrawAttr.FILL_COLOR);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var width = shape.getValue(DrawAttr.STROKE_WIDTH);
src/main/java/com/cburch/draw/shapes/SvgCreator.java:    final var stroke = shape.getValue(DrawAttr.STROKE_COLOR);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var x0 = Integer.parseInt(elt.getAttribute("x1"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var y0 = Integer.parseInt(elt.getAttribute("y1"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var x1 = Integer.parseInt(elt.getAttribute("x2"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var y1 = Integer.parseInt(elt.getAttribute("y2"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var cx = Double.parseDouble(elt.getAttribute("cx"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var cy = Double.parseDouble(elt.getAttribute("cy"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var rx = Double.parseDouble(elt.getAttribute("rx"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var ry = Double.parseDouble(elt.getAttribute("ry"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var x = (int) Math.round(cx - rx);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var y = (int) Math.round(cy - ry);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var w = (int) Math.round(rx * 2);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var h = (int) Math.round(ry * 2);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var typeError = -1;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var patt = PATH_REGEX.matcher(elt.getAttribute("d"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var tokens = new ArrayList<String>();
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var type = -1; // -1 error, 0 start, 1 curve, 2 polyline
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var token = patt.group();
src/main/java/com/cburch/draw/shapes/SvgReader.java:          final var tokenStr = String.valueOf(token.charAt(0));
src/main/java/com/cburch/draw/shapes/SvgReader.java:          final var msg = String.format("Unrecognized path command '%s'", tokenStr);
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var x0 = Integer.parseInt(tokens.get(1));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var y0 = Integer.parseInt(tokens.get(2));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        var x1 = Integer.parseInt(tokens.get(4));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        var y1 = Integer.parseInt(tokens.get(5));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        var x2 = Integer.parseInt(tokens.get(6));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        var y2 = Integer.parseInt(tokens.get(7));
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var e0 = Location.create(x0, y0, false);
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var e1 = Location.create(x2, y2, false);
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var ct = Location.create(x1, y1, false);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var x = Integer.parseInt(elt.getAttribute("x"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var y = Integer.parseInt(elt.getAttribute("y"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var w = Integer.parseInt(elt.getAttribute("width"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var h = Integer.parseInt(elt.getAttribute("height"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var ret = new RoundRectangle(x, y, w, h);
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var rx = Integer.parseInt(elt.getAttribute("rx"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var name = elt.getTagName();
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var ret = createShapeObject(elt, name);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var attrs = ret.getAttributes();
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var stroke = elt.getAttribute("stroke");
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var fill = elt.getAttribute("fill");
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var width = Integer.valueOf(elt.getAttribute("stroke-width"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var color = elt.getAttribute("stroke");
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var opacity = elt.getAttribute("stroke-opacity");
src/main/java/com/cburch/draw/shapes/SvgReader.java:      var color = elt.getAttribute("fill");
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var opacity = elt.getAttribute("fill-opacity");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var x = Integer.parseInt(elt.getAttribute("x"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var y = Integer.parseInt(elt.getAttribute("y"));
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var text = elt.getTextContent();
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var ret = new Text(x, y, text);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var fontFamily = elt.getAttribute("font-family");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var fontStyle = elt.getAttribute("font-style");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var fontWeight = elt.getAttribute("font-weight");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var fontSize = elt.getAttribute("font-size");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var styleFlags = Font.PLAIN;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var size = Integer.parseInt(fontSize);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var hAlignStr = elt.getAttribute("text-anchor");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var vAlignStr = elt.getAttribute("dominant-baseline");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var vAlign = getAlignment(vAlignStr);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var fontFamily = elt.getAttribute(prefix + "font-family");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var fontStyle = elt.getAttribute(prefix + "font-style");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var fontWeight = elt.getAttribute(prefix + "font-weight");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var fontSize = elt.getAttribute(prefix + "font-size");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var styleFlags = Font.PLAIN;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var size = defaultSize;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var r = 0;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var g = 0;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var b = 0;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var colorStrLen = 7;
src/main/java/com/cburch/draw/shapes/SvgReader.java:    var alpha = 255;
src/main/java/com/cburch/draw/shapes/SvgReader.java:        final var commaIdx = opacity.lastIndexOf(',');
src/main/java/com/cburch/draw/shapes/SvgReader.java:          final var repl = opacity.substring(0, commaIdx) + "." + opacity.substring(commaIdx + 1);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var patt = Pattern.compile("[ ,\n\r\t]+");
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var toks = patt.split(points);
src/main/java/com/cburch/draw/shapes/SvgReader.java:    final var ret = new Location[toks.length / 2];
src/main/java/com/cburch/draw/shapes/SvgReader.java:    for (var i = 0; i < ret.length; i++) {
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var x = Integer.parseInt(toks[2 * i]);
src/main/java/com/cburch/draw/shapes/SvgReader.java:      final var y = Integer.parseInt(toks[2 * i + 1]);
src/main/java/com/cburch/draw/shapes/Text.java:    final var ret = (Text) super.clone();
src/main/java/com/cburch/draw/shapes/Text.java:    final var bds = getBounds();
src/main/java/com/cburch/draw/shapes/Text.java:    final var x = bds.getX();
src/main/java/com/cburch/draw/shapes/Text.java:    final var y = bds.getY();
src/main/java/com/cburch/draw/shapes/Text.java:    final var w = bds.getWidth();
src/main/java/com/cburch/draw/shapes/Text.java:    final var h = bds.getHeight();
src/main/java/com/cburch/draw/toolbar/AbstractToolbarModel.java:    final var event = new ToolbarModelEvent(this);
src/main/java/com/cburch/draw/toolbar/AbstractToolbarModel.java:    for (final var listener : listeners) {
src/main/java/com/cburch/draw/toolbar/AbstractToolbarModel.java:    final var event = new ToolbarModelEvent(this);
src/main/java/com/cburch/draw/toolbar/AbstractToolbarModel.java:    for (final var listener : listeners) {
src/main/java/com/cburch/draw/toolbar/Toolbar.java:    final var m = model;
src/main/java/com/cburch/draw/toolbar/Toolbar.java:    final var oldValue = curPressed;
src/main/java/com/cburch/draw/toolbar/Toolbar.java:    final var oldValue = model;
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:    final var dim = item.getDimension(toolbar.getOrientation());
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:        final var g2 = g.create();
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:      final var dim = item.getDimension(toolbar.getOrientation());
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:      final var defaultColor = g.getColor();
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:    final var g2 = g.create();
src/main/java/com/cburch/draw/toolbar/ToolbarButton.java:      final var dim = item.getDimension(toolbar.getOrientation());
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    final var dim = destination.getSize();
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    var x = 0;
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    var y = 0;
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    var w = dim.width;
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    var h = dim.height;
src/main/java/com/cburch/draw/toolbar/ToolbarSeparator.java:    final var width = AppPreferences.getScaled(2);
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:    for (var i = 0; i < d.getAttributes().size(); i++) {
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:    final var ait = attrs.iterator();
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:    final var vit = values.listIterator();
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:      final var a = ait.next();
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:        var event = new AttributeEvent(this, attr, value, null);
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:        for (final var listener : listeners) {
src/main/java/com/cburch/draw/tools/DrawingAttributeSet.java:          for (final var listener : listeners) {
src/main/java/com/cburch/draw/tools/LineTool.java:    final var px = from.getX();
src/main/java/com/cburch/draw/tools/LineTool.java:    final var py = from.getY();
src/main/java/com/cburch/draw/tools/LineTool.java:      final var start = mouseStart;
src/main/java/com/cburch/draw/tools/LineTool.java:      final var end = mouseEnd;
src/main/java/com/cburch/draw/tools/LineTool.java:    final var code = e.getKeyCode();
src/main/java/com/cburch/draw/tools/LineTool.java:    var x = e.getX();
src/main/java/com/cburch/draw/tools/LineTool.java:    var y = e.getY();
src/main/java/com/cburch/draw/tools/LineTool.java:    final var mods = e.getModifiersEx();
src/main/java/com/cburch/draw/tools/LineTool.java:    final var loc = Location.create(x, y, false);
src/main/java/com/cburch/draw/tools/LineTool.java:      final var start = mouseStart;
src/main/java/com/cburch/draw/tools/LineTool.java:      final var end = mouseEnd;
src/main/java/com/cburch/draw/tools/LineTool.java:        final var model = canvas.getModel();
src/main/java/com/cburch/draw/tools/LineTool.java:        final var locs = UnmodifiableList.create(ends);
src/main/java/com/cburch/draw/tools/LineTool.java:      final var shift = (mods & MouseEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/LineTool.java:      var newEnd =
src/main/java/com/cburch/draw/tools/LineTool.java:        var x = newEnd.getX();
src/main/java/com/cburch/draw/tools/LineTool.java:        var y = newEnd.getY();
src/main/java/com/cburch/draw/tools/PolyTool.java:    final var locs = locations;
src/main/java/com/cburch/draw/tools/PolyTool.java:    for (var i = locs.size() - 2; i >= 0; i--) {
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var model = canvas.getModel();
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var xs = new int[size];
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var ys = new int[size];
src/main/java/com/cburch/draw/tools/PolyTool.java:      for (var i = 0; i < size; i++) {
src/main/java/com/cburch/draw/tools/PolyTool.java:        final var loc = locations.get(i);
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var lastX = xs[xs.length - 1];
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var lastY = ys[ys.length - 1];
src/main/java/com/cburch/draw/tools/PolyTool.java:    final var code = e.getKeyCode();
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var ch = e.getKeyChar();
src/main/java/com/cburch/draw/tools/PolyTool.java:        final var add = commit(canvas);
src/main/java/com/cburch/draw/tools/PolyTool.java:    var mx = e.getX();
src/main/java/com/cburch/draw/tools/PolyTool.java:    var my = e.getY();
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var add = commit(canvas);
src/main/java/com/cburch/draw/tools/PolyTool.java:    final var loc = Location.create(mx, my, false);
src/main/java/com/cburch/draw/tools/PolyTool.java:    final var locs = locations;
src/main/java/com/cburch/draw/tools/PolyTool.java:        final var first = locations.get(0);
src/main/java/com/cburch/draw/tools/PolyTool.java:        final var last = locations.get(size - 1);
src/main/java/com/cburch/draw/tools/PolyTool.java:          final var add = commit(canvas);
src/main/java/com/cburch/draw/tools/PolyTool.java:    final var add = commit(canvas);
src/main/java/com/cburch/draw/tools/PolyTool.java:      final var last = locations.get(index);
src/main/java/com/cburch/draw/tools/PolyTool.java:        final var nextLast = locations.get(index - 1);
src/main/java/com/cburch/draw/tools/PolyTool.java:        var lastX = newLast.getX();
src/main/java/com/cburch/draw/tools/PolyTool.java:        var lastY = newLast.getY();
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var start = dragStart;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var x0 = start.getX();
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var y0 = start.getY();
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var x1 = mx;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var y1 = my;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var ctrlDown = (mods & MouseEvent.CTRL_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var altDown = (mods & MouseEvent.ALT_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var shiftDown = (mods & MouseEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:        final var r = Math.min(Math.abs(x0 - x1), Math.abs(y0 - y1));
src/main/java/com/cburch/draw/tools/RectangularTool.java:        final var r = Math.min(Math.abs(x0 - x1), Math.abs(y0 - y1));
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var x = x0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var y = y0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var w = x1 - x0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    var h = y1 - y0;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var bds = currentBounds;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var code = e.getKeyCode();
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var loc = Location.create(e.getX(), e.getY(), false);
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var bds = Bounds.create(loc);
src/main/java/com/cburch/draw/tools/RectangularTool.java:      final var oldBounds = currentBounds;
src/main/java/com/cburch/draw/tools/RectangularTool.java:      final var bds = computeBounds(canvas, e.getX(), e.getY(), e.getModifiersEx());
src/main/java/com/cburch/draw/tools/RectangularTool.java:        final var model = canvas.getModel();
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var bds = currentBounds;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var oldBounds = currentBounds;
src/main/java/com/cburch/draw/tools/RectangularTool.java:    final var bds = computeBounds(canvas, mx, my, mods);
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var loc = Location.create(x, y, false);
src/main/java/com/cburch/draw/tools/SelectTool.java:    for (final var o : model.getObjectsFromTop()) {
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var before = beforePressSelection;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var handle = beforePressHandle;
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var sel = canvas.getSelection();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var selection = canvas.getSelection();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var action = curAction;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var start = dragStart;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var end = dragEnd;
src/main/java/com/cburch/draw/tools/SelectTool.java:      var zoom = 1.0;
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var gfxCopy = gfx.create();
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var size = (int) Math.ceil(HANDLE_SIZE * Math.sqrt(zoom));
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var offs = size / 2;
src/main/java/com/cburch/draw/tools/SelectTool.java:      for (final var obj : selection.getSelected()) {
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var handles =
src/main/java/com/cburch/draw/tools/SelectTool.java:        for (final var han : handles) {
src/main/java/com/cburch/draw/tools/SelectTool.java:          var x = han.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var y = han.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:            final var delta = selection.getMovingDelta();
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var selHandle = selection.getSelectedHandle();
src/main/java/com/cburch/draw/tools/SelectTool.java:        var x = selHandle.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:        var y = selHandle.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var delta = selection.getMovingDelta();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var x0 = start.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var y0 = start.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var x1 = end.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var y1 = end.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:            final var t = x0;
src/main/java/com/cburch/draw/tools/SelectTool.java:            final var t = y0;
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var w = canvas.getWidth();
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var h = canvas.getHeight();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var zoom = canvas.getZoomFactor();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var code = e.getKeyCode();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var ch = e.getKeyChar();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var selected = canvas.getSelection();
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var toRemove = new ArrayList<CanvasObject>();
src/main/java/com/cburch/draw/tools/SelectTool.java:      for (final var shape : selected.getSelected()) {
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var model = canvas.getModel();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var mx = e.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var my = e.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var selection = canvas.getSelection();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var halfSize = getHandleSize(canvas) / 2;
src/main/java/com/cburch/draw/tools/SelectTool.java:    for (final var shape : selection.getSelected()) {
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var handles = shape.getHandles(null);
src/main/java/com/cburch/draw/tools/SelectTool.java:      for (final var han : handles) {
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var dx = han.getX() - mx;
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var dy = han.getY() - my;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var shiftPressed = (e.getModifiersEx() & MouseEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var model = canvas.getModel();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var selection = canvas.getSelection();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var selected = selection.getSelected();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var action = curAction;
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var loc = dragEnd;
src/main/java/com/cburch/draw/tools/SelectTool.java:      final var o = getObjectAt(model, loc.getX(), loc.getY(), false);
src/main/java/com/cburch/draw/tools/SelectTool.java:        var han = o.canDeleteHandle(loc);
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var start = dragStart;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var x1 = e.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var y1 = e.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var moveDelta = selection.getMovingDelta();
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var gesture = curGesture;
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var act = new ModelMoveHandleAction(model, gesture);
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var result = act.getNewHandle();
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var bds = Bounds.create(start).add(x1, y1);
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var clicked = getObjectAt(model, start.getX(), start.getY(), true);
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var bds = Bounds.create(start).add(x1, y1);
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var clicked = getObjectAt(model, start.getX(), start.getY(), true);
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var newEnd = Location.create(mx, my, false);
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var start = dragStart;
src/main/java/com/cburch/draw/tools/SelectTool.java:    var dx = newEnd.getX() - start.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:    var dy = newEnd.getY() - start.getY();
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var shiftPressed = (mods & MouseEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/SelectTool.java:    final var ctrlPressed = (mods & InputEvent.CTRL_DOWN_MASK) != 0;
src/main/java/com/cburch/draw/tools/SelectTool.java:        final var gesture = curGesture;
src/main/java/com/cburch/draw/tools/SelectTool.java:          final var h = gesture.getHandle();
src/main/java/com/cburch/draw/tools/SelectTool.java:          var minX = Integer.MAX_VALUE;
src/main/java/com/cburch/draw/tools/SelectTool.java:          var minY = Integer.MAX_VALUE;
src/main/java/com/cburch/draw/tools/SelectTool.java:          for (final var o : canvas.getSelection().getSelected()) {
src/main/java/com/cburch/draw/tools/SelectTool.java:            for (final var handle : o.getHandles(null)) {
src/main/java/com/cburch/draw/tools/SelectTool.java:              final var x = handle.getX();
src/main/java/com/cburch/draw/tools/SelectTool.java:              final var y = handle.getY();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var fieldInput = field.getInputMap();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var fieldAction = field.getActionMap();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var cur = curText;
src/main/java/com/cburch/draw/tools/TextTool.java:    final var cur = curText;
src/main/java/com/cburch/draw/tools/TextTool.java:    final var isNew = isTextNew;
src/main/java/com/cburch/draw/tools/TextTool.java:    final var newText = field.getText();
src/main/java/com/cburch/draw/tools/TextTool.java:      final var oldText = cur.getText();
src/main/java/com/cburch/draw/tools/TextTool.java:    var found = false;
src/main/java/com/cburch/draw/tools/TextTool.java:    final var mx = e.getX();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var my = e.getY();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var mloc = Location.create(mx, my, false);
src/main/java/com/cburch/draw/tools/TextTool.java:    for (final var o : canvas.getModel().getObjectsFromTop()) {
src/main/java/com/cburch/draw/tools/TextTool.java:    final var fieldLoc = field.getLocation();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var zoom = canvas.getZoomFactor();
src/main/java/com/cburch/draw/tools/TextTool.java:    final var caret = field.viewToModel2D(fieldLoc);
src/main/java/com/cburch/draw/tools/TextTool.java:    final var text = curText;
src/main/java/com/cburch/draw/tools/TextTool.java:      final var cur = curText;
src/main/java/com/cburch/draw/util/EditableLabel.java:    var font = this.font;
src/main/java/com/cburch/draw/util/EditableLabel.java:    final var dim = field.getPreferredSize();
src/main/java/com/cburch/draw/util/EditableLabel.java:    final var border = EditableLabelField.FIELD_BORDER;
src/main/java/com/cburch/draw/util/EditableLabel.java:      final var tm = new TextMetrics(field, this.font, text);
src/main/java/com/cburch/draw/util/TextMetrics.java:    final var fr = ((Graphics2D) g).getFontRenderContext();
src/main/java/com/cburch/draw/util/TextMetrics.java:    final var lm = font.getLineMetrics(text, fr);
src/main/java/com/cburch/draw/util/TextMetrics.java:    final var fm = c.getFontMetrics(font);
src/main/java/com/cburch/draw/util/ZOrder.java:    var index = -1;
src/main/java/com/cburch/draw/util/ZOrder.java:    for (final var o : objs) {
src/main/java/com/cburch/draw/util/ZOrder.java:    var index = getIndex(query, objs);
src/main/java/com/cburch/draw/util/ZOrder.java:      final var set = toSet(model.getObjectsOverlapping(query));
src/main/java/com/cburch/draw/util/ZOrder.java:      final var it = objs.listIterator(index);
src/main/java/com/cburch/draw/util/ZOrder.java:        final var o = it.previous();
src/main/java/com/cburch/draw/util/ZOrder.java:    final var querySet = toSet(query);
src/main/java/com/cburch/draw/util/ZOrder.java:    final var ret = new LinkedHashMap<CanvasObject, Integer>(query.size());
src/main/java/com/cburch/draw/util/ZOrder.java:    var z = -1;
src/main/java/com/cburch/draw/util/ZOrder.java:    for (final var o : model.getObjectsFromBottom()) {
src/main/java/com/cburch/draw/util/ZOrder.java:    for (final var o : objs) {
src/main/java/com/cburch/gray/CounterPoker.java:    final var val = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/gray/CounterPoker.java:    final var width = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/gray/CounterPoker.java:    final var cur = CounterData.get(state, width);
src/main/java/com/cburch/gray/CounterPoker.java:    final var newVal = (cur.getValue().toLongValue() * 16 + val) & width.getMask();
src/main/java/com/cburch/gray/CounterPoker.java:    final var newValue = Value.createKnown(width, newVal);
src/main/java/com/cburch/gray/CounterPoker.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/gray/CounterPoker.java:    final var len = (painter.getAttributeValue(StdAttr.WIDTH).getWidth() + 3) / 4;
src/main/java/com/cburch/gray/CounterPoker.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/gray/CounterPoker.java:    final var width = 7 * len + 2; // width of caret rectangle
src/main/java/com/cburch/gray/CounterPoker.java:    final var height = 16; // height of caret rectangle
src/main/java/com/cburch/gray/GrayCounter.java:    final var url = getClass().getClassLoader().getResource("com/cburch/gray/counter.gif");
src/main/java/com/cburch/gray/GrayCounter.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/gray/GrayCounter.java:      final var width = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/gray/GrayCounter.java:      final var state = CounterData.get(painter, width);
src/main/java/com/cburch/gray/GrayCounter.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/gray/GrayCounter.java:    final var width = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/gray/GrayCounter.java:    final var cur = CounterData.get(state, width);
src/main/java/com/cburch/gray/GrayCounter.java:    final var trigger = cur.updateClock(state.getPortValue(0));
src/main/java/com/cburch/gray/GrayIncrementer.java:    final var bits = prev.getBitWidth();
src/main/java/com/cburch/gray/GrayIncrementer.java:    var x = prev.toLongValue();
src/main/java/com/cburch/gray/GrayIncrementer.java:    var ct = (x >> 32) ^ x; // compute parity of x
src/main/java/com/cburch/gray/GrayIncrementer.java:    final var in = state.getPortValue(0);
src/main/java/com/cburch/gray/GrayIncrementer.java:    final var out = nextGray(in);
src/main/java/com/cburch/gray/SimpleGrayCounter.java:      final var state = CounterData.get(painter, BIT_WIDTH);
src/main/java/com/cburch/gray/SimpleGrayCounter.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/gray/SimpleGrayCounter.java:    final var cur = CounterData.get(state, BIT_WIDTH);
src/main/java/com/cburch/gray/SimpleGrayCounter.java:    final var trigger = cur.updateClock(state.getPortValue(0));
src/main/java/com/cburch/hdl/HdlFile.java:    try (final var in = new BufferedReader(new FileReader(file))) {
src/main/java/com/cburch/hdl/HdlFile.java:      final var content = new StringBuilder();
src/main/java/com/cburch/hdl/HdlFile.java:    try (final var out = new BufferedWriter(new FileWriter(file))) {
src/main/java/com/cburch/hdl/HdlFile.java:      final var data = editor.getText();
src/main/java/com/cburch/hex/Caret.java:    final var l = new Listener();
src/main/java/com/cburch/hex/Caret.java:    final var imap = hex.getInputMap();
src/main/java/com/cburch/hex/Caret.java:    final var amap = hex.getActionMap();
src/main/java/com/cburch/hex/Caret.java:    final var nullAction =
src/main/java/com/cburch/hex/Caret.java:    final var nullKey = "null";
src/main/java/com/cburch/hex/Caret.java:      final var measures = hex.getMeasures();
src/main/java/com/cburch/hex/Caret.java:      final var x = measures.toX(loc);
src/main/java/com/cburch/hex/Caret.java:      final var y = measures.toY(loc);
src/main/java/com/cburch/hex/Caret.java:      final var w = measures.getCellWidth();
src/main/java/com/cburch/hex/Caret.java:      final var h = measures.getCellHeight();
src/main/java/com/cburch/hex/Caret.java:      final var measures = hex.getMeasures();
src/main/java/com/cburch/hex/Caret.java:      final var x = measures.toX(cursor);
src/main/java/com/cburch/hex/Caret.java:      final var y = measures.toY(cursor);
src/main/java/com/cburch/hex/Caret.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/hex/Caret.java:      final var oldStroke = g2.getStroke();
src/main/java/com/cburch/hex/Caret.java:    final var model = hex.getModel();
src/main/java/com/cburch/hex/Caret.java:      final var oldValue = cursor;
src/main/java/com/cburch/hex/Caret.java:        final var event = new ChangeEvent(this);
src/main/java/com/cburch/hex/Caret.java:        for (final var l : listeners) {
src/main/java/com/cburch/hex/Caret.java:      final var cols = hex.getMeasures().getColumnCount();
src/main/java/com/cburch/hex/Caret.java:      final var shift = (e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/hex/Caret.java:            final var dist = (int) (cursor % cols);
src/main/java/com/cburch/hex/Caret.java:            final var model = hex.getModel();
src/main/java/com/cburch/hex/Caret.java:            var dest = (cursor / cols * cols) + cols - 1;
src/main/java/com/cburch/hex/Caret.java:              final var end = model.getLastOffset();
src/main/java/com/cburch/hex/Caret.java:            final var max = hex.getModel().getLastOffset();
src/main/java/com/cburch/hex/Caret.java:              var n = cursor;
src/main/java/com/cburch/hex/Caret.java:      final var mask = e.getModifiersEx();
src/main/java/com/cburch/hex/Caret.java:      final var c = e.getKeyChar();
src/main/java/com/cburch/hex/Caret.java:      final var cols = hex.getMeasures().getColumnCount();
src/main/java/com/cburch/hex/Caret.java:          final var digit = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/hex/Caret.java:            final var model = hex.getModel();
src/main/java/com/cburch/hex/Caret.java:              final var curValue = model.get(cursor);
src/main/java/com/cburch/hex/Caret.java:              final var newValue = 16 * curValue + digit;
src/main/java/com/cburch/hex/Caret.java:      final var measures = hex.getMeasures();
src/main/java/com/cburch/hex/Caret.java:      final var loc = measures.toAddress(e.getX(), e.getY());
src/main/java/com/cburch/hex/Caret.java:      final var measures = hex.getMeasures();
src/main/java/com/cburch/hex/Caret.java:      final var loc = measures.toAddress(e.getX(), e.getY());
src/main/java/com/cburch/hex/HexEditor.java:      final var g2 = (Graphics2D) gfx;
src/main/java/com/cburch/hex/HexEditor.java:    final var clip = gfx.getClipBounds();
src/main/java/com/cburch/hex/HexEditor.java:    var addr0 = model.getFirstOffset();
src/main/java/com/cburch/hex/HexEditor.java:    var addr1 = model.getLastOffset();
src/main/java/com/cburch/hex/HexEditor.java:    var xaddr0 = measures.toAddress(0, clip.y);
src/main/java/com/cburch/hex/HexEditor.java:    final var baseFont = gfx.getFont();
src/main/java/com/cburch/hex/HexEditor.java:    final var baseFm = gfx.getFontMetrics(baseFont);
src/main/java/com/cburch/hex/HexEditor.java:    final var labelFont = baseFont.deriveFont(Font.ITALIC);
src/main/java/com/cburch/hex/HexEditor.java:    final var labelFm = gfx.getFontMetrics(labelFont);
src/main/java/com/cburch/hex/HexEditor.java:    var cols = measures.getColumnCount();
src/main/java/com/cburch/hex/HexEditor.java:    var baseX = measures.getBaseX();
src/main/java/com/cburch/hex/HexEditor.java:    var baseY = measures.toY(xaddr0) + baseFm.getAscent() + baseFm.getLeading() / 2;
src/main/java/com/cburch/hex/HexEditor.java:    var dy = measures.getCellHeight();
src/main/java/com/cburch/hex/HexEditor.java:    var labelWidth = measures.getLabelWidth();
src/main/java/com/cburch/hex/HexEditor.java:    var labelChars = measures.getLabelChars();
src/main/java/com/cburch/hex/HexEditor.java:    var cellWidth = measures.getCellWidth();
src/main/java/com/cburch/hex/HexEditor.java:    var cellChars = measures.getCellChars();
src/main/java/com/cburch/hex/HexEditor.java:    for (var a = xaddr0; a < xaddr1; a += cols, baseY += dy) {
src/main/java/com/cburch/hex/HexEditor.java:      final var label = toHex(a, labelChars);
src/main/java/com/cburch/hex/HexEditor.java:      var b = a;
src/main/java/com/cburch/hex/HexEditor.java:      for (var j = 0; j < cols; j++, b++) {
src/main/java/com/cburch/hex/HexEditor.java:          final var val = toHex(model.get(b), cellChars);
src/main/java/com/cburch/hex/HexEditor.java:          final var x = measures.toX(b) + (cellWidth - baseFm.stringWidth(val)) / 2;
src/main/java/com/cburch/hex/HexEditor.java:    final var ret = String.format("%0" + chars + "x", value);
src/main/java/com/cburch/hex/Highlighter.java:    final var model = hex.getModel();
src/main/java/com/cburch/hex/Highlighter.java:    final var entry = new Entry(start, end, color);
src/main/java/com/cburch/hex/Highlighter.java:    final var m = hex.getMeasures();
src/main/java/com/cburch/hex/Highlighter.java:    final var y0 = m.toY(entry.start);
src/main/java/com/cburch/hex/Highlighter.java:    final var y1 = m.toY(entry.end);
src/main/java/com/cburch/hex/Highlighter.java:    final var h = m.getCellHeight();
src/main/java/com/cburch/hex/Highlighter.java:    final var cellWidth = m.getCellWidth();
src/main/java/com/cburch/hex/Highlighter.java:      final var x0 = m.toX(entry.start);
src/main/java/com/cburch/hex/Highlighter.java:      final var x1 = m.toX(entry.end) + cellWidth;
src/main/java/com/cburch/hex/Highlighter.java:      final var lineStart = m.getValuesX();
src/main/java/com/cburch/hex/Highlighter.java:      final var lineWidth = m.getValuesWidth();
src/main/java/com/cburch/hex/Highlighter.java:    final var m = hex.getMeasures();
src/main/java/com/cburch/hex/Highlighter.java:    final var lineStart = m.getValuesX();
src/main/java/com/cburch/hex/Highlighter.java:    final var lineWidth = m.getValuesWidth();
src/main/java/com/cburch/hex/Highlighter.java:    final var cellWidth = m.getCellWidth();
src/main/java/com/cburch/hex/Highlighter.java:    final var cellHeight = m.getCellHeight();
src/main/java/com/cburch/hex/Highlighter.java:    for (final var e : entries) {
src/main/java/com/cburch/hex/Highlighter.java:        final var y0 = m.toY(e.start);
src/main/java/com/cburch/hex/Highlighter.java:        final var y1 = m.toY(e.end);
src/main/java/com/cburch/hex/Highlighter.java:        final var x0 = m.toX(e.start);
src/main/java/com/cburch/hex/Highlighter.java:        final var x1 = m.toX(e.end);
src/main/java/com/cburch/hex/Highlighter.java:      final var entry = (Entry) tag;
src/main/java/com/cburch/hex/Measures.java:      final var font = hex.getFont();
src/main/java/com/cburch/hex/Measures.java:    final var width = headerWidth + cols * cellWidth + (cols / 4) * spacerWidth;
src/main/java/com/cburch/hex/Measures.java:      final var addr0 = getBaseAddress(model);
src/main/java/com/cburch/hex/Measures.java:      final var addr1 = model.getLastOffset();
src/main/java/com/cburch/hex/Measures.java:      final var rows = (int) (((addr1 - addr0 + 1) + cols - 1) / cols);
src/main/java/com/cburch/hex/Measures.java:    final var pref = hex.getPreferredSize();
src/main/java/com/cburch/hex/Test.java:    final var frame = new JFrame();
src/main/java/com/cburch/hex/Test.java:    final var model = new Model();
src/main/java/com/cburch/hex/Test.java:    final var editor = new HexEditor(model);
src/main/java/com/cburch/hex/Test.java:      final var oldValues = new long[(int) len];
src/main/java/com/cburch/hex/Test.java:      for (final var listener : listeners) {
src/main/java/com/cburch/hex/Test.java:      final var oldValues = new long[] {data[(int) (address - 11111)]};
src/main/java/com/cburch/hex/Test.java:      for (final var listener : listeners) {
src/main/java/com/cburch/hex/Test.java:      final var oldValues = new long[values.length];
src/main/java/com/cburch/hex/Test.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/LogisimVersion.java:    final var versionString = String.format("%d.%d.%d%s", major, minor, patch, suffix);
src/main/java/com/cburch/logisim/LogisimVersion.java:    var major = 0;
src/main/java/com/cburch/logisim/LogisimVersion.java:    var minor = 0;
src/main/java/com/cburch/logisim/LogisimVersion.java:    var patch = 0;
src/main/java/com/cburch/logisim/LogisimVersion.java:    var separator = "";
src/main/java/com/cburch/logisim/LogisimVersion.java:    var suffix = "";
src/main/java/com/cburch/logisim/LogisimVersion.java:    var pattern = "^(\\d+.\\d+.\\d+)(.*)$";
src/main/java/com/cburch/logisim/LogisimVersion.java:    var m = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher(versionString);
src/main/java/com/cburch/logisim/LogisimVersion.java:      final var verStr = m.group(1);
src/main/java/com/cburch/logisim/LogisimVersion.java:      final var sufStr = m.group(2);
src/main/java/com/cburch/logisim/LogisimVersion.java:      final var parts = m.group(1).split("\\.");
src/main/java/com/cburch/logisim/LogisimVersion.java:          final var sep = m.group(1);
src/main/java/com/cburch/logisim/LogisimVersion.java:          final var s = m.group(2);
src/main/java/com/cburch/logisim/LogisimVersion.java:    var result = this.major - other.major;
src/main/java/com/cburch/logisim/LogisimVersion.java:    var sfx = "";
src/main/java/com/cburch/logisim/LogisimVersion.java:    var result = String.format("%d.%d.%d", major, minor, patch);
src/main/java/com/cburch/logisim/Main.java:    final var startup = Startup.parseArgs(args);
src/main/java/com/cburch/logisim/Main.java:      final var strWriter = new StringWriter();
src/main/java/com/cburch/logisim/Main.java:      final var printWriter = new PrintWriter(strWriter);
src/main/java/com/cburch/logisim/analyze/data/CoverColor.java:    for (final var color : availableColors) {
src/main/java/com/cburch/logisim/analyze/data/CoverColor.java:    var idx = 0;
src/main/java/com/cburch/logisim/analyze/data/CoverColor.java:    for (final var color : availableColors) {
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    final var rows = new ArrayList<Entry[]>();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var nrOfEntries = inputs.bits.size() + outputs.bits.size();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      final var entryRow = new ArrayList<Entry>();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      final var line = content.get(row);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      var col = 0;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:          var entry = line.get(col);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      var confirm =
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      var col = 0;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      var line = content.get(row);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:          var entry = line.get(col);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    final var header = content.get(0);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    final var nrOfEntries = header.size();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var processingInputs = true;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var inOuSepDetected = false;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      final var field = header.get(idx);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var name = field.substring(0, pos);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var index = field.substring(pos + 1);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var bitIndex = Integer.parseInt(index);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:          final var sels = bitspresent.get(name.toLowerCase());
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:          final var variable = new Var(name, bitIndex + 1);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:          final var sels = new ArrayList<Boolean>();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var pos = field.indexOf('[');
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var name = field.substring(0, pos);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var nrOfBits = VariableTab.checkindex(field.substring(pos));
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var variable = new Var(name, nrOfBits);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:        final var variable = new Var(field, 1);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      final var bit = bitspresent.get(key);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:      final var scanner = new Scanner(file);
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var inQuote = false;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var nrofcontquotes = 0;
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:    var working = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/data/CsvInterpretor.java:            var quotestoprint = nrofcontquotes >> 1;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var fm = expressionBaseFontMetrics = g.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var attrs = new ArrayList<ArrayList<Range>>();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      var pos = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var line = lineText[j];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        var nextPos = pos + line.length();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var text = expr.toString(notation, true);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var badness = expr.getBadness();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var bestBreakPositions = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var secondBestBreakPositions = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var minimal1 = Integer.MAX_VALUE;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var minimal2 = Integer.MAX_VALUE;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var lines = new ArrayList<String>();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var g = (Graphics2D) img.getGraphics().create();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var ctx = g.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var i = bestBreakPositions.size() - 1;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var breakPosition = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        var addedLine = text.substring(0, secondBestBreakPositions.get(i) - breakPosition);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var curY = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var nots = lineNots.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var n = nots.size();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var stack = new int[n];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var nd = nots.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        var depth = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        var top = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:          final var nd2 = nots.get(j);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var sub = s.substring(0, end);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var g = (Graphics2D) img.getGraphics().create();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var ctx = g.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var line = lineText[i];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var nots = lineNots.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var subs = lineSubscripts.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var marks = lineMarks.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:          final var not = nots.get(j);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var width = 0;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var test = new TextLayout(attributedString.getIterator(), ctx);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var as = style(s, end, subs, marks, true);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var layout = new TextLayout(as.getIterator(), ctx);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var ctx = ((Graphics2D) g).getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var line = lineText[i];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var nots = lineNots.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var subs = lineSubscripts.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var marks = lineMarks.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    final var col = g.getColor();
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:    var curCol = col;
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var as = lineStyled[i];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var nots = lineNots.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:      final var marks = lineMarks.get(i);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var nd = nots.get(j);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var notY = y + lineY[i] - nd.depth * AppPreferences.getScaled(notSep);
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var startX = x + notStarts[i][j];
src/main/java/com/cburch/logisim/analyze/data/ExpressionRenderData.java:        final var stopX = x + notStops[i][j];
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var col = g.getColor();
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var kmapRows = 1 << KarnaughMapPanel.ROW_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var kmapCols = 1 << KarnaughMapPanel.COL_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var tableRow = sq.getRow();
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var krow = KarnaughMapPanel.getRow(tableRow, kmapRows, kmapCols);
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var kcol = KarnaughMapPanel.getCol(tableRow, kmapRows, kmapCols);
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var imps = new Boolean[kmapRows][kmapCols];
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var tableRow = sq.getRow();
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var row = KarnaughMapPanel.getRow(tableRow, kmapRows, kmapCols);
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:        final var col = KarnaughMapPanel.getCol(tableRow, kmapRows, kmapCols);
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:            var found = false;
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:    final var oldHighlighted = highlighted;
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:    final var ret = highlighted >= 0;
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:    final var col = covers.get(highlighted).color;
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:    final var implicants = model.getOutputExpressions().getMinimalImplicants(output);
src/main/java/com/cburch/logisim/analyze/data/KarnaughMapGroups.java:      final var curCov = covers.get(cov);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var count = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var inputs = model.getInputs();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var count = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var out = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var nrInCols = nrOfInCols(model);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var nrOutCols = nrOfOutCols(model);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var inputVars = model.getInputs().vars;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var outputVars = model.getOutputs().vars;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:      final var inp = inputVars.get(i);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var format = i == inputVars.size() - 1 ? "c|" : "c";
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:      final var outp = outputVars.get(i);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var val = tt.getVisibleInputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var val = tt.getVisibleOutputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var val = tt.getInputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var val = tt.getOutputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var result = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var reorder = reordered(nrOfInputs);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var values = new int[nrOfInputs];
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var reorder = reordered(model.getInputs().bits.size());
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    for (var i = 0; i < model.getInputs().bits.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var inp = Bit.parse(model.getInputs().bits.get(reorder[i]));
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var kmapRows = 1 << KarnaughMapPanel.ROW_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var leftVars = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var topVars = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var nrLeftVars = KarnaughMapPanel.ROW_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var count = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    for (final var variable : table.getInputVariables()) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    for (var i = 0; i < model.getTruthTable().getRowCount(); i++) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:      final var idx = reorderedIndex(model.getInputs().bits.size(), i);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var groups = new KarnaughMapGroups(model);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var df = (DecimalFormat) NumberFormat.getNumberInstance(Locale.ENGLISH);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    var idx = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var kmapRows = 1 << KarnaughMapPanel.ROW_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    for (final var group : groups.getCovers()) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:      for (final var thiscover : group.getAreas()) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var linedStyle = AppPreferences.KMAP_LINED_STYLE.getBoolean();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:    final var modelIsUpdating = model.getOutputExpressions().updatesEnabled();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:        final var tt = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:            final var outp = model.getOutputs().vars.get(i);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:          var outcol = 0;
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:          for (var i = 0; i < model.getOutputs().vars.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              final var func = "$" + outp.name + "$";
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              for (var idx = outp.width - 1; idx >= 0; idx--) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:                final var func = "$" + outp.name + "_{" + idx + "}$";
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:          for (var i = 0; i < model.getOutputs().vars.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:            final var outp = model.getOutputs().vars.get(i);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              final var func = "$" + outp.name + "$";
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              for (var idx = outp.width - 1; idx >= 0; idx--) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:                final var func = "$" + outp.name + "_{" + idx + "}$";
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:          for (var o = 0; o < model.getTruthTable().getOutputVariables().size(); o++) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:            final var outp = model.getTruthTable().getOutputVariable(o);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              final var exp = Expressions.eq(Expressions.variable(outp.name),
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:              for (var idx = outp.width - 1; idx >= 0; idx--) {
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:                final var name = outp.bitName(idx);
src/main/java/com/cburch/logisim/analyze/file/AnalyzerTexWriter.java:                final var exp = Expressions.eq(Expressions.variable(name),
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:    final var inputs = model.getInputs();
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:    final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:      final var tt = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:      for (var i = 0; i < inputs.vars.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        final var cur = inputs.vars.get(i);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        final var name = cur.width == 1 ? cur.name : cur.name + "[" + (cur.width - 1) + "..0]";
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        for (var j = 1; j < cur.width; j++) out.print(DEFAULT_SEPARATOR);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:      for (var i = 0; i < outputs.vars.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        final var cur = outputs.vars.get(i);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        final var name = cur.width == 1 ? cur.name : cur.name + "[" + (cur.width - 1) + "..0]";
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        for (var j = 1; j < cur.width; j++) out.print(DEFAULT_SEPARATOR);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:      for (var row = 0; row < tt.getVisibleRowCount(); row++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        for (var i = 0; i < inputs.bits.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:          final var entry = tt.getVisibleInputEntry(row, i);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:        for (var i = 0; i < outputs.bits.size(); i++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:          final var entry = tt.getVisibleOutputEntry(row, i);
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:    final var param = new CsvParameter();
src/main/java/com/cburch/logisim/analyze/file/TruthtableCsvFile.java:    final var cin = new CsvInterpretor(file, param, parentFrame);
src/main/java/com/cburch/logisim/analyze/file/TruthtableFileFilter.java:    final var name = f.getName();
src/main/java/com/cburch/logisim/analyze/file/TruthtableFileFilter.java:    final var i = name.lastIndexOf('.');
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var c = model.getCurrentCircuit();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var colwidth = new int[inputs.vars.size() + outputs.vars.size()];
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      var i = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (final var variable : inputs.vars)
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (final var variable : outputs.vars)
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (final var variable : inputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (final var variable : outputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        for (var j = 0; j < colwidth[i] + 1; j++) out.print("~");
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var rows = table.getVisibleRowCount();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (var row = 0; row < rows; row++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        var col = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        for (final var variable : inputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:          final var s = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:          for (var b = variable.width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:            final var val = table.getVisibleInputEntry(row, col++);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        for (final var variable : outputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:          final var s = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:          for (var b = variable.width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:            final var val = table.getVisibleOutputEntry(row, col++);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    final var s = line.split("\\s+");
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    var cur = inputs;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    for (final var value : s) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        var m = NAME_FORMAT.matcher(value);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:        var n = m.group(1);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    var d = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (var i = 0; i < var.width; i++) row[col++] = parseBit(sval.charAt(i), sval, lineno);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      for (var i = 0; i < var.width; i++) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    final var row = new Entry[inputs.bits.size() + outputs.bits.size()];
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    var col = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    final var s = line.split("\\s+");
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    var ix = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    for (final var variable : inputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    for (final var variable : outputs.vars) {
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:    var lineno = 0;
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var inputs = new VariableList(AnalyzerModel.MAX_INPUTS);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var outputs = new VariableList(AnalyzerModel.MAX_OUTPUTS);
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var rows = new ArrayList<Entry[]>();
src/main/java/com/cburch/logisim/analyze/file/TruthtableTextFile.java:      final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var tt = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var nrOfInputs = tt.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var nrOfOutputs = tt.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var hasInputsAndOutputs = (nrOfInputs > 0) && (nrOfOutputs > 0);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var frame = new Analyzer();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var model = frame.getModel();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var inputs = new ArrayList<Var>();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var outputs = new ArrayList<Var>();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    for (var i = 2; i < args.length; i++) {
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var s = args[i];
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var idx = s.indexOf('=');
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:        final var name = s.substring(0, idx);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:        final var exprString = s.substring(idx + 1);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:        final var expr = Parser.parse(exprString, model);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var tableListener = new TableListener();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var contents = getContentPane();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var vertStrut = new JPanel(null);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var horzStrut = new JPanel(null);
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var myLocaleListener = new MyLocaleListener();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var myChangeListener = new MyChangeListener();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:    final var pane = new JScrollPane(comp,
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:        final var width = pane.getViewport().getWidth();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var progressBar = new JProgressBar();
src/main/java/com/cburch/logisim/analyze/gui/Analyzer.java:      final var panel = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var projects = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var options = new Object[projects.size() + 1];
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        final var proj = projects.get(i - 1);
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var defaultCircuit = model.getCurrentCircuit();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      var enableNands = true;
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        final var expr = model.getOutputExpressions().getExpression(output);
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      var twoInputs = false;
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      var useNands = false;
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      var replace = false;
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      var ok = false;
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        var action =
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        final var projectItem = (ProjectItem) dlog.project.getSelectedItem();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        final var labels = new HashSet<String>();
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        for (final var label : model.getInputs().getNames()) labels.add(label.toUpperCase());
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:        for (final var label : model.getOutputs().getNames()) labels.add(label.toUpperCase());
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:          for (final var circ : dest.getLogisimFile().getCircuits()) {
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var circuit = dest.getLogisimFile().getCircuit(name);
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var xn = CircuitBuilder.build(circuit, model, twoInputs, useNands);
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var circuit = new Circuit(name, dest.getLogisimFile(), dest);
src/main/java/com/cburch/logisim/analyze/gui/BuildCircuitButton.java:      final var xn = CircuitBuilder.build(circuit, model, twoInputs, useNands);
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:    var celwidth = AppPreferences.getScaled(200);
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:    var celHeight = AppPreferences.getScaled(25);
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:    final var border = BorderFactory.createLineBorder(Color.BLACK, AppPreferences.getScaled(1));
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:    final var dim = new Dimension(celwidth, celHeight);
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:        final var j = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:      final var scan = new Scanner(file);
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:      final var sel = (String) quotes.getSelectedItem();
src/main/java/com/cburch/logisim/analyze/gui/CsvReadParameterDialog.java:      final var sel = (String) seperators.getSelectedItem();
src/main/java/com/cburch/logisim/analyze/gui/ExportLatexButton.java:      final var c = model.getCurrentCircuit();
src/main/java/com/cburch/logisim/analyze/gui/ExportLatexButton.java:      final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/analyze/gui/ExportLatexButton.java:        final var confirm =
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:    final var chooser = JFileChoosers.createSelected(lastFile);
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:    final var choice = chooser.showSaveDialog(parent);
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:      final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:        final var confirm =
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:        final var fileName = file.getName();
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:        final var idx = fileName.lastIndexOf(".");
src/main/java/com/cburch/logisim/analyze/gui/ExportTableButton.java:        final var ext = fileName.substring(idx + 1);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var list = listenerList.getListenerList();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      for (var index = 0; index < list.length; index += 2) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var ne = listCopy[row];
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:        final var name = event.getVariable();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:        for (final var e : listCopy) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var idx = event.getIndex();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var n = outputs.bits.size();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      var i = -1;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      for (final var name : outputs.bits) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var h = prettyView.getExpressionHeight();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var exprString = field.getText();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:        final var expr = Parser.parse(exprString, model);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:        final var not = Notation.values()[notationChoice.getSelectedIndex()];
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var ccp = new ExpressionTransferHandler();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var inputMap = table.getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    for (final var item : LogisimMenuBar.EDIT_ITEMS) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var accel = menubar.getAccelerator(item);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var actionMap = table.getActionMap();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var control = control();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var scroll = new JScrollPane(table,
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var f =
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var control = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var viewing = table.getSelectedRow() >= 0;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var editing = table.isEditing();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var action = e.getSource();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      var idx = -1;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var dl = (JTable.DropLocation) info.getDropLocation();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var v = Expression.getAssignmentVariable(expr);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:            final var ne = (NamedExpression) table.getValueAt(idx, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var ne = (NamedExpression) table.getValueAt(idx, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var ne = (NamedExpression) table.getValueAt(idx, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:      final var s = ne.expr != null ? ne.expr.toString(notation) : ne.err;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var width = table.getWidth();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          var height = 14;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var n = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:            final var ne = (NamedExpression) table.getValueAt(i, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var width = img.getWidth();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var height = img.getHeight();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var n = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:            final var ne = (NamedExpression) table.getValueAt(i, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:            final var rh = prettyView.getExpressionHeight();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var width = (int) Math.ceil(w);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          final var n = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          var y = 0;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          var pg = 0;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:          for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/analyze/gui/ExpressionTab.java:            final var ne = (NamedExpression) table.getValueAt(i, 0);
src/main/java/com/cburch/logisim/analyze/gui/ExpressionView.java:      final var width = getWidth();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionView.java:    final var f =
src/main/java/com/cburch/logisim/analyze/gui/ExpressionView.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/analyze/gui/ExpressionView.java:      final var bds = renderData.getPreferredSize();
src/main/java/com/cburch/logisim/analyze/gui/ExpressionView.java:    final var defaultHeight = 25;
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:      final var c = model.getCurrentCircuit();
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:    final var chooser = JFileChoosers.createSelected(lastFile);
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:    final var choice = chooser.showOpenDialog(parent);
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:      final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:        final var fileName = file.getName();
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:        final var idx = fileName.lastIndexOf(".");
src/main/java/com/cburch/logisim/analyze/gui/ImportTableButton.java:        final var ext = fileName.substring(idx + 1);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var f =
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var g = (Graphics2D) getGraphics();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var ctx = g.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var msgLayout = new TextLayout(message, headerFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var boxWidth = Math.max(linedKMapInfo.getWidth(), numberedKMapInfo.getWidth());
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var boxHeight = Math.max(linedKMapInfo.getHeight(), numberedKMapInfo.getHeight());
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var ctx = g.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var t1 = new TextLayout(S.get("SelectedKmapGroup"), headerFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var lines = new ArrayList<TextLayout>();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var ret = new StringBuilder(inputs.get(start));
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = start + 1; i < end; i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var maxSize = rowLabel ? (1 << (end - start - 1)) * cellWidth : 100;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var myLayout = styled(ret.toString(), headerFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var nrOfEntries = end - start;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var half = nrOfEntries >> 1;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputs = model.getInputs().bits;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputCount = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rowVars = ROW_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var colVars = COL_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var fm = gfx.getFontMetrics(entryFont);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << rowVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var cols = 1 << colVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var bodyWidth = cellWidth * (cols + 1);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var bodyHeight = cellHeight * (rows + 1);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var ctx = gfx.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var rowHeader = header(inputs, 0, rowVars, true, false, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var colHeader = header(inputs, rowVars, rowVars + colVars, false, false, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var height = 0;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var w = (int) l.getBounds().getWidth();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      for (final var l : colHeader) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var w = (int) l.getBounds().getWidth();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var h = (int) l.getBounds().getHeight();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var tableWidth = headWidth + Math.max(bodyWidth, colLabelWidth + cellWidth) + 5;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var ctx = gfx.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var fm = gfx.getFontMetrics(headerFont);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var singleheight = styledHeight(styled("E", headerFont), ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << ROW_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var cols = 1 << COL_VARS[table.getInputColumnCount()];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var x = event.getX() - kMapArea.getX();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var y = event.getY() - kMapArea.getY();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var row = y / cellHeight;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var col = x / cellWidth;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << ROW_VARS[inputs];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var cols = 1 << COL_VARS[inputs];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var row = getRow(event);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var col = getOutputColumn(event);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var entry = table.getOutputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var s = new StringBuilder(
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputs = model.getInputs().bits;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var n = inputs.size();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = 0; i < MAX_VARS && i < inputs.size(); i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var col = g2.getColor();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputCount = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var sz = getSize();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var expr = karnaughMapGroups.getHighlightedExpression();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var ctx = g2.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var ccol = g2.getColor();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var bcol = karnaughMapGroups.getBackgroundColor();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var t1 = new TextLayout(S.get("NoSelectedKmapGroup"), headerFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var xoff = (selInfo.getWidth() - (int) t1.getBounds().getWidth()) / 2;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var yoff = (selInfo.getHeight() - (int) t1.getBounds().getHeight()) / 2;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var t1 = new TextLayout(S.get("SelectedKmapGroup"), headerFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var xoff = (selInfo.getWidth() - (int) t1.getBounds().getWidth()) / 2;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var t2 = new ExpressionRenderData(expr, selInfo.getWidth(), notation);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputCount = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var tableXstart = x + numberedKMapInfo.getHeaderWidth() + cellWidth;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var tableYstart = y + numberedKMapInfo.getHeaderHeight() + cellHeight;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rowVars = ROW_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var colVars = COL_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << rowVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var cols = 1 << colVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var headFm = gfx.getFontMetrics(headerFont);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var ctx = gfx.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    var numberFont = headerFont;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var width2 = headFm.stringWidth("00");
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var width3 = headFm.stringWidth("000");
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var scale = (float) width2 / (float) width3;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var c = 0; c < cols; c++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var label = label(c, cols);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var styledLabel = styled(label, numberFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var xoff = (cellWidth - (int) styledLabel.getBounds().getWidth()) >> 1;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var r = 0; r < rows; r++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var label = label(r, rows);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var styledLabel = styled(label, numberFont, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rowHeader = header(model.getInputs().bits, 0, rowVars, true, false, ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var colHeader =
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    var rx = x + 3;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    var ry = y + numberedKMapInfo.getHeaderHeight() + cellHeight / 2;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (final var l : rowHeader) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    var idx = 0;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var styled = new AttributedString(str.toString());
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = 0; i < starts.size(); i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var layout = new TextLayout(header.getIterator(), ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var layout = new TextLayout(header.getIterator(), ctx);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var oldStroke = gfx.getStroke();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputCount = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var headFm = gfx.getFontMetrics(headerFont);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var ctx = gfx.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rowVars = ROW_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var colVars = COL_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << rowVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var headHeight = linedKMapInfo.getHeaderHeight();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = 0; i < inputCount; i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var header = styled(model.getInputs().bits.get(i), headerFont);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var rotated = false;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var middleOffset = styledWidth(header, ctx) >> 1;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var offsetX = headHeight + 11;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      var offsetY = headHeight + 11;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var inputCount = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rowVars = ROW_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var colVars = COL_VARS[inputCount];
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var rows = 1 << rowVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var cols = 1 << colVars;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var fm = gfx.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var dy = (cellHeight + fm.getAscent()) / 2;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var oldstroke = gfx.getStroke();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var outputColumn = table.getOutputIndex(output);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      for (var j = 0; j < cols; j++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var row = getTableRow(i, j, rows, cols);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        var entry = table.getOutputEntry(row, outputColumn);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      for (var j = 0; j < cols; j++) {
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:        final var row = getTableRow(i, j, rows, cols);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:          final var text = provisionalValue.getDescription();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:          final var entry = table.getOutputEntry(row, outputColumn);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:          final var text = entry.getDescription();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var recompute = (output == null || value == null) && !Objects.equals(output, value);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var posX = e.getX();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var posY = e.getY();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var x = posX - kMapArea.getX();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var y = posY - kMapArea.getY();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var col = x / cellWidth;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:      final var row = y / cellHeight;
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var row = getRow(e);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var col = getOutputColumn(e);
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var tt = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/KarnaughMapPanel.java:    final var entry = tt.getOutputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var choice = OptionPane.showConfirmDialog(
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var info = new JTextArea(20, 80);
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var caret = (DefaultCaret) info.getCaret();
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var pane = new JScrollPane(info);
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var doneButton = new JButton(S.get("minimizeDone"));
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var infoPanel = new JDialog(
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var dialogThread = new Thread(
src/main/java/com/cburch/logisim/analyze/gui/MinimizeButton.java:    final var optimizeThread = new Thread(
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      for (var i = 0; i < choices.length; i++) {
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      for (var i = 0; i < choices.length; i++) {
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var output = getCurrentVariable();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var format = outputExprs.getMinimizedFormat(output);
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var output = getCurrentVariable();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:        final var output = getCurrentVariable();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:        final var model = (FormatModel) formatChoice.getModel();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:        final var model = (StyleModel) formatStyle.getModel();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:        final var notation = Notation.values()[notationChoice.getSelectedIndex()];
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var buttons = new JPanel(new GridLayout(1, 1));
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var cntrl = control();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var oldInsets = gc.insets;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var selected = selector.getSelectedOutput();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var inputMap1 = getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var inputMap2 = karnaughMap.getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var inputMap3 = minimizedExpr.getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var f =
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var control = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var output = getCurrentVariable();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:    final var format = outputExprs.getMinimizedFormat(output);
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var action = e.getSource();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var w = kmap.getKMapDim().width;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var h = kmap.getKMapDim().height;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var img = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var g = img.createGraphics();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var dim = prettyView.getPreferredSize();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var w = dim.width;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var h = dim.height;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var img = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:      final var g = img.createGraphics();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var kWidth = karnaughMap.getKMapDim().width;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var kHeight = karnaughMap.getKMapDim().height;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var eWidth = minimizedExpr.getRenderData().getPreferredSize().width;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var eHeight = minimizedExpr.getRenderData().getPreferredSize().height;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var width = Math.max(kWidth, eWidth);
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var height = kHeight + 30 + eHeight;
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var width = img.getWidth();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var height = img.getHeight();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var xform = g.getTransform();
src/main/java/com/cburch/logisim/analyze/gui/MinimizedTab.java:          final var prettyView = minimizedExpr.getRenderData();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var dim = super.getPreferredSize();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var f = getFont();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var i = getInsets();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var txt = getText();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var g2 = (Graphics2D) g.create();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var i = getInsets();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var font = getFont();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var frc = g2.getFontRenderContext();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:          final var idx = txt.indexOf(':');
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:          final var start = txt.indexOf('[');
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:          final var stop = txt.lastIndexOf(']');
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:        final var tl = new TextLayout(as.getIterator(), frc);
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:      final var oldSize = select.getItemCount();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:      final var newSize = source.bits.size();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:    final var listModel = new Model();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:    final var ret = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/OutputSelector.java:    var value = (String) select.getSelectedItem();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var v1 = vars.get(i - 1);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var v2 = vars.get(i);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var hw1 = fm.stringWidth(v1.toString());
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var hw2 = fm.stringWidth(v2.toString());
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var hw = (hw1 - hw1 / 2) + headerPadding + (hw2 / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var cw1 = v1.width * cellWidth;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var cw2 = v2.width * cellWidth;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var cw = (cw1 - cw1 / 2) + cellPadding + (cw2 / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      var w = -cellPadding;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      var col = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (final var v : vars) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      var col = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (final var var : vars) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      var x = leftPadding;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (final var var : vars) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (final var var : vars) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var s = var.toString();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var sx = x + (var.width * cellWidth) / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var sw = fm.stringWidth(s);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var cy = y + fm.getAscent();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      var col = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (final var var : vars) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        for (var b = var.width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var entry =
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var label = entry.getDescription();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var width = fm.stringWidth(label);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var d = super.getPreferredSize();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var s = (int) d.getHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var myFont = new Font("Serif", Font.PLAIN, 14);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var toolbar = new JPanel();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var layout = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:            final var pad = bodyPane.getVerticalScrollBar().getWidth();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var gfx = getGraphics();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var fm = (gfx != null ? gfx.getFontMetrics(headFont) : canvas.getFontMetrics(headFont));
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var left = (body.getWidth() - tableWidth) / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var mid = left + inDim.width + headerHorizSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var x = event.getX();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var outputs = table.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var left = (body.getWidth() - tableWidth) / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var mid = left + inDim.width + headerHorizSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var x = event.getX();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var outputs = table.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var c = getColumn(event);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var y = event.getY();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var ret = y / cellHeight;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var rows = getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var y = event.getY();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var ret = y / cellHeight;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var rows = getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var row = getRow(event);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var col = getOutputColumn(event);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var entry = table.getVisibleOutputEntry(row, col);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var curY = getValue();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var curHeight = getVisibleAmount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        var numCells = curHeight / cellHeight - 1;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:        final var curY = getValue();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var left = Math.max(0, (body.getWidth() - tableWidth) / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var mid = left + inDim.width + headerHorizSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var left = Math.max(0, (body.getWidth() - tableWidth) / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var mid = left + inDim.width + headerHorizSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var top = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var left = Math.max(0, (canvasWidth - tableWidth) / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var mid = left + inDim.width + headerHorizSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var lineX = left + inDim.width + headerHorizSep / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var firstRow = Math.max(0, (clip.y - y) / cellHeight);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var lastRow = Math.min(getRowCount(), 2 + (clip.y + clip.height - y) / cellHeight);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      for (var row = firstRow; row < lastRow; row++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var top = canvasHeight - cellHeight - headerVertSep;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var left = Math.max(0, (canvasWidth - tableWidth) / 2);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var lineX = left + inDim.width + headerHorizSep / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:      final var lineY = top + cellHeight + headerVertSep / 2;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var sel = caret.hasSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var s = caret.getSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          for (var c = s.x; c < s.x + s.width; c++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:            for (var r = s.y; r < s.y + s.height; r++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var width = img.getWidth();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var height = img.getHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          var scale = 1.0;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var n = getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var headHeight = (fm.getHeight() * 1.5 + headerHeight * scale);
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var rowsPerPage = (int) ((h - headHeight) / (cellHeight * scale));
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var numPages = (n + rowsPerPage - 1) / rowsPerPage;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var heightY = cellHeight * rowsPerPage;
src/main/java/com/cburch/logisim/analyze/gui/TableTab.java:          final var topY = pageNum * heightY;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var action = event.getActionCommand();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:          final var tt = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var rows = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var outputs = table.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var cols = inputs + outputs;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var shift = (e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var p = (shift ? markB.isValid() ? markB : markA : cursor);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var mask = e.getModifiersEx();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var model = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var n = (indexes == null ? 0 : indexes.size());
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var rows = new int[n];
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      for (var i = 0; i < n; i++) rows[i] = model.findVisibleRowContaining(indexes.get(i));
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var model = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        final var t = r1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var indexes = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      for (var r = r1; r <= r2; r++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        for (final var idx : model.getVisibleRowIndexes(r)) indexes.add(idx);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        final var s = getSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var model = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var dx = 1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var dy = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:            final var cur = model.getVisibleInputEntry(cursor.row, cursor.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:            final var cur = model.getVisibleOutputEntry(cursor.row, cursor.col - inputs);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        var oldCursor = cursor;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        var oldMarkA = markA;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        var oldMarkB = markB;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        var updated = model.setVisibleInputEntry(cursor.row, cursor.col, newEntry, true);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:          var rows = allRowsContaining(oldCursorIdx);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:          var marks = allRowsContaining(oldMarkIdx);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:            var n = marks.length;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:              final var fwd = oldMarkA.row <= oldMarkB.row;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var selection = getSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var row = cursor.row;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      var col = cursor.col;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldCursor = cursor;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldMarkB = markB;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldHover = hover;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldHover = hover;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldHover = hover;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var imap = table.getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var amap = table.getActionMap();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var nullAction =
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var nullKey = "null";
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var r0 = Math.min(markA.row, markB.row);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var c0 = Math.min(markA.col, markB.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var r1 = Math.max(markA.row, markB.row);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var c1 = Math.max(markA.col, markB.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var sel = hasSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var outputs = table.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var x0 = table.getXLeft(0);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var x1 = table.getXRight(inputs + outputs - 1);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      for (final var rowId : hilightRows) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        final var y = table.getY(rowId);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:        final var h = table.getCellHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var r = region(markA, markB);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var r = region(cursor);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var x = table.getXLeft(p.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var y = table.getY(p.row);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var w = table.getCellWidth(p.row);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var h = table.getCellHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var inputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var outputs = table.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var rows = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var cols = inputs + outputs;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var p = pointNear(row, col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:      final var oldMarkB = markB;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var oldCursor = cursor;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var oldMarkA = markA;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var oldMarkB = markB;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var cx = table.getXLeft(p.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var cy = table.getY(p.row);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var cw = table.getCellWidth(p.col);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var ch = table.getCellHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    final var r = region(pts);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var r0 = -1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var r1 = -1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var c0 = -1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var c1 = -1;
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var x0 = table.getXLeft(c0);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var x1 = table.getXRight(c1);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var y0 = table.getY(r0);
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    var y1 = table.getY(r1) + table.getCellHeight();
src/main/java/com/cburch/logisim/analyze/gui/TableTabCaret.java:    for (var i = 1; i < rows.length; i++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var buf = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        for (var i = 0; i < headers.length; i++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        for (final var content : contents) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:          for (var j = 0; j < content.length; j++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var clip = table.getToolkit().getSystemClipboard();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var xfer = clip.getContents(this);
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var s = table.getCaret().getSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var t = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var inputs = t.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var header = new String[s.width];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    for (var c = s.x; c < s.x + s.width; c++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var contents = new String[s.height][s.width];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    for (var r = s.y; r < s.y + s.height; r++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:      for (var c = s.x; c < s.x + s.width; c++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var clip = table.getToolkit().getSystemClipboard();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var data = (Data) xfer.getTransferData(binaryFlavor);
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:          final var row = new Entry[data.contents[i].length];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:          for (var j = 0; j < row.length; j++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var buf = (String) xfer.getTransferData(DataFlavor.stringFlavor);
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var lines = new StringTokenizer(buf, "\r\n");
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        var toks = new StringTokenizer(first, "\t,");
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var headers = new String[toks.countTokens()];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        final var firstEntries = new Entry[headers.length];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        var allParsed = true;
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        var rows = lines.countTokens();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:        var cur = 0;
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:          final var ents = new Entry[toks.countTokens()];
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:          for (var i = 0; toks.hasMoreTokens(); i++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var s = table.getCaret().getSelection();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var model = table.getTruthTable();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var rows = model.getVisibleRowCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var inputs = model.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    final var outputs = model.getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:    for (var r = 0; r < entries.length; r++) {
src/main/java/com/cburch/logisim/analyze/gui/TableTabClip.java:      for (var c = 0; c < entries[0].length; c++) {
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var ed1 = new SingleClickVarEditor(data);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var ed2 = new DoubleClickVarEditor(data);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var table = new JTable(1, 1) {
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var ccp = new VarTransferHandler(table, data);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var inputMap = table.getInputMap();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var accel = menubar.getAccelerator(item);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var actionMap = table.getActionMap();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:            var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:            final var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:            final var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:            final var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:            final var idx = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var scroll = new JScrollPane(table, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var inputsTablePane = wrap(inputsTable);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var outputsTablePane = wrap(outputsTable);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var inputModel = (VariableTableModel) inputsTable.getModel();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var outputModel = (VariableTableModel) outputsTable.getModel();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var length = index.length();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    var pos = 0;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var msbIndex = Integer.parseInt(index.substring(1, pos));
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var curpos = pos;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    final var lsbIndex = Integer.parseInt(index.substring(curpos, pos));
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:    var err = OK;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:        final var c = text.charAt(i);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var message = SyntaxChecker.getErrorMessage(text);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:          final var n = (focus == null || focus.isEditing()) ? -1 : (focus.getRowCount() - 1);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:          final var i = (focus == null || focus.isEditing()) ? -1 : focus.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:          final var action = e.getSource();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var newVar = (Var) obj;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var oldVar = (Var) getValueAt(row, column);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var oldSize = listCopy.length;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var empty = value.toString().equals("");
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var c = (JComponent) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var s = ((Integer) w) == 1 ? ("1 bit") : (w + " bits");
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var maxwidth = data.getMaximumSize();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var widths = new Integer[Math.min(maxwidth, 32)];
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var name = field.getText().trim();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var w = (Integer) width.getSelectedItem();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var oldVar = editing;
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var text = field.getText().trim();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      var name = "";
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      var index = "";
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:        final var err = validateInput(data, null, name, w);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:        final var err = validateInput(data, oldVar, name, w);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var newVar = parse(s);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      var newIdx = data.vars.size();
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:        final var v = data.vars.get(oldIdx);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var err = validateInput(data, oldVar, newVar.name, newVar.width);
src/main/java/com/cburch/logisim/analyze/gui/VariableTab.java:      final var row = table.getSelectedRow();
src/main/java/com/cburch/logisim/analyze/model/Assignments.java:    final var value = map.get(variable);
src/main/java/com/cburch/logisim/analyze/model/Entry.java:    for (final var l : listeners) l.entryDesriptionChanged();
src/main/java/com/cburch/logisim/analyze/model/Expression.java:    final var cnf = new Object();
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var oldLevel = level;
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var ret = a.visit(this) == cnf && b.visit(this) == cnf ? cnf : null;
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var oldLevel = level;
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var ret = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var l = a.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:        final var r = b.visit(this);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:    final var text = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/model/Expression.java:    final var badnessList = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            final var opLvl = notation.opLvl[op.id];
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            final var aLvl = a.getPrecedence(notation);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            final var bLvl = b.getPrecedence(notation);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            final var opLvl = notation.opLvl[Op.NOT.id];
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            final var levelOfA = a.getPrecedence(notation);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:              final var notData = new Range();
src/main/java/com/cburch/logisim/analyze/model/Expression.java:            var baseName = name;
src/main/java/com/cburch/logisim/analyze/model/Expression.java:              final var b = Bit.parse(name);
src/main/java/com/cburch/logisim/analyze/model/Expression.java:              final var subscript = new Range();
src/main/java/com/cburch/logisim/analyze/model/Expressions.java:      final var o = (Binary) other;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var ret = currentMask | source.values;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var diffs = currentMask ^ source.unknowns;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var diff = diffs ^ ((diffs - 1) & diffs);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var nrOfOnes = 0;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var mask = 1;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var bitIndex = 0; bitIndex < nrOfBits; bitIndex++) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var result = new StringBuffer();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var mask = 1 << (nrOfBits - 1);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var outputVariableIndex = model.getOutputs().bits.indexOf(variable);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var desiredTerm = format == AnalyzerModel.FORMAT_SUM_OF_PRODUCTS ? Entry.ONE : Entry.ZERO;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var skippedTerm = desiredTerm == Entry.ONE ? Entry.ZERO : Entry.ONE;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var nrOfInputs = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var oneHotTable = new HashSet<Integer>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var mask = 1;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var bitIndex = 0; bitIndex < nrOfInputs; bitIndex++) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var primes = new HashMap<Implicant, HashSet<Implicant>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var essentialPrimes = new ArrayList<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var currentTable = new HashMap<Integer, HashMap<Implicant, HashSet<Implicant>>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var newTable = new HashMap<Integer, HashMap<Implicant, HashSet<Implicant>>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var termsToCover = new HashMap<Implicant, ArrayList<Implicant>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var allDontCare = true;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var inputCombination = 0; inputCombination < table.getRowCount(); inputCombination++) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var term = table.getOutputEntry(inputCombination, outputVariableIndex);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var nrOfOnes = getNrOfOnes(inputCombination, nrOfInputs);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var isDontCare = term != desiredTerm;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var implicant = new Implicant(inputCombination, isDontCare);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var implicantsSet = new HashSet<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var couldMerge = false;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var groupSize = 2;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      var nrOfPrimes = 0L;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      var minimalKey = Integer.MAX_VALUE;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      var maximalKey = 0;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (var key : currentTable.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (var key = minimalKey; key < maximalKey; key++) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:          for (var termGroup1 : currentTable.get(key).keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:            for (var termGroup2 : currentTable.get(key + 1).keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:              final var differenceMask = termGroup1.values ^ termGroup2.values;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                final var dontCareMask = termGroup1.unknowns | differenceMask;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                final var newValue = (termGroup1.values & differenceMask) == 0 ? termGroup1.values : termGroup2.values;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                final var isDontCareGroup = termGroup1.isDontCare && termGroup2.isDontCare;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                final var newImplicant = new Implicant(dontCareMask, newValue, isDontCareGroup);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                final var newImplicantTerms = new HashSet<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                var found = false;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:                  for (final var implicant : newTable.get(key).keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var key : currentTable.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        for (final var implicant : currentTable.get(key).keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (final var prime : primes.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var term : termsToCover.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var couldDoRowReduction = false;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var couldDoColumnReduction = false;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var nrEssentialPrimes = 0L;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var termsToRemove = new ArrayList<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var term : termsToCover.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        final var termInfo = termsToCover.get(term);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:          final var prime = termInfo.get(0);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:          for (final var terms : primes.get(prime)) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:            for (final var currentPrime : primes.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var term : termsToRemove) termsToCover.remove(term);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var primesToRemove = new HashSet<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var primeHierarchy = new HashMap<Integer, HashSet<Implicant>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var nrOfElementGroups = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var prime : primes.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        final var primeElements = primes.get(prime);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:          final var nrOfElements = primeElements.size();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        for (var mergeGroupId = nrOfElementGroups.size() - 1; mergeGroupId > 0; mergeGroupId--) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:          for (final var bigPrime : primeHierarchy.get(nrOfElementGroups.get(mergeGroupId))) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:            for (var checkGroupId = mergeGroupId - 1; checkGroupId >= 0; checkGroupId--) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:              for (final var smallPrime : primeHierarchy.get(nrOfElementGroups.get(checkGroupId))) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var prime : primesToRemove) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        for (final var element : termsToCover.keySet()) termsToCover.get(element).remove(prime);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var termsToRemove = new ArrayList<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var term : termsToCover.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        final var group = termsToCover.get(term).get(0);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var term : termsToRemove) termsToCover.remove(term);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var implicant : implicants) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var implicant : implicants) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var ret = 0;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    var n = unknowns;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var cols = source.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var i = cols - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        var literal = Expressions.variable(source.getInputHeader(cols - 1 - i));
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var cols = source.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var i = cols - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        var literal = Expressions.variable(source.getInputHeader(cols - 1 - i));
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var maxval = (1 << table.getInputColumnCount()) - 1;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var regions = new HashMap<String, HashSet<Implicant>>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var i = 0; i < table.getVisibleRowCount(); i++) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var val = table.getVisibleOutputs(i);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var idx = table.getVisibleRowIndex(i);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var dc = table.getVisibleRowDcMask(i);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var imp = new Implicant(dc, idx);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var region = regions.computeIfAbsent(val, k -> new HashSet<>());
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    final var ret = new TreeMap<Implicant, String>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (var it : regions.entrySet()) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var val = it.getKey();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var base = it.getValue();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var all = new HashSet<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      var current = base;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        final var next = new HashSet<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:        for (final var implicant : current) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:            final var opp = new Implicant(implicant.unknowns, implicant.values ^ j);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:            final var i = new Implicant(opp.unknowns | j, opp.values);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var sorted = new ArrayList<>(all);
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var chosen = new ArrayList<Implicant>();
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      for (final var implicant : sorted) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:    for (final var other : chosen) {
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var dc = imp.unknowns | other.unknowns;
src/main/java/com/cburch/logisim/analyze/model/Implicant.java:      final var diff = (i2.getUnknownCount() - i1.getUnknownCount());
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var output = model.getOutputs().bits.get(event.getColumn());
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var v = event.getVariable();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var type = event.getType();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (final var input : v) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          for (final var output : outputData.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:            final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var newVar = model.getInputs().vars.get(event.getIndex());
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (final var output : outputData.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:            final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:            final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:            final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (final var output : outputData.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var type = event.getType();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (final var bit : event.getVariable()) outputData.remove(bit);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (var b = 0; b < oldVar.width && b < newVar.width; b++) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var oldName = oldVar.bitName(b);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var newName = newVar.bitName(b);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (var b = newVar.width; b < oldVar.width; b++) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var oldImplicants = minimalImplicants;
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var oldMinExpr = minimalExpr;
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var minChanged = !implicantsSame(oldImplicants, minimalImplicants);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var table = model.getTruthTable();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var outputColumn = computeColumn(model.getTruthTable(), expr);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var outputIndex = model.getOutputs().bits.indexOf(output);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:          final var currentColumn = table.getOutputColumn(outputIndex);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:            final var exprChanged = expr != oldMinExpr || minChanged;
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var oldExpr = expr;
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var values = computeColumn(model.getTruthTable(), expr);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var outputColumn = model.getOutputs().bits.indexOf(output);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    for (var i = 0; i < a.length; i++) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        final var bothDefined =
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var rows = table.getRowCount();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var cols = table.getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var values = new Entry[rows];
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var assn = new Assignments();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:        for (var j = 0; j < cols; j++) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var ait = a.iterator();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    for (final var bImplicant : b) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var ai = ait.next();
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    for (final var entry : a) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    for (final var output : outputData.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var data = outputData.get(output);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var event = new OutputExpressionsEvent(model, type, variable, data);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    var ret = outputData.get(output);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    var returnValue = false;
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    for (final var output : outputData.keySet()) {
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:      final var data = outputData.get(output);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var data = getOutputData(output, false);
src/main/java/com/cburch/logisim/analyze/model/OutputExpressions.java:    final var oldFormat = getMinimizedFormat(output);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    final var stack = new ArrayList<Context>();
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    for (var i = 0; i < tokens.size(); i++) {
src/main/java/com/cburch/logisim/analyze/model/Parser.java:      final var t = tokens.get(i);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    final var tokens = toTokens(in, false);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    var i = -1;
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    for (final var token : tokens) {
src/main/java/com/cburch/logisim/analyze/model/Parser.java:          final var opText = token.text.toUpperCase();
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    final var context = stack.get(stack.size() - 1);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:      final var top = pop(stack);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/model/Parser.java:    final var tokens = toTokens(in, true);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:      final var substart = pos;
src/main/java/com/cburch/logisim/analyze/model/Parser.java:          final var errorText = in.substring(start, pos);
src/main/java/com/cburch/logisim/analyze/model/Parser.java:        final var whiteStart = pos;
src/main/java/com/cburch/logisim/analyze/model/Parser.java:        final var start = pos;
src/main/java/com/cburch/logisim/analyze/model/Parser.java:        final var startChar = next();
src/main/java/com/cburch/logisim/analyze/model/Parser.java:          final var name = in.substring(start, pos);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = numInputs - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var idx = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var input : inputs) idx = (idx << 1) | (input == Entry.ONE ? 1 : 0);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var mask = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var input : inputs) mask = (mask << 1) | (input == Entry.DONT_CARE ? 1 : 0);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var s = new StringBuilder("row[");
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = 0; i < inputs.length; i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var s = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var i = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var variable : vars) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (var j = 0; j < variable.width; j++) s.append(inputs[i++].toBitString());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var dc = dcMask() | other.dcMask();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          var add = iter;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          var keep = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          for (var b = 0; b < nbits; b++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var inputs = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var n = getRowCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var outputs = getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var partition = Implicant.computePartition(model);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var ni = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var no = getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (final var it : partition.entrySet()) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var imp = it.getKey();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var val = it.getValue();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = new Row(imp.values, ni, imp.unknowns);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var col = 0; col < no; col++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var value = Entry.parse("" + val.charAt(col));
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var col = 0; col < no; col++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var oldValues = columns.set(col, values);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var rowsChanged = false;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var i = rows.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = rows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var base = r.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var v = values[base];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var split = true;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (final var idx : r) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var base = r.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var diff = idx ^ base;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var n = r.duplicity();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var splits = new Row(base, r.inputs.length, diff);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var m = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (final var other : splits) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var s = new Row(other, r.inputs.length, r.dcMask() & ~diff);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var idx = r.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var idx = r.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var s = new StringBuilder();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var inputs = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (final var column : columns) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var col = 0; col < columns.size(); col++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var newRow = new Row(r.baseIndex(), r.inputs.length, r.dcMask() | dc);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var base = newRow.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var idx : newRow) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var i = 0; i < rows.size(); i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var row = rows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (final var idx : row) mergeOutputs(base, idx, changed);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var pos = Collections.binarySearch(rows, newRow, sortByInputs);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var dc = (1 << (r.inputs.length - 1 - col));
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var changed = new boolean[columns.size()];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = rows.get(row);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var changed = false;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var i = rows.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = rows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var i = rows.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = rows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var ni = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var no = getOutputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var newRows = new ArrayList<Row>(newEntries.size());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (final var values : newEntries) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var ivars = getInputVariables();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var taken = new int[getRowCount()];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = newRows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var idx : r) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    for (var i = 0; i < getRowCount(); i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var r = new Row(values, ni);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var col = 0; col < no; col++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var value = values[ni + col];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (final var idx : r) column[idx] = value;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var r = findRow(idx);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (var col = 0; col < columns.size(); col++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          var column = columns.get(col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var v = event.getVariable();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var action = event.getType();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var delta = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newIndex = getOutputIndex(v.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          for (var b = 0; b < v.width; b++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:            final var column = columns.remove(newIndex - delta - b);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          for (var b = v.width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:            final var column = columns.remove(newIndex - delta - b);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (var b = 0; b < v.width; b++) columns.remove(bitIndex - b);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newVar = getOutputVariable(event.getIndex());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var lost = v.width - newVar.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var pos = bitIndex + 1 - v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var v = event.getVariable();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var action = event.getType();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() - v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (var b = v.width - 1; b >= 0; b--) addInput(bitIndex - b, oldCount++);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() + v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        for (var b = 0; b < v.width; b++) removeInput(bitIndex - b, oldCount--);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var delta = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newIndex = getInputIndex(v.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newVar = getInputVariable(event.getIndex());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var lost = v.width - newVar.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() + lost;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var pos = bitIndex + 1 - v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var inputs = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var allMask = (1 << inputs) - 1;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var sameMask =
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveMask = 1 << oldIndex; // bit that moves
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveDist = Math.abs(newIndex - oldIndex);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveLeft = newIndex > oldIndex;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var blockMask = allMask ^ sameMask ^ moveMask; // bits that move by one
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var row : rows) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var i = row.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var dc = row.dcMask();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var ret = new ArrayList<Row>(2 * rows.size());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var row : rows) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var i = row.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var dc = row.dcMask();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var b = 1 << (oldCount - index); // _0001000
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var mask = b - 1; // _0000111
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var idx0 = ((i & ~mask) << 1) | 0 | (i & mask); // xxxx0yyy
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var dc0 = ((dc & ~mask) << 1) | 0 | (dc & mask); // wwww0zzz
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var b = (1 << (oldCount - 1 - index)); // _0001000
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var changed = new boolean[columns.size()];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = 0; i < rows.size(); ++i) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var r = rows.get(i);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var mask = b - 1; // _0000111
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var ret = new ArrayList<Row>(rows.size());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (final var r : rows) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var i = r.baseIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var dc = r.dcMask();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var idx0 = ((i >> 1) & ~mask) | (i & mask); // __xxxyyy
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var dc0 = ((dc >> 1) & ~mask) | (dc & mask); // wwww0zzz
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var v = event.getVariable();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var action = event.getType();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() - v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() + v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var delta = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newIndex = getInputIndex(v.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:          for (var b = v.width - 1; b >= 0; b--)
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var bitIndex = event.getBitIndex();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var newVar = getInputVariable(event.getIndex());
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var lost = v.width - newVar.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        var oldCount = getInputColumnCount() + lost;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:        final var pos = bitIndex + 1 - v.width;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var inputs = getInputColumnCount();
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var ret = new Entry[old.length];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var sameMask =
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveMask = 1 << oldIndex; // bit that moves
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveDist = Math.abs(newIndex - oldIndex);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var moveLeft = newIndex > oldIndex;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var blockMask = (old.length - 1) ^ sameMask ^ moveMask; // bits that move by one
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = 0; i < old.length; i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var ret = new Entry[old.length / 2];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      var j = 0;
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var mask = 1 << (oldCount - 1 - index);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = 0; i < old.length; i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var ret = new Entry[2 * old.length];
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var b = 1 << (oldCount - index); // _0001000
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      final var mask = b - 1; // _0000111
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:      for (var i = 0; i < old.length; i++) {
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var event = new TruthTableEvent(this, null);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var event = new TruthTableEvent(this, col);
src/main/java/com/cburch/logisim/analyze/model/TruthTable.java:    final var event = new TruthTableEvent(this, cause);
src/main/java/com/cburch/logisim/analyze/model/Var.java:    final var i = s.indexOf('[');
src/main/java/com/cburch/logisim/analyze/model/Var.java:    final var j = s.lastIndexOf(']');
src/main/java/com/cburch/logisim/analyze/model/Var.java:    var w = 1;
src/main/java/com/cburch/logisim/analyze/model/Var.java:      final var braces = s.substring(i + 1, j);
src/main/java/com/cburch/logisim/analyze/model/Var.java:      var i = s.indexOf(':');
src/main/java/com/cburch/logisim/analyze/model/Var.java:          final var name = s.substring(0, i);
src/main/java/com/cburch/logisim/analyze/model/Var.java:          final var sub = Integer.parseInt(s.substring(i + 1));
src/main/java/com/cburch/logisim/analyze/model/Var.java:          final var name = s.substring(0, i).trim();
src/main/java/com/cburch/logisim/analyze/model/Var.java:          final var sub = Integer.parseInt(s.substring(i + 1, j));
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    var found = false;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:      final var other = vars.get(i);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:      final var l = others.get(i);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var index = data.size();
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    for (final var bit : variable) names.add(bit);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var bitIndex = names.size() - 1;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var event = new VariableListEvent(this, type, variable, index, bitIndex);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var index = data.indexOf(variable);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var bitIndex = names.indexOf(variable.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var newIndex = index + delta;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    var i = (newIndex == 0 ? 0 : (1 + names.indexOf(data.get(newIndex - 1).bitName(0))));
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    for (final var bit : variable) names.add(i++, bit);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var bitDelta = names.indexOf(variable.bitName(0)) - bitIndex;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var index = data.indexOf(variable);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var bitIndex = names.indexOf(variable.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var index = data.indexOf(oldVar);
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    final var bitIndex = names.indexOf(oldVar.bitName(0));
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    var i = bitIndex + 1 - oldVar.width;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    for (final var bit : newVar) {
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    var total = 0;
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:    for (final var variable : values) {
src/main/java/com/cburch/logisim/analyze/model/VariableList.java:      for (final var bit : variable) names.add(bit);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var ret = super.put(point, expression);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var point : expressionMap.dirtyPoints) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var expr = expressionMap.get(point);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var expressionMap = new ExpressionMap(circuit);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var inputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var outputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var outputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var entry : pinNames.entrySet()) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var label = entry.getValue();
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (var b = 0; b < width; b++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:          final var e = Expressions.variable(width > 1 ? label + "[" + b + "]" : label);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var maxIterations = 100;
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (var iterations = 0; !expressionMap.dirtyPoints.isEmpty(); iterations++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var dirtyComponents = getDirtyComponents(circuit, expressionMap.dirtyPoints);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var expr = checkForCircularExpressions(expressionMap);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var pin : outputPins) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var label = pinNames.get(pin);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/Analyze.java:      for (var b = 0; b < width; b++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var loc = new LocationBit(pin.getLocation(), b);
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var name = (width > 1 ? label + "[" + b + "]" : label);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var inputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var inputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var inputNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var outputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var outputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var outputNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var entry : pinLabels.entrySet()) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var variable = new Var(entry.getValue(), width);
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (final var name : variable) inputNames.add(name);
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (final var name : variable) outputNames.add(name);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var inputCount = inputNames.size();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var rowCount = 1 << inputCount;
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var columns = new Entry[outputNames.size()][rowCount];
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (var i = 0; i < rowCount; i++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var circuitState = new CircuitState(proj, circuit);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      var incol = 0;
src/main/java/com/cburch/logisim/circuit/Analyze.java:      for (final var pin : inputPins) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var v = new Value[width];
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (var b = width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:          var value = TruthTable.isInputSet(i, incol++, inputCount);
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var pinState = circuitState.getInstanceState(pin);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var prop = circuitState.getPropagator();
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (var j = 0; j < columns.length; j++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:        var outcol = 0;
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (final var pin : outputPins) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:          final var pinState = circuitState.getInstanceState(pin);
src/main/java/com/cburch/logisim/circuit/Analyze.java:            final var outValue = Pin.FACTORY.getValue(pinState).get(b);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (var i = 0; i < columns.length; i++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var dirtyComponents = new HashSet<Component>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var point : pointsToProcess) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var ret = new TreeMap<Instance, String>(Location.CompareVertical);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var pin : circuit.getAppearance().getPortOffsets(Direction.EAST).values()) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var pinList = new ArrayList<>(ret.keySet());
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var labelsTaken = new HashSet<String>();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var pin : pinList) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      var label = pin.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var pin : pinList) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var options = defaultList.split(",");
src/main/java/com/cburch/logisim/circuit/Analyze.java:      for (var i = 0; label == null && i < options.length; i++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var computer = (ExpressionComputer) comp.getFeature(ExpressionComputer.class);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (final var locationBit : pointsToProcess) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var e = expressionMap.get(locationBit);
src/main/java/com/cburch/logisim/circuit/Analyze.java:      final var bundle = expressionMap.circuit.wires.getWireBundle(locationBit.loc);
src/main/java/com/cburch/logisim/circuit/Analyze.java:        final var t = bundle.threads[locationBit.bit];
src/main/java/com/cburch/logisim/circuit/Analyze.java:        for (final var tb : t.getBundles()) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:          for (final var p2 : tb.b.points) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:            final var p2b = new LocationBit(p2, tb.loc);
src/main/java/com/cburch/logisim/circuit/Analyze.java:            final var old = expressionMap.get(p2b);
src/main/java/com/cburch/logisim/circuit/Analyze.java:              final var eCause = expressionMap.currentCause;
src/main/java/com/cburch/logisim/circuit/Analyze.java:              final var oldCause = expressionMap.causes.get(p2b);
src/main/java/com/cburch/logisim/circuit/Analyze.java:    final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/circuit/Analyze.java:    var afterWhitespace = false;
src/main/java/com/cburch/logisim/circuit/Analyze.java:    for (var i = 0; i < label.length(); i++) {
src/main/java/com/cburch/logisim/circuit/Analyze.java:      var c = label.charAt(i);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var loc : toRemove.keySet()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var removed = toRemove.get(loc);
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var replaced = toAdd.remove(loc);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var end : toAdd.values()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var comp = e.getSource();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var toRemove = toMap(e.getOldData());
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var toAdd = toMap(e.getData());
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var xn = new EndChangedTransaction(comp, toRemove, toAdd);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var map = new HashMap<Location, EndData>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var valList = (List<EndData>) val;
src/main/java/com/cburch/logisim/circuit/Circuit.java:        for (final var end : valList) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var attrEvent = (AttributeEvent) e.getData();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var newLabel = (String) attrEvent.getValue();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var oldLabel = attrEvent.getOldValue() != null ? (String) attrEvent.getOldValue() : "";
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var msg = S.get("ComponentLabelEqualCircuitName");
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var msg = S.get("ComponentLabelNameError");
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var Label =
src/main/java/com/cburch/logisim/circuit/Circuit.java:            final var msg = S.get("UsedLabelNameError");
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var comps = new TreeSet<Component>(Location.CompareVertical);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var labelers = new HashMap<String, AutoLabel>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var labelNames = new LinkedHashSet<String>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var subCircuits = new LinkedHashSet<String>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : getNonWires()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var label = attrs.getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/Circuit.java:            final var act = new SetAttributeAction(this, S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var act = new SetAttributeAction(this, S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var componentName = getAnnotationName(comp);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var sizeMightHaveChanged = false;
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var componentName = getAnnotationName(comp);
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var newLabel = labelers.get(componentName).getNext(this, comp.getFactory());
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var act = new SetAttributeAction(this, S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var subs : subCircuits) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var circ = LibraryTools.getCircuitFromLibs(proj.getLogisimFile(), subs.toUpperCase());
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var inLibrary = !proj.getLogisimFile().getCircuits().contains(circ);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : this.getNonWires()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var state = project.getCircuitState();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var pinsState = new InstanceState[pin.length];
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var vPins = new Value[pin.length];
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ts = new TimeoutSimulation();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var timer = new Timer();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      var i = 0;
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var pinStatus : pin) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var state = project.getCircuitState();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (var i = 0; i < pin.length; ++i) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var pinState = state.getInstanceState(pin[i]);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var prop = state.getPropagator();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (var i = 0; i < pin.length; i++) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var pinState = state.getInstanceState(pin[i]);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var v = Pin.FACTORY.getValue(pinState);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var gCopy = g.create();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var c : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var gNew = g.create();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var c : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var gNew = g.create();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = new LinkedHashSet<Component>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : getComponents()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = new LinkedHashSet<Component>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : getComponents()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = new LinkedHashSet<Component>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : getComponents()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = new LinkedHashSet<Component>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : getComponents()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var wireBounds = wires.getWireBounds();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var it = comps.iterator();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var first = it.next();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var firstBounds = first.getBounds();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var xMin = firstBounds.getX();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var yMin = firstBounds.getY();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var xMax = xMin + firstBounds.getWidth();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var yMax = yMin + firstBounds.getHeight();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var compBounds = Bounds.create(xMin, yMin, xMax - xMin, yMax - yMin);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = wires.getWireBounds();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var xMin = ret.getX();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var yMin = ret.getY();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var xMax = xMin + ret.getWidth();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var yMax = yMin + ret.getHeight();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var bds = comp.getBounds(g);
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var x0 = bds.getX();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var x1 = x0 + bds.getWidth();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var y0 = bds.getY();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var y1 = y0 + bds.getHeight();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var ret = new HashSet<String>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      for (final var key : loadedMaps.get(boardName).keySet()) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var cmap = loadedMaps.get(boardName).get(key);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var loc = comp.getLocation();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var existing = wires.points.getNonWires(loc);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var existingComp : existing) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var dir1 = comp.getAttributeSet().getValue(Pin.ATTR_TYPE);
src/main/java/com/cburch/logisim/circuit/Circuit.java:          final var dir2 = existingComp.getAttributeSet().getValue(Pin.ATTR_TYPE);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var o : wires.points.getComponents(loc)) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      var added = wires.add(wire);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      var added = comps.add(c);
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var labels = new HashSet<String>();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:            final var label = comp.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var label = c.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var factory = c.getFactory();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var subcirc = subFactory;
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var vhdl = vhdlEntity;
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var oldComps = comps;
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : oldComps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var factory = c.getFactory();
src/main/java/com/cburch/logisim/circuit/Circuit.java:    var changed = false;
src/main/java/com/cburch/logisim/circuit/Circuit.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/Circuit.java:      final var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/Circuit.java:        final var compLabel = attrs.getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/Circuit.java:    final var currentTickFrequency = staticAttrs.getValue(CircuitAttributes.SIMULATION_FREQUENCY);
src/main/java/com/cburch/logisim/circuit/CircuitAction.java:    final var result = forward.execute();
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var ret = AttributeSets.fixedSet(STATIC_ATTRS, STATIC_DEFAULTS);
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var factory = (SubcircuitFactory) subcircInstance.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:        final var NewName = (String) e.getValue();
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:        final var OldName =
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:            for (final var component : source.getNonWires()) {
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:                final var label = component.getAttributeSet().getValue(StdAttr.LABEL).toUpperCase();
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:                  final var msg = S.get("CircuitSameInputOutputLabel");
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:    final var ret = AttributeSets.fixedSet(STATIC_ATTRS, STATIC_DEFAULTS);
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:    final var other = (CircuitAttributes) dest;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var val = (Direction) value;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var val = (String) value;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var oldval = label;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var val = (Font) value;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var val = (Boolean) value;
src/main/java/com/cburch/logisim/circuit/CircuitAttributes.java:      final var val = (Direction) value;
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        for (final var comp : comps) {
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        final var repl = (ReplacementMap) newValue;
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        for (final var comp : repl.getRemovals()) {
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        for (final var comp : repl.getAdditions()) {
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        for (final var comp : comps) prevReplacements.add(comp);
src/main/java/com/cburch/logisim/circuit/CircuitChange.java:        for (final var comp : comps) prevReplacements.remove(comp);
src/main/java/com/cburch/logisim/circuit/CircuitEvent.java:    final var s = switch (getAction) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var inOutBubbles = theNetlist.numberOfInOutBubbles();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var inputBubbles = theNetlist.getNumberOfInputBubbles();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var outputBubbles = theNetlist.numberOfOutputBubbles();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var wire : theNetlist.getAllNets())
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var wire : theNetlist.getAllNets())
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var clock = 0; clock < theNetlist.numberOfClockTrees(); clock++)
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var input = 0; input < theNetlist.getNumberOfInputPorts(); input++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var selectedInput = theNetlist.getInputPin(input);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var name = selectedInput.getComponent().getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var nrOfBits = selectedInput.getComponent().getAttributeSet().getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var output = 0; output < theNetlist.numberOfOutputPorts(); output++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var selectedInput = theNetlist.getOutputPin(output);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var name = selectedInput.getComponent().getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var nrOfBits = selectedInput.getComponent().getAttributeSet().getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var myNetList = myCircuit.getNetList();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    var workPath = workingDir;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var thisComponent : myNetList.getNormalComponents()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var componentName =
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var worker =
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var thisCircuit : myNetList.getSubCircuits()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var worker =
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    var componentName = CorrectLabel.getCorrectLabel(myCircuit.getName());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var fmt = "{{<}}{{1}} {{2}} {{3}}{{>}}";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var components = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var instantiatedComponents = new HashSet<String>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var gate : theNetlist.getNormalComponents()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var compName = gate.getComponent().getFactory().getHDLName(gate.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var worker = gate.getComponent().getFactory().getHDLGenerator(gate.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var gate : theNetlist.getSubCircuits()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      var compName = gate.getComponent().getFactory().getHDLName(gate.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var worker = gate.getComponent().getFactory().getHDLGenerator(gate.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var contents = new HashMap<String, String>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var thisNet : theNets.getAllNets()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var wireId = theNets.getNetId(thisNet);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        for (var bit = 0; bit < thisNet.getBitWidth(); bit++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          for (final var source : thisNet.getSourceNets(bit)) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var destination = thisNet.isBus() ? LineBuffer.formatHdl("{{1}}{{2}}{{<}}{{3}}{{>}}", BUS_NAME, wireId, bit)
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var sourceWire = LineBuffer.formatHdl("{{1}}{{2}}{{<}}{{3}}{{>}}", BUS_NAME,
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          for (final var source : thisNet.getSinkNets(bit)) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var destination = LineBuffer.formatHdl("{{1}}{{2}}{{<}}{{3}}{{>}}", BUS_NAME,
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var sourceWire = thisNet.isBus() ? LineBuffer.formatHdl("{{1}}{{2}}{{<}}{{3}}{{>}}", BUS_NAME, wireId, bit)
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    var isFirstLine = true;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var compIds = new HashMap<String, Long>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var clockSource : theNetList.getClockSources()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var msg = String.format("Clock component found with no connection, skipping: '%s'",
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var clockNet = Hdl.getClockNetName(clockSource, 0, theNetList);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var destination = Hdl.getNetName(clockSource, 0, true, theNetList);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var source = theNetList.requiresGlobalClockConnection() ? TickComponentHdlGeneratorFactory.FPGA_CLOCK
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var i = 0; i < theNetList.getNumberOfInputPorts(); i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var myInput = theNetList.getInputPin(i);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var pinName = CorrectLabel.getCorrectLabel(myInput.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var i = 0; i < theNetList.numberOfOutputPorts(); i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var pinName = CorrectLabel.getCorrectLabel(myOutput.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var comp : theNetList.getNormalComponents()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      var worker = comp.getComponent().getFactory().getHDLGenerator(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var inlinedName = comp.getComponent().getFactory().getHDLName(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var InlinedId = "InlinedComponent";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          var id = (compIds.containsKey(InlinedId)) ? compIds.get(InlinedId) : (long) 1;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var thisAttrs = comp.getComponent().getAttributeSet();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var hasLabel = thisAttrs.containsAttribute(StdAttr.LABEL)
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var compName = hasLabel ? CorrectLabel.getCorrectLabel(thisAttrs.getValue(StdAttr.LABEL)) : "";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var remarkLine = LineBuffer.format("{{1}}{{2}}{{3}}", comp.getComponent().getFactory().getDisplayName(),
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var comp : theNetList.getNormalComponents()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      var worker = comp.getComponent().getFactory().getHDLGenerator(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var compName = comp.getComponent().getFactory().getHDLName(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var compId = "NormalComponent";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          var id = (compIds.containsKey(compId)) ? compIds.get(compId) : (long) 1;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (final var comp : theNetList.getSubCircuits()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      final var worker = comp.getComponent().getFactory().getHDLGenerator(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        var compName = comp.getComponent().getFactory().getHDLName(comp.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var CompId = "SubCircuits";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        var id = (compIds.containsKey(CompId)) ? compIds.get(CompId) : (long) 1;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var compMap = worker.getComponentMap(theNetList, id++, comp, compName);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var portMap = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var topLevel = theMapInfo instanceof MappableResourcesContainer;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var componentInfo = topLevel ? null : (netlistComponent) theMapInfo;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    var mapInfo = topLevel ? (MappableResourcesContainer) theMapInfo : null;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var Preamble = topLevel ? "s_" : "";
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var sub = topLevel ? null : (SubcircuitFactory) componentInfo.getComponent().getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var myNetList = topLevel ? nets : sub.getSubcircuit().getNetList();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    for (var i = 0; i < myNetList.numberOfClockTrees(); i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var nrOfIOBubbles = myNetList.numberOfInOutBubbles();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var vector = new StringBuilder();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        for (var i = nrOfIOBubbles - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          var compPin = -1;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          for (final var key : mapInfo.getMappableResources().keySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var comp = mapInfo.getMappableResources().get(key);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:              final var id = comp.getIoBubblePinId(i);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var nrOfInputPorts = myNetList.getNumberOfInputPorts();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      for (var i = 0; i < nrOfInputPorts; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var pinLabel = CorrectLabel.getCorrectLabel(selected.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var endId = nets.getEndIndex(componentInfo, pinLabel, false);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var nrOfInOutPorts = myNetList.numberOfInOutPorts();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      for (var i = 0; i < nrOfInOutPorts; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var selected = myNetList.getInOutPin(i);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var pinLabel = CorrectLabel.getCorrectLabel(selected.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var endId = nets.getEndIndex(componentInfo, pinLabel, false);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var nrOfOutputPorts = myNetList.numberOfOutputPorts();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      for (var i = 0; i < nrOfOutputPorts; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:        final var selected = myNetList.getOutputPin(i);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          final var pinLabel = CorrectLabel.getCorrectLabel(selected.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var endid = nets.getEndIndex(componentInfo, pinLabel, true);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var signal = new HashMap<String, String>();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var connectionInformation = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var isInputConnection = connectionInformation.isOutputEnd();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:    final var nrOfBits = connectionInformation.getNrOfBits();
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      var connected = false;
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:      for (var i = 0; i < nrOfBits; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:          for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var bitConnection = LineBuffer.formatHdl("{{1}}{{<}}{{2}}{{>}}", portName, bit);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:            final var solderPoint = connectionInformation.get((byte) bit);
src/main/java/com/cburch/logisim/circuit/CircuitHdlGeneratorFactory.java:              final var connectedNet = solderPoint.getParentNet().getBitWidth() == 1
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:    final var requests = xn.getAccessedCircuits();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:    final var circuitLocks = new HashMap<Circuit, Lock>();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:    final var lockOrder = requests.keySet().toArray(new Circuit[0]);
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:      for (final var circ : lockOrder) {
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:        final var access = requests.get(circ);
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:        final var locker = circ.getLocker();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:          final var lock = locker.circuitLock.readLock();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:          final var curThread = Thread.currentThread();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:            final var lock = locker.circuitLock.writeLock();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:    final var curThread = Thread.currentThread();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:    for (final var entry : locks.entrySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:      final var circ = entry.getKey();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:      final var lock = entry.getValue();
src/main/java/com/cburch/logisim/circuit/CircuitLocker.java:      final var locker = circ.getLocker();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    final var accessMap = new HashMap<Circuit, Integer>();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    final var supercircsDone = new HashSet<Circuit>();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    final var vhdlDone = new HashSet<VhdlEntity>();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    final var siblingsDone = new HashSet<ComponentFactory>();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    for (final var change : changes) {
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:      final var circ = change.getCircuit();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:        final var isFirstForCirc = supercircsDone.add(circ);
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:          for (final var supercirc : circ.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:        final var factory = change.getComponent().getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:        final var isFirstForSibling = siblingsDone.add(factory);
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:            final var sibling = sub.getSubcircuit();
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:            final var isFirstForCirc = supercircsDone.add(sibling);
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:              for (final var supercirc : sibling.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:            final var isFirstForVhdl = vhdlDone.add(sibling);
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:              for (final var supercirc : sibling.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    final var repl = new ReplacementMap(oldComp, newComp);
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:    for (final var change : changes) {
src/main/java/com/cburch/logisim/circuit/CircuitMutation.java:      final var circ = change.getCircuit();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var repl = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var comps = new HashSet<>(circuit.getNonWires());
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var repl = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    for (final var comp : comps) repl.remove(comp);
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    var ret = replacements.get(circuit);
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var ret = new CircuitMutation();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var log = this.log;
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    for (var i = log.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      final var repl = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      for (final var component : repl.getRemovals()) {
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      for (final var component : repl.getAdditions()) {
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      final var a = (Attribute<Object>) attr;
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      final var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:      final var oldValue = attrs.getValue(a);
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var a = (Attribute<Object>) attr;
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var attrs = circuit.getStaticAttributes();
src/main/java/com/cburch/logisim/circuit/CircuitMutatorImpl.java:    final var oldValue = attrs.getValue(a);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:      for (final var endData : comp.getEnds()) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:      var width = BitWidth.UNKNOWN;
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:      for (final var endData : locData.ends) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:          final var endWidth = endData.getWidth();
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var components = locData.components;
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    var retSize = 0;
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var ret = new Component[retSize];
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    var retPos = 0;
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    for (final var endData : locData.ends) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:      for (final var endData : comp.getEnds()) {
src/main/java/com/cburch/logisim/circuit/CircuitPoints.java:    final var locData = map.get(loc);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var comp = (Component) event.getData();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var comp = (Component) event.getData();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:          final var subState = (CircuitState) getData(comp);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        for (final var comp : componentData.keySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var comp = (Component) event.getData();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var map = event.getResult().getReplacementMap(circuit);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        for (final var comp : map.getRemovals()) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:          final var compState = componentData.remove(comp);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:          var found = false;
src/main/java/com/cburch/logisim/circuit/CircuitState.java:          for (final var repl : map.getReplacementsFor(comp)) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var ret = new CircuitState(proj, circuit);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var substateData = new HashMap<CircuitState, CircuitState>();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var oldSub : src.subStates) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var newSub = new CircuitState(src.proj, oldSub.circuit);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var key : src.componentData.keySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var oldValue = src.componentData.get(key);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var newValue = substateData.get(oldValue);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var newValue = (oldValue instanceof ComponentState state) ? state.clone() : oldValue;
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var key : src.causes.keySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var oldValue = src.causes.get(key);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var newValue = oldValue.cloneFor(this);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var causeList = causes.get(p);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var factory = instance.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var ret = values.get(pt);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var wid = circuit.getWidth(pt);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var set = new CopyOnWriteArraySet<Component>();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      for (var tries = 4; true; tries--) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      for (final var compObj : toProcess) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var subs = new CircuitState[subStates.size()];
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var substate : subStates.toArray(subs)) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var dirty = new HashSet<>(dirtyPoints);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      for (var i = 3; i >= 0; i--) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var subs = new CircuitState[subStates.size()];
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var substate : subStates.toArray(subs)) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var comp : componentData.keySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var remove = ram.reset(this, Instance.getInstanceFor(comp));
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var oldState = (CircuitState) componentData.get(comp);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var old = values.remove(p);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var old = values.put(p, v);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      var found = false;
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      for (final var comp : circuit.getComponents(p)) {
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    var ret = false;
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var clock : circuit.getClocks())
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    final var subs = new CircuitState[subStates.size()];
src/main/java/com/cburch/logisim/circuit/CircuitState.java:    for (final var substate : subStates.toArray(subs))
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var pin = (Pin) temporaryClock.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitState.java:      final var instance = Instance.getInstanceFor(temporaryClock);
src/main/java/com/cburch/logisim/circuit/CircuitState.java:        final var state = getInstanceState(instance);
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:    final var mutator = new CircuitMutatorImpl();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:    final var locks = CircuitLocker.acquireLocks(this, mutator);
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:        for (final var entry : locks.entrySet()) {
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:          final var circuit = entry.getKey();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:          final var lock = entry.getValue();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:      final var modified = mutator.getModifiedCircuits();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:      for (final var circuit : modified) {
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:        final var circMutator = circuit.getLocker().getMutator();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:          final var repl = mutator.getReplacementMap(circuit);
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:            final var pins = circuit.getAppearance().getCircuitPins();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:      for (final var circuit : modified) {
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:        final var circMutator = circuit.getLocker().getMutator();
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:          final var repair = new WireRepair(circuit);
src/main/java/com/cburch/logisim/circuit/CircuitTransaction.java:      for (final var circuit : result.getModifiedCircuits()) {
src/main/java/com/cburch/logisim/circuit/CircuitTransactionResult.java:    final var ret = mutator.getReplacementMap(circuit);
src/main/java/com/cburch/logisim/circuit/CircuitTransactionResult.java:    final var s = new StringBuilder("CircuitTransactionResult affecting...");
src/main/java/com/cburch/logisim/circuit/CircuitTransactionResult.java:    for (final var c : getModifiedCircuits()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      var ret = pointBundles.get(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var ret = new State(this.bundleMap);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var attr = e.getAttribute();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var ret = base.getAll();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (var i = 0; i < ret.length; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var added = true;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var added = wires.add(w);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var it = ret.getBundles().iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var b = it.next();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var bpar = b.find();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        for (final var pt : b.points) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var spl : splitters) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var ends = new ArrayList<>(spl.getEnds());
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var end : ends) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var p = end.getLocation();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var pb = ret.createBundleAt(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var p : ret.getBundlePoints()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var pb = ret.getBundleAt(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var width = points.getWidth(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var spl : splitters) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var ends = new ArrayList<>(spl.getEnds());
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var end : ends) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var p = end.getLocation();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var pb = ret.getBundleAt(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var spl : splitters) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var splAttrs = (SplitterAttributes) spl.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var bitEnd = splAttrs.bitEnd;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var splData = spl.wireData;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var fromBundle = splData.endBundle[0];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        for (var i = 0; i < bitEnd.length; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          var j = bitEnd[i];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            var thr = spl.bitThread[i];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            final var toBundle = splData.endBundle[j];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            final var toThreads = toBundle.threads;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:              final var fromThreads = fromBundle.threads;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var wireBundle : ret.getBundles()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var thr = wireBundle.threads[i].find();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var exceptions = points.getWidthIncompatibilityData();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var wid : exceptions) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var wireBundle : ret.getBundles()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var e = wireBundle.getWidthIncompatibilityData();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var comp : pulls) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var loc = comp.getEnd(0).getLocation();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      var b = ret.getBundleAt(loc);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var instance = Instance.getInstanceFor(comp);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var tunnelSets = new HashMap<String, ArrayList<Location>>();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var comp : tunnels) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var label = comp.getAttributeSet().getValue(StdAttr.LABEL).trim();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var tunnelSet = tunnelSets.computeIfAbsent(label, k -> new ArrayList<>(3));
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var loc : tunnelSet) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var bundle = ret.getBundleAt(loc);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var loc : tunnelSet) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var bundle = ret.getBundleAt(loc);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var wire : wires) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var bundleA = ret.getBundleAt(wire.e0);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var bundleB = ret.createBundleAt(wire.e1);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var bundleB = ret.getBundleAt(wire.e1);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var showState = context.getShowState();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var state = context.getCircuitState();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var g = (Graphics2D) context.getGraphics();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var highlighted = context.getHighlightedWires();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var bmap = getBundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var isValid = bmap.isValid();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var wire : wires) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var s = wire.e0;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var t = wire.e1;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var wb = bmap.getBundleAt(s);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        var width = 5;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var oldStroke = g.getStroke();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var loc : points.getSplitLocations()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var wb = bmap.getBundleAt(loc);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            var color = Color.BLACK;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var wire : wires) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var s = wire.e0;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var t = wire.e1;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var wb = bmap.getBundleAt(s);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var loc : points.getSplitLocations()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          var icount = 0;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          for (final var comp : points.getComponents(loc)) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            final var wireBundle = bmap.getBundleAt(loc);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:              var radius = highlighted.containsLocation(loc)
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var ret = new BundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var ret = new BundleMap[1];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var ret = new BundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var ret = Value.UNKNOWN;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var pull = Value.UNKNOWN;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var tb : t.getBundles()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var p : tb.b.points) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var val = state.getComponentOutputAt(p);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var pullHere = tb.b.getPullValue();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var det = points.getWidth(q);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var bmap = getBundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var qb = bmap.getBundleAt(q);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var det = points.getWidth(q);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var qb = getBundleMap().getBundleAt(q);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var bds = bounds;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var bundleMap = getBundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var wireBundle = getWireBundle(start.e0);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var wires = new HashSet<Wire>();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var loc : wireBundle.points) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var map = getBundleMap();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var dirtyThreads = new CopyOnWriteArraySet<WireThread>(); // affected threads
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var state = circState.getWireData();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      for (final var bundle : map.getBundles()) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var wireThreads = bundle.threads;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var point : points) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var wireBundle = map.getBundleAt(point);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var th = wireBundle.threads;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var pbPoints = wireBundle.points;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:            for (final var loc2 : pbPoints) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var bundles = new HashSet<ThreadBundle>();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var t : dirtyThreads) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var v = getThreadValue(circState, t);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    for (final var tb : bundles) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var b = tb.b;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        final var tvs = new Value[b.threads.length];
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        var tvsValid = true;
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        for (var i = 0; i < tvs.length; i++) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:          final var tv = state.thrValues.get(b.threads[i]);
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:        for (final var p : b.points) {
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    final var it = wires.iterator();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var w = it.next();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var xmin = w.e0.getX();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var ymin = w.e0.getY();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var xmax = w.e1.getX();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:    var ymax = w.e1.getY();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var x0 = w.e0.getX();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var x1 = w.e1.getX();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var y0 = w.e0.getY();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var y1 = w.e1.getY();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/circuit/CircuitWires.java:      final var smaller = bounds.expand(-2);
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    for (final var s : source.getSubStates()) {
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var circState = context.getCircuitState();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var stateMap = new HashMap<CircuitState, CircuitState>();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    for (final var state : circState.getSubStates()) addSubstates(stateMap, state, state);
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    for (final var entry : data) {
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:        final var p = entry.item;
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:        final var subState = stateMap.get(entry.state);
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:        final var subCircuit = subState.getSubcircuit();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:        final var bound = subCircuit.getBounds();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var state = context.getCircuitState();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var stateMap = new HashMap<CircuitState, CircuitState>();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    for (final var s : state.getSubStates()) addSubstates(stateMap, s, s);
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:      final var b = comp.getBounds();
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var signalsChanged = data.isEmpty() ? "no" : String.valueOf(data.size());
src/main/java/com/cburch/logisim/circuit/PropagationPoints.java:    final var inputSignals = pendingInputs.isEmpty() ? "no" : String.valueOf(pendingInputs.size());
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var p = prop.get();
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var newProp = newState.getPropagator();
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var dtime = newProp.clock - state.getPropagator().clock;
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var ret =
src/main/java/com/cburch/logisim/circuit/Propagator.java:    var ret = causes.val;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    for (var n = causes.next; n != null; n = n.next) {
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var l = new Listener(this);
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var causes = state.causes;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    var replaced = false;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    for (var n = head; n != null; n = n.next) {
src/main/java/com/cburch/logisim/circuit/Propagator.java:    for (final var end : comp.getEnds()) {
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var loc = end.getLocation();
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var oldHead = state.causes.get(loc);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var oldVal = computeValue(oldHead);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var newHead = removeCause(state, oldHead, loc, comp);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var newVal = computeValue(newHead);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var wireVal = state.getValueByWire(loc);
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var oscThreshold = simLimit;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var logThreshold = 3 * oscThreshold / 4;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    var iters = 0;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var causes = state.causes;
src/main/java/com/cburch/logisim/circuit/Propagator.java:      var prev = head;
src/main/java/com/cburch/logisim/circuit/Propagator.java:      var cur = head.next;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var randomShift = simRandomShift;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var oldOsc = oscPoints;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var visited = new HashMap<CircuitState, HashSet<ComponentPoint>>();
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var data = toProcess.peek();
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var state = data.state;
src/main/java/com/cburch/logisim/circuit/Propagator.java:      var handled = visited.get(state);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var oldHead = state.causes.get(data.loc);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var oldVal = computeValue(oldHead);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var newHead = addCause(state, oldHead, data);
src/main/java/com/cburch/logisim/circuit/Propagator.java:      final var newVal = computeValue(newHead);
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var opts = root.getProject().getOptions();
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var rand = opts.getAttributeSet().getValue(Options.ATTR_SIM_RAND);
src/main/java/com/cburch/logisim/circuit/Propagator.java:    final var val = rand;
src/main/java/com/cburch/logisim/circuit/Propagator.java:    var logVal = 0;
src/main/java/com/cburch/logisim/circuit/RadixOption.java:      final var bits = width.getWidth();
src/main/java/com/cburch/logisim/circuit/RadixOption.java:    for (final var opt : OPTIONS) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    final var oldSet = new HashSet<Component>(3);
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    final var newSet = new HashSet<Component>(3);
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    for (final var e : next.map.entrySet()) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      final var b = e.getKey();
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      final var cs = e.getValue(); // what b is replaced by
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      var as = this.inverse.remove(b); // what was replaced
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      for (final var a : as) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:        final var aDst = this.map.computeIfAbsent(a, k -> new HashSet<>(cs.size()));
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      for (final var c : cs) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:        var cSrc = this.inverse.get(c); // should always
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    for (final var e : next.inverse.entrySet()) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      final var c = e.getKey();
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:        final var bs = e.getValue();
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    var found = false;
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    for (final var comp : getRemovals()) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      for (final var b : map.get(comp)) out.println("     `--> " + b.toString());
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    for (final var b : getAdditions()) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      for (final var a : inverse.get(b)) out.println("     ^-- " + a.toString());
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    final var oldBs = map.computeIfAbsent(a, k -> new HashSet<>(bs.size()));
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    for (final var b : bs) {
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:      final var oldAs = inverse.computeIfAbsent(b, k -> new HashSet<>(3));
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    final var out = new ByteArrayOutputStream();
src/main/java/com/cburch/logisim/circuit/ReplacementMap.java:    try (final var p = new PrintStream(out, true, StandardCharsets.UTF_8)) {
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var oops = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var osc = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var ticked = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var stepped = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var propagated = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var hasClocks = true;
src/main/java/com/cburch/logisim/circuit/Simulator.java:          final var p = sim.getPropagationListener();
src/main/java/com/cburch/logisim/circuit/Simulator.java:          final var evt = p == null ? null : new Event(sim, false, false, false);
src/main/java/com/cburch/logisim/circuit/Simulator.java:      var clockDied = false;
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var event = new Event(this, false, false, false);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    for (final var listener : copyListeners()) listener.simulatorReset(event);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var e = new Event(this, t, false, false);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    for (final var l : copyListeners()) l.propagationStarted(e);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var event = new Event(this, t, s, p);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    for (final var listener : copyListeners()) {
src/main/java/com/cburch/logisim/circuit/Simulator.java:    for (final var listener : copyListeners()) {
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var e = new Event(this, false, false, false);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    for (final var l : copyListeners()) l.simulatorStateChanged(e);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var prop = simThread.getPropagator();
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var prop = simThread.getPropagator();
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var circuitState = getCircuitState();
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var cs = getCircuitState();
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var circ = cs.getCircuit();
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var clocks = ComponentSelector.findClocks(circ);
src/main/java/com/cburch/logisim/circuit/Simulator.java:    final var clk = ClockSource.doClockDriverDialog(circ);
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var attrs = (SplitterAttributes) getAttributeSet();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var parms = attrs.getParameters();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var fanout = attrs.fanout;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var bitEnd = attrs.bitEnd;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var endWidth = new byte[fanout + 1];
src/main/java/com/cburch/logisim/circuit/Splitter.java:    for (var i = 0; i < bitEnd.length; i++) {
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var thr = bitEnd[i];
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var origin = getLocation();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var x = origin.getX() + parms.getEnd0X();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var y = origin.getY() + parms.getEnd0Y();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var dx = parms.getEndToEndDeltaX();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var dy = parms.getEndToEndDeltaY();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var ends = new EndData[fanout + 1];
src/main/java/com/cburch/logisim/circuit/Splitter.java:    for (var i = 0; i < fanout; i++) {
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var myLoc = getLocation();
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var facing = getAttributeSet().getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var attrs = (SplitterAttributes) getAttributeSet();
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var loc = getLocation();
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/Splitter.java:      final var bds = this.getBounds();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var end = -1;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    for (var i = getEnds().size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var bits = 0;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var buffer = new StringBuilder();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var attrs = (SplitterAttributes) getAttributeSet();
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var bitEnd = attrs.bitEnd;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var inString = false;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    var beginString = 0;
src/main/java/com/cburch/logisim/circuit/Splitter.java:    for (var i = 0; i < bitEnd.length; i++) {
src/main/java/com/cburch/logisim/circuit/Splitter.java:    final var base = switch (bits) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      for (final var a : options) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var found = false;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        for (final var b : other.options) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var index = value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var combo = new ComboBox<>(options);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var index = value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var ret = "" + value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var ret = new byte[bits];
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        for (var i = 0; i < bits; i++) ret[i] = (byte) (i + 1);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        final var threads_per_end = bits / fanout;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var endsWithExtra = bits % fanout;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var curEnd = -1; // immediately increments
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var leftInEnd = 0;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        for (var i = 0; i < bits; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        final var threads_per_end = bits / fanout;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var endsWithExtra = bits % fanout;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var curEnd = -1;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        var leftInEnd = 0;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    for (final var b : bitEnd) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var offs = INIT_ATTRIBUTES.size();
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    var curNum = attrs.size() - offs;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var dflt = computeDistribution(fanout, bitEnd.length, 1);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    var changed = curNum != bitEnd.length;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    for (var i = 0; i < curNum; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:        final var attr = (BitOutAttribute) attrs.get(offs + i);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    for (var i = curNum; i < bitEnd.length; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var attr = new BitOutAttribute(i, options);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    var isVertical = facing == Direction.EAST || facing == Direction.WEST;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    for (var i = -1; i < fanout; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var offs = INIT_ATTRIBUTES.size();
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var curNum = attrs.size() - offs;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    for (var i = 0; i < curNum; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var attr = (BitOutAttribute) attrs.get(offs + i);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var dest = (SplitterAttributes) destObj;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var attr = (BitOutAttribute) this.attrs.get(i);
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var newFacing = (Direction) value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var bits = bitEnd;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      for (var i = 0; i < bits.length; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var width = (BitWidth) value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var s = (Integer) value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:      final var appearance = (AttributeOption) value;
src/main/java/com/cburch/logisim/circuit/SplitterAttributes.java:    final var answer = new ArrayList<Attribute<?>>(bitEnd.length);
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var attrs = (SplitterAttributes) splitter.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var actual = attrs.bitEnd;
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var desired = SplitterAttributes.computeDistribution(attrs.fanout, actual.length, order);
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    var same = actual.length == desired.length;
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    for (var i = 0; same && i < desired.length; i++) {
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var attrs = (SplitterAttributes) splitter.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var actual = attrs.bitEnd;
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var desired = SplitterAttributes.computeDistribution(attrs.fanout, actual.length, order);
src/main/java/com/cburch/logisim/circuit/SplitterDistributeItem.java:    final var xn = new CircuitMutation(proj.getCircuitState().getCircuit());
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var attrs = (SplitterAttributes) attrsBase;
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var loc = Location.create(x, y, true);
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var attrs = (SplitterAttributes) attrsBase;
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var fanout = attrs.fanout;
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var parms = attrs.getParameters();
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var xEnd0 = parms.getEnd0X();
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var yEnd0 = parms.getEnd0Y();
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    var bds = Bounds.create(0, 0, 1, 1);
src/main/java/com/cburch/logisim/circuit/SplitterFactory.java:    final var g = c.getGraphics();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var ends = new String[attrs.fanout + 1];
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var curEnd = -1;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var cur0 = 0;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      final var bit = i == n ? -1 : attrs.bitEnd[i];
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:          final var old = ends[curEnd];
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var g = context.getGraphics().create();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var parms = attrs.getParameters();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var halign = parms.getTextHorzAlign();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var valign = parms.getTextVertAlign();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      final var text = ends[i + 1];
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var state = context.getCircuitState();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var fanout = attrs.fanout;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var parms = attrs.getParameters();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var x0 = origin.getX();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var y0 = origin.getY();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var x1 = x0 + parms.getEnd0X();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var y1 = y0 + parms.getEnd0Y();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var dx = parms.getEndToEndDeltaX();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var dy = parms.getEndToEndDeltaY();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      final var ySpine = (y0 + y1) / 2;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      var xi = x1;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      var yi = y1;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:        final var xSpine = xi + (xi == x0 ? 0 : (xi < x0 ? 10 : -10));
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      final var xSpine = (x0 + x1) / 2;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      var xi = x1;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      var yi = y1;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:        final var ySpine = yi + (yi == y0 ? 0 : (yi < y0 ? 10 : -10));
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var showState = context.getShowState();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var state = showState ? context.getCircuitState() : null;
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var parms = attrs.getParameters();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var x0 = origin.getX();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var y0 = origin.getY();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var x = x0 + parms.getEnd0X();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var y = y0 + parms.getEnd0Y();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var dx = parms.getEndToEndDeltaX();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var dy = parms.getEndToEndDeltaY();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var dxEndSpine = parms.getEndToSpineDeltaX();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var dyEndSpine = parms.getEndToSpineDeltaY();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    final var oldColor = g.getColor();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:        final var val = state.getValue(Location.create(x, y, true));
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var spine0x = x0 + parms.getSpine0X();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var spine0y = y0 + parms.getSpine0Y();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var spine1x = x0 + parms.getSpine1X();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:    var spine1y = y0 + parms.getSpine1Y();
src/main/java/com/cburch/logisim/circuit/SplitterPainter.java:      final var fanout = attrs.fanout;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var appear = attrs.appear;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var fanout = attrs.fanout;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var width = 20;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var gap = attrs.spacing * 10;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:    final var offs = 6;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:      final var m = facing == Direction.NORTH ? 1 : -1;
src/main/java/com/cburch/logisim/circuit/SplitterParameters.java:      final var m = facing == Direction.WEST ? -1 : 1;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var superState = proj.getCircuitState();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var subState = getSubstate(superState, instance);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var name = instance.getFactory().getDisplayName();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var text = S.get("subcircuitViewItem", name);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var item = new JMenuItem(text);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var hi = new CircuitStateHolder.HierarchyInfo(proj.getCurrentCircuit());
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      for (final var comp : source.getNonWires()) {
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:            final var m = (CircuitFeature) c.getFeature(MenuExtender.class);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:            final var newhi = hi.getCopy();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:            final var m = (MenuExtender) c.getFeature(MenuExtender.class);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var portLocs = source.getAppearance().getPortOffsets(facing);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var ports = new Port[portLocs.size()];
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var pins = new Instance[portLocs.size()];
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    for (final var portLoc : portLocs.entrySet()) {
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var loc = portLoc.getKey();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var pin = portLoc.getValue();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var type = Pin.FACTORY.isInputPin(pin) ? Port.INPUT : Port.OUTPUT;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var label = pin.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var attrs = (CircuitAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var loc = instance.getAttributeValue(CircuitAttributes.LABEL_LOCATION_ATTR);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var x = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var y = bds.getY() + bds.getHeight() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var ha = GraphicsUtil.H_CENTER;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var va = GraphicsUtil.V_CENTER;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var attrs = (CircuitAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var defaultFacing = source.getAppearance().getFacing();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var staticAttrs = source.getStaticAttributes();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var label = staticAttrs.getValue(CircuitAttributes.CIRCUIT_LABEL_ATTR);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var up = staticAttrs.getValue(CircuitAttributes.CIRCUIT_LABEL_FACING_ATTR);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var font = staticAttrs.getValue(CircuitAttributes.CIRCUIT_LABEL_FONT_ATTR);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      var back = label.indexOf('\\');
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      var lines = 1;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      var backs = false;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var c = label.charAt(back + 1);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var x = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      var y = bds.getY() + bds.getHeight() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var g = painter.getGraphics().create();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var angle = Math.PI / 2 - (up.toRadians() - defaultFacing.toRadians()) - facing.toRadians();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var height = fm.getHeight();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:          final var c = label.charAt(back + 1);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:            final var line = label.substring(0, back);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var defaultFacing = source.getAppearance().getFacing();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var bds = source.getAppearance().getOffsetBounds();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    var subState = (CircuitState) instanceState.getData();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var accessMap = new HashMap<Circuit, Integer>();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      for (final var supercirc : source.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var attrs = (CircuitAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var facing = attrs.getFacing();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var defaultFacing = source.getAppearance().getFacing();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var fg = g.getColor();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var subState = getSubstate(superState);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var attrs = (CircuitAttributes) superState.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var pins = attrs.getPinInstances();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    for (var i = 0; i < pins.length; i++) {
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var pin = pins[i];
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:      final var pinState = subState.getInstanceState(pin);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var newVal = superState.getPortValue(i);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var oldVal = Pin.FACTORY.getValue(pinState);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:        final var val = pinState.getPortValue(0);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var g2 = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var attrs = (CircuitAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var wh = AppPreferences.getScaled(3);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    for (var y = 0; y < 3; y++) {
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var f = g2.getFont().deriveFont((float) AppPreferences.getIconSize() / 4);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var l = new TextLayout("main", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var wh = AppPreferences.getScaled(3);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var f = g2.getFont().deriveFont((float) AppPreferences.getIconSize() / 4);
src/main/java/com/cburch/logisim/circuit/SubcircuitFactory.java:    final var l = new TextLayout("main", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:    final var bds = painter.getInstance().getBounds();
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:    final var bds = state.getInstance().getBounds();
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:    for (final var c :
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:    for (final var c :
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var bds = painter.getInstance().getBounds();
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var cx = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var cy = bds.getY() + bds.getHeight() / 2;
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var tx = cx + 7;
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var ty = cy + 7;
src/main/java/com/cburch/logisim/circuit/SubcircuitPoker.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:    for (var i = 0; i < points.size(); i++) {
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:    for (var i = 0; i < this.size(); i++) {
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:      final var p = o.getPoint(i);
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:      final var w = o.getBitWidth(i);
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:      var matched = false;
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:      for (var j = 0; j < o.size(); j++) {
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:        final var q = this.getPoint(j);
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:        final var x = this.getBitWidth(j);
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:    final var hist = new int[65];
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:    var maxcount = 0;
src/main/java/com/cburch/logisim/circuit/WidthIncompatibilityData.java:    for (final var bw : widths) {
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var state = context.getCircuitState();
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var x0 = e0.getX();
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var y0 = e0.getY();
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var x0 = e0.getX();
src/main/java/com/cburch/logisim/circuit/Wire.java:    final var y0 = e0.getY();
src/main/java/com/cburch/logisim/circuit/WireBundle.java:    var ret = this;
src/main/java/com/cburch/logisim/circuit/WireBundle.java:    final var group = this.find();
src/main/java/com/cburch/logisim/circuit/WireBundle.java:    final var group2 = other.find();
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var dir = attrs.getValue(Wire.DIR_ATTR);
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var len = attrs.getValue(Wire.LEN_ATTR);
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var dir = attrs.getValue(Wire.DIR_ATTR);
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var len = attrs.getValue(Wire.LEN_ATTR);
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var dir = attrs.getValue(Wire.DIR_ATTR);
src/main/java/com/cburch/logisim/circuit/WireFactory.java:    final var len = attrs.getValue(Wire.LEN_ATTR);
src/main/java/com/cburch/logisim/circuit/WireIterator.java:    final var offX = (destX - curX) % 10;
src/main/java/com/cburch/logisim/circuit/WireIterator.java:    final var offY = (destY - curY) % 10;
src/main/java/com/cburch/logisim/circuit/WireIterator.java:    final var ret = Location.create(curX, curY, true);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      for (final var list : map.values()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      var set0 = map.get(a);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      var set1 = map.get(b);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:          final var temp = set0;
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var sets = new MergeSets();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var loc : circuit.wires.points.getSplitLocations()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var repl = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var mergeSet : sets.getMergeSets()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var locs = new ArrayList<Location>(2 * mergeSet.size());
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        for (final var w : mergeSet) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var e0 = locs.get(0);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var e1 = locs.get(locs.size() - 1);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var wnew = Wire.create(e0, e1);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        for (final var w : mergeSet) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var ends = new TreeSet<Location>();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var w : mergeSet) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var whole = Wire.create(ends.first(), ends.last());
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var mids = new TreeSet<Location>();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var loc : whole) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        for (final var comp : circuit.getComponents(loc)) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      for (final var e1 : mids) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      final var wRepl = new ArrayList<Component>(2);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      for (final var w2 : mergeResult) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var wirePoints = new HashMap<Location, ArrayList<Wire>>();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var w : circuit.getWires()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      for (final var loc : w) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var locWires = wirePoints.computeIfAbsent(loc, k -> new ArrayList<>(3));
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var mergeSets = new MergeSets();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var locWires : wirePoints.values()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:          final var w0 = locWires.get(i);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:          for (var j = i + 1; j < n; j++) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:            final var w1 = locWires.get(j);
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var replacements = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var splitLocs = circuit.wires.points.getSplitLocations();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var mergeSet : mergeSets.getMergeSets()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var splitLocs = circuit.wires.points.getSplitLocations();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    final var repl = new ReplacementMap();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:    for (final var w : circuit.getWires()) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      final var w0 = w.getEnd0();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      final var w1 = w.getEnd1();
src/main/java/com/cburch/logisim/circuit/WireRepair.java:      for (final var loc : splitLocs) {
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        var e0 = w0;
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        final var subs = new ArrayList<Wire>(splits.size());
src/main/java/com/cburch/logisim/circuit/WireRepair.java:        for (final var e1 : splits) {
src/main/java/com/cburch/logisim/circuit/WireSet.java:      for (final var wire : wires) {
src/main/java/com/cburch/logisim/circuit/WireThread.java:    var ret = this;
src/main/java/com/cburch/logisim/circuit/WireThread.java:    final var group = this.find();
src/main/java/com/cburch/logisim/circuit/WireThread.java:    final var group2 = other.find();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var center = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var end = center.translate(factingDirection, RADIUS + INDICATOR_LENGTH);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var bds = super.getBounds(RADIUS);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var center = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var end = center.translate(factingDirection, RADIUS + INDICATOR_LENGTH);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var c = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var end = c.translate(factingDirection, RADIUS + INDICATOR_LENGTH);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var location = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var x = location.getX();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var y = location.getY();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var e0 = location.translate(factingDirection, RADIUS);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var e1 = location.translate(factingDirection, RADIUS + INDICATOR_LENGTH);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var loc = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceAnchor.java:    final var ret = doc.createElement("circ-anchor");
src/main/java/com/cburch/logisim/circuit/appear/AppearanceElement.java:    final var dx = loc.getX() - location.getX();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceElement.java:    final var dy = loc.getY() - location.getY();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var r = isInput() ? INPUT_RADIUS : OUTPUT_RADIUS;
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var label = pin.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var p = pin;
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var location = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var x = location.getX();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var y = location.getY();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:      final var r = INPUT_RADIUS;
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:      final var r = OUTPUT_RADIUS;
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var loc = getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var pinLoc = pin.getLocation();
src/main/java/com/cburch/logisim/circuit/appear/AppearancePort.java:    final var ret = doc.createElement("circ-port");
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:    final var name = elt.getTagName();
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var loc = getLocation(elt, true);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var ret = new AppearanceAnchor(loc);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:        final var facing = Direction.parse(elt.getAttribute("facing"));
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var loc = getLocation(elt, true);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var pinStr = elt.getAttribute("pin").split(",");
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var pinLoc = Location.create(Integer.parseInt(pinStr[0].trim()), Integer.parseInt(pinStr[1].trim()), true);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:          final var isInputPin = ((Pin) pin.getPinInstance().getFactory()).isInputPin(pin.getPinInstance());
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:          final var isInputRef = isInputPinReference(elt);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var pathStr = elt.getAttribute("path");
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:        final var path = DynamicElement.Path.fromSvgString(pathStr, circuit);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:        final var x = (int) Double.parseDouble(elt.getAttribute("x").trim());
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:        final var y = (int) Double.parseDouble(elt.getAttribute("y").trim());
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:        final var shape = getDynamicElement(name, path, x, y);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var direction = elt.getAttribute("dir");
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:    final var width = Double.parseDouble(elt.getAttribute("width"));
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:    final var radius = (int) Math.round(width / 2.0);
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:    var px = 0;
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:    var py = 0;
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var x = Double.parseDouble(elt.getAttribute("x"));
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var y = Double.parseDouble(elt.getAttribute("y"));
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var w = Double.parseDouble(elt.getAttribute("width"));
src/main/java/com/cburch/logisim/circuit/appear/AppearanceSvgReader.java:      final var h = Double.parseDouble(elt.getAttribute("height"));
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var currentCustom = new ArrayList<>(getCustomObjectsFromBottom());
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var defaultCustom = new ArrayList<>(defaultCustomAppearance);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var shapeIterator = currentCustom.iterator();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var shape = shapeIterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var shape = shapeIterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var currentShape = shapeIterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      var deleteIt = false;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var shapeDefaultIterator = defaultCustom.iterator();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var defaultShape = shapeDefaultIterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var matches = currentShape.matches(defaultShape);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var anchor = findAnchor();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var anchorLoc = anchor.getLocation();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var anchor = findAnchor();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var event = new CircuitAppearanceEvent(circuit, affected);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var listener : listeners) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var loc = appEl.getLocation();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var anchor = findAnchor();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var defaultFacing = Direction.EAST;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var ports = new ArrayList<AppearancePort>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var shape : getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var ret = new TreeMap<Location, Instance>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var port : ports) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      var loc = port.getLocation();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var ret = new ArrayList<>(getObjectsFromBottom());
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var defaultFacing = getFacing();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var rotate = 0.0D;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var offset = findAnchorLocation();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var shape : getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var dup = g.create();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var staticAttrs = circuit.getStaticAttributes();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var shapes = DefaultAppearance.build(circuitPins.getPins(), getCircuitAppearance(),
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var toBeRemoved = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var toBeAdded = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var apearanceToBeRemoved = new ArrayList<AppearanceElement>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var apearanceToBeAdded = new ArrayList<AppearanceElement>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : getCustomObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : oldCustomAppearanceElements) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : apearanceToBeRemoved) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var iterator = apearanceToBeAdded.iterator();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:          final var item = iterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:            final var translates = new HashSet<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:            final var dx = newAnchor.getLocation().getX() - oldAnchor.getLocation().getX();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:            final var dy = newAnchor.getLocation().getY() - oldAnchor.getLocation().getY();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:            final var action = new ModelTranslateAction(this, translates, dx, dy);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : apearanceToBeRemoved) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:        final var iterator = apearanceToBeAdded.iterator();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:          final var item = iterator.next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:              final var translates = new HashSet<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:              final var dx = newPort.getLocation().getX() - oldPort.getLocation().getX();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:              final var dy = newPort.getLocation().getY() - oldPort.getLocation().getY();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:              final var action = new ModelTranslateAction(this, translates, dx, dy);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var toRemove = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (final var obj : super.getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var oldSuppress = suppressRecompute;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var oldSuppress = suppressRecompute;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var hasCustom = hasCustomAppearance();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    // final var shapes = new ArrayList<CanvasObject>(shapesBase);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var n = shapesBase.size();
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    final var shapes = new ArrayList<CanvasObject>(n);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    var ports = 0;
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (var i = n - 1; i >= 0; i--) { // count ports, move anchor to end
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var obj = shapes.get(i);
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:    for (var i = (n - ports - 1) - 1; i >= 0; i--) { // move ports to top
src/main/java/com/cburch/logisim/circuit/appear/CircuitAppearance.java:      final var obj = shapes.get(i);
src/main/java/com/cburch/logisim/circuit/appear/CircuitCustomAppearance.java:    final var ret = new ArrayList<>(getObjectsFromBottom());
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:      final var attr = e.getAttribute();
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:    final var adds = new HashSet<Instance>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:    final var removes = new HashSet<Instance>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:    final var replaces = new HashMap<Instance, Instance>();
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:    for (final var comp : repl.getAdditions()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:        final var in = Instance.getInstanceFor(comp);
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:        var added = pins.add(in);
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:    for (final var comp : repl.getRemovals()) {
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:        final var in = Instance.getInstanceFor(comp);
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:        final var removed = pins.remove(in);
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:          final var rs = repl.getReplacementsFor(comp);
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:            final var r = rs.iterator().next();
src/main/java/com/cburch/logisim/circuit/appear/CircuitPins.java:            final var rIn = Instance.getInstanceFor(r);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var edge = new HashMap<Direction, List<Instance>>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:      final var pinFacing = pin.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:      final var pinEdge = pinFacing.reverse();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:      final var e = edge.get(pinEdge);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    for (final var entry : edge.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var numNorth = edge.get(Direction.NORTH).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var numSouth = edge.get(Direction.SOUTH).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var numEast = edge.get(Direction.EAST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var numWest = edge.get(Direction.WEST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var maxVert = Math.max(numNorth, numSouth);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var maxHorz = Math.max(numEast, numWest);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var offsNorth = computeOffset(numNorth, numSouth, maxHorz);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var offsSouth = computeOffset(numSouth, numNorth, maxHorz);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var offsEast = computeOffset(numEast, numWest, maxVert);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var offsWest = computeOffset(numWest, numEast, maxVert);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var width = computeDimension(maxVert, maxHorz);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var height = computeDimension(maxHorz, maxVert);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var rX = Math.round((OFFS + ax) / 10) * 10;
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var rY = Math.round((OFFS + ay) / 10) * 10;
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var e0 = Location.create(rX + (width - 8) / 2, rY + 1, false);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var e1 = Location.create(rX + (width + 8) / 2, rY + 1, false);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var ct = Location.create(rX + width / 2, rY + 11, false);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var notch = new Curve(e0, e1, ct);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var rect = new Rectangle(rX, rY, width, height);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var ret = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    final var maxThis = Math.max(numFacing, numOpposite);
src/main/java/com/cburch/logisim/circuit/appear/DefaultClassicAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var edge = new HashMap<Direction, List<Instance>>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    var maxLeftLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    var maxRightLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:      for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:        final var label = new Text(0, 0, pin.getAttributeValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:        final var labelWidth = label.getText().length() * DrawAttr.FIXED_FONT_CHAR_WIDTH;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:        final var e = edge.get(pinEdge);
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    for (final var entry : edge.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var numEast = edge.get(Direction.EAST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var numWest = edge.get(Direction.WEST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var maxVert = Math.max(numEast, numWest);
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var textWidth = 25 * DrawAttr.FIXED_FONT_CHAR_WIDTH;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var width = (textWidth / 10) * 10 + 20;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var height = (maxVert > 0) ? maxVert * 10 + 10 : 10;
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var rx = OFFS + (9 - (ax + 9) % 10);
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var ry = OFFS + (9 - (ay + 9) % 10);
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var ret = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    final var rect = new Rectangle(rx, ry, width, height);
src/main/java/com/cburch/logisim/circuit/appear/DefaultCustomAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var edge = new HashMap<Direction, List<Instance>>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    var maxLeftLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    var maxRightLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var TitleWidth =
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:      for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var label = new Text(0, 0, pin.getAttributeValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var labelWidth = label.getText().length() * DrawAttr.FIXED_FONT_CHAR_WIDTH;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var e = edge.get(pinEdge);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    for (final var entry : edge.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var numEast = edge.get(Direction.EAST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var numWest = edge.get(Direction.WEST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var maxVert = Math.max(numEast, numWest);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var dy = ((DrawAttr.FIXED_FONT_HEIGHT + (DrawAttr.FIXED_FONT_HEIGHT >> 2) + 5) / 10) * 10;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var textWidth =
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var thight = ((DrawAttr.FIXED_FONT_HEIGHT + 10) / 10) * 10;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var width = (textWidth / 10) * 10 + 20;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var height = (maxVert > 0) ? maxVert * dy + thight : 10 + thight;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var sdy = (DrawAttr.FIXED_FONT_ASCENT - DrawAttr.FIXED_FONT_DESCENT) >> 1;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var rx = OFFS + (9 - (ax + 9) % 10);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var ry = OFFS + (9 - (ay + 9) % 10);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var ret = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    var rect = new Rectangle(rx + 10, ry + height - thight, width - 20, thight);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    var label = circuitName == null ? "VHDL Component" : circuitName;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var maxLength = 23;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var ellipsis = "...";
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var textLabel =
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    final var color = Color.DARK_GRAY;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:      final var offset =
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:      final var height =
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        var label = pin.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var maxLength = 12;
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var ellipsis = "...";
src/main/java/com/cburch/logisim/circuit/appear/DefaultEvolutionAppearance.java:        final var textLabel = new Text(x + ldX, y + ldy, label);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var label = new Text(0, 0, "a");
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var f = label.getLabel().getFont().deriveFont(fontsize);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var canvas = new Canvas();
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var fm = canvas.getFontMetrics(f);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var comment = new StringBuilder("//");
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var chars = new StringBuilder("    ");
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:          final var w = fm.stringWidth("" + c);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    var w = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    for (var i = 0; i < s.length(); i++) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var edge = new HashMap<Direction, List<Instance>>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    var maxLeftLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    var maxRightLabelLength = 0;
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var labelString = pin.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var labelWidth = textWidth(labelString);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var e = edge.get(pinEdge);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    for (final var entry : edge.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var numEast = edge.get(Direction.EAST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var numWest = edge.get(Direction.WEST).size();
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var maxHorz = Math.max(numEast, numWest);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var offsEast = computeOffset(numEast, numWest);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var offsWest = computeOffset(numWest, numEast);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    var width = 2 * LABEL_OUTSIDE + maxLeftLabelLength + maxRightLabelLength + LABEL_GAP;
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    var height = PORT_GAP * maxHorz + TOP_MARGIN + BOTTOM_MARGIN;
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var rect = new Rectangle(rx, ry, width, height);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var ret = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:      final var label = new Text(rx + width / 2, ry + TOP_TEXT_MARGIN, name);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    final var color = Color.DARK_GRAY; // maybe GRAY instead?
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:    for (final var pin : pins) {
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:        final var text = pin.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:          final var label = new Text(x + ldx, y, text);
src/main/java/com/cburch/logisim/circuit/appear/DefaultHolyCrossAppearance.java:          final var pinFont = label.getLabel().getFont().deriveFont((float) 10);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      for (final var ic : elt) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      final var s = new StringBuilder();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      for (final var instanceComponent : elt) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var loc = instanceComponent.getLocation();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      final var parts = s.substring(1).split("(?<!\\\\)/");
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      final var elt = new InstanceComponent[parts.length];
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      for (var i = 0; i < parts.length; i++) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var ss = parts[i];
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var p = ss.lastIndexOf("(");
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var c = ss.lastIndexOf(",");
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var e = ss.lastIndexOf(")");
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var x = Integer.parseInt(ss.substring(p + 1, c).trim());
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var y = Integer.parseInt(ss.substring(c + 1, e).trim());
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var loc = Location.create(x, y, false);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var name = unescape(ss.substring(0, p));
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        var circ = circuit;
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:        final var ic = find(circ, loc, name);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      for (final var c : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var x0 = bounds.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var y0 = bounds.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var x1 = x0 + bounds.getWidth();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var y1 = y0 + bounds.getHeight();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var obj = state.getData(path.elt[0]);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    for (var i = 1; i < path.elt.length && obj != null; i++) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var obj = state.getData(path.elt[0]);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var comp = path.elt[0];
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    for (var i = 1; i < path.elt.length && obj != null; i++) {
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var label = path.leaf().getInstance().getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:      final var loc = elt.getAttribute("label").trim().toLowerCase();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var label = path.leaf().getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var x = bounds.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var y = bounds.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var w = bounds.getWidth();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    final var h = bounds.getHeight();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var vAlign = GraphicsUtil.V_CENTER;
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var hAlign = GraphicsUtil.H_CENTER;
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var pX = x + w / 2;
src/main/java/com/cburch/logisim/circuit/appear/DynamicElement.java:    var pY = y + h / 2;
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementProvider.java:    final var allAffected = new HashSet<Circuit>();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementProvider.java:    final var todo = new LinkedList<Circuit>();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementProvider.java:      final var circ = todo.remove();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementProvider.java:      for (final var other : circ.getCircuitsUsingThis())
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementProvider.java:    for (final var circ : allAffected)
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:    final var dir = state.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:    final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posX = bounds.getX() - anchorPosition.getX() + loc.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posY = bounds.getY() - anchorPosition.getY() + loc.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posX = anchorPosition.getX() - bounds.getX() - bounds.getWidth() + loc.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posY = anchorPosition.getY() - bounds.getY() - bounds.getHeight() + loc.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posX = bounds.getY() - anchorPosition.getY() + loc.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:      final var posY = bounds.getX() - anchorPosition.getX() - bounds.getWidth() + loc.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:    final var posX = anchorPosition.getY() - bounds.getY() - bounds.getHeight() + loc.getX();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:    final var posY = bounds.getX() - anchorPosition.getX() + loc.getY();
src/main/java/com/cburch/logisim/circuit/appear/DynamicElementWithPoker.java:    final var b = getScreenBounds(state);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var usedLocs = new HashSet<Location>();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var sameWay = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var facing = pin.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    for (final var entry : others.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      final var pin2 = entry.getKey();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      final var loc = entry.getValue().getLocation();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      var isFirst = false;
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      for (final var p : sameWay) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      var loc = others.get(neighbor).getLocation();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var bds = appear.getAbsoluteBounds();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    var loc = Location.create(x, y, true);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var oldObjects = new HashMap<Instance, AppearancePort>();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    for (final var obj : appearance.getCustomObjectsFromBottom()) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      for (final var obj : DefaultCustomAppearance.build(allPins)) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      final var dest = appearance.getCustomObjectsFromBottom().size();
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var portRemoves = new ArrayList<AppearancePort>(removes.size());
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var portAdds = new ArrayList<AppearancePort>(adds.size());
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    for (final var pin : removes) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      final var port = oldObjects.remove(pin);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    final var addsCopy = new ArrayList<>(adds);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    for (final var entry : replaces.entrySet()) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:      final var port = oldObjects.remove(entry.getKey());
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:    for (final var pin : addsCopy) {
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:        final var loc = computeDefaultLocation(appearance, pin, oldObjects);
src/main/java/com/cburch/logisim/circuit/appear/PortManager.java:        final var o = new AppearancePort(loc, pin);
src/main/java/com/cburch/logisim/comp/AbstractComponent.java:    final var bds = getBounds();
src/main/java/com/cburch/logisim/comp/AbstractComponent.java:    final var bds = getBounds(g);
src/main/java/com/cburch/logisim/comp/AbstractComponent.java:    for (final var data : getEnds()) {
src/main/java/com/cburch/logisim/comp/AbstractComponentFactory.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/comp/AbstractComponentFactory.java:    final var bds = getOffsetBounds(attrs);
src/main/java/com/cburch/logisim/comp/AbstractComponentFactory.java:    var dfltSet = defaultSet;
src/main/java/com/cburch/logisim/comp/AbstractComponentFactory.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/comp/AbstractComponentFactory.java:      for (var i = 0; i < 3; i++) {
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var bds = comp.getBounds();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var curColor = g.getColor();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var e = comp.getEnd(i);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var pt = e.getLocation();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var x = pt.getX();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var y = pt.getY();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var CLK_SZ = 4;
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var CLK_SZD = CLK_SZ - 1;
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var b = comp.getBounds(g);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var left = b.getX();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var right = left + b.getWidth();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var top = b.getY();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var bot = top + b.getHeight();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var e = comp.getEnd(i);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var pt = e.getLocation();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var curColor = g.getColor();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var curColor = g.getColor();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var e = comp.getEnd(i);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var pt = e.getLocation();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var curColor = g.getColor();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    for (final var e : comp.getEnds()) {
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:      final var pt = e.getLocation();
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var bds = comp.getBounds(g);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:    final var bds = source.getOffsetBounds(attrs);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:      final var fm = base.getFontMetrics(g.getFont());
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:      final var lwid = fm.stringWidth(label);
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:      final var fm = base.getFontMetrics(g.getFont());
src/main/java/com/cburch/logisim/comp/ComponentDrawContext.java:      final var lwid = fm.stringWidth(label);
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (final var end : ends) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var bds = getBounds();
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var dest = context.getDestination();
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:      final var loc = getLocation();
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:      final var offBounds = getFactory().getOffsetBounds(getAttributeSet());
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:      final var old = ends.get(i);
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var oldEnds = ends;
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var minLen = Math.min(oldEnds.size(), newEnds.length);
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var changesOld = new ArrayList<EndData>();
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    final var changesNew = new ArrayList<EndData>();
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (var i = 0; i < minLen; i++) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:      final var old = oldEnds.get(i);
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (var i = oldEnds.size() - 1; i >= minLen; i--) {
src/main/java/com/cburch/logisim/comp/ManagedComponent.java:    for (var i = minLen; i < newEnds.length; i++) {
src/main/java/com/cburch/logisim/comp/PositionComparator.java:    final var l1 = o1.getLocation();
src/main/java/com/cburch/logisim/comp/PositionComparator.java:    final var l2 = o2.getLocation();
src/main/java/com/cburch/logisim/comp/TextField.java:    final var old = g.getFont();
src/main/java/com/cburch/logisim/comp/TextField.java:    var x = this.x;
src/main/java/com/cburch/logisim/comp/TextField.java:    var y = this.y;
src/main/java/com/cburch/logisim/comp/TextField.java:    final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/comp/TextField.java:    final var width = fm.stringWidth(text);
src/main/java/com/cburch/logisim/comp/TextField.java:    final var ascent = fm.getAscent();
src/main/java/com/cburch/logisim/comp/TextField.java:    final var descent = fm.getDescent();
src/main/java/com/cburch/logisim/comp/TextField.java:    for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/comp/TextField.java:    var x = this.x;
src/main/java/com/cburch/logisim/comp/TextField.java:    var y = this.y;
src/main/java/com/cburch/logisim/comp/TextField.java:    final var fm = (font == null) ? g.getFontMetrics() : g.getFontMetrics(font);
src/main/java/com/cburch/logisim/comp/TextField.java:    final var width = fm.stringWidth(text);
src/main/java/com/cburch/logisim/comp/TextField.java:    final var ascent = fm.getAscent();
src/main/java/com/cburch/logisim/comp/TextField.java:    final var descent = fm.getDescent();
src/main/java/com/cburch/logisim/comp/TextField.java:      final var e = new TextFieldEvent(this, this.text, text);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var e = new CaretEvent(this, oldText, oldText);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var x = field.getX();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var y = field.getY();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var halign = field.getHAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var valign = field.getVAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var box = getBounds(g);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:      final var p = GraphicsUtil.getTextCursor(g, curText, x, y, Math.min(pos, end), halign, valign);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:      final var e = GraphicsUtil.getTextCursor(g, curText, x, y, Math.max(pos, end), halign, valign);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:      final var p = GraphicsUtil.getTextCursor(g, curText, x, y, pos, halign, valign);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var x = field.getX();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var y = field.getY();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var halign = field.getHAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var valign = field.getVAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var font = field.getFont();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var bds = Bounds.create(GraphicsUtil.getTextBounds(g, font, curText, x, y, halign, valign));
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var ign = InputEvent.ALT_DOWN_MASK | InputEvent.META_DOWN_MASK;
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var shift = ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var ctrl = ((e.getModifiersEx() & InputEvent.CTRL_DOWN_MASK) != 0);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    var cut = false;
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          final var pp = (Math.min(pos, end));
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          final var ee = (Math.max(pos, end));
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          final var s = curText.substring(pp, ee);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          final var sel = new StringSelection(s);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          var lastWasSpace = false;
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:          for (var i = 0; i < s.length(); i++) {
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:            var c = s.charAt(i);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var ign = InputEvent.ALT_DOWN_MASK | InputEvent.CTRL_DOWN_MASK | InputEvent.META_DOWN_MASK;
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var c = e.getKeyChar();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var halign = field.getHAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var valign = field.getVAlign();
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    final var e = new CaretEvent(this, oldText, curText);
src/main/java/com/cburch/logisim/comp/TextFieldCaret.java:    for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/data/AbstractAttributeSet.java:      final var event = new AttributeEvent(this);
src/main/java/com/cburch/logisim/data/AbstractAttributeSet.java:      for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/data/AbstractAttributeSet.java:      final var event = new AttributeEvent(this, attr, value, oldvalue);
src/main/java/com/cburch/logisim/data/AbstractAttributeSet.java:      final var ls = new ArrayList<>(listeners);
src/main/java/com/cburch/logisim/data/AbstractAttributeSet.java:      for (final var l : ls) {
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var dest = (FixedSet) destSet;
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var dest = (SingletonSet) destSet;
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/AttributeSets.java:      final var index = attrs.indexOf(attr);
src/main/java/com/cburch/logisim/data/Attributes.java:      final var init = (value == null) ? Color.WHITE : value;
src/main/java/com/cburch/logisim/data/Attributes.java:      final var ret = "#" + hex(c.getRed()) + hex(c.getGreen()) + hex(c.getBlue());
src/main/java/com/cburch/logisim/data/Attributes.java:      final var val = value;
src/main/java/com/cburch/logisim/data/Attributes.java:        final var combo = new ComboBox<>(options);
src/main/java/com/cburch/logisim/data/Attributes.java:      final var combo = new ComboBox<>(vals);
src/main/java/com/cburch/logisim/data/Attributes.java:      final var ret =
src/main/java/com/cburch/logisim/data/BitWidth.java:      final var combo = new ComboBox<>(choices);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var hashCode = 13 * (31 * (31 * x + y) + wid) + ht;
src/main/java/com/cburch/logisim/data/Bounds.java:      final var bds = (Bounds) cached;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var ret = new Bounds(x, y, wid, ht);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retX = Math.min(bd.x, this.x);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retY = Math.min(bd.y, this.y);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retWidth = Math.max(bd.x + bd.wid, this.x + this.wid) - retX;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retHeight = Math.max(bd.y + bd.ht, this.y + this.ht) - retY;
src/main/java/com/cburch/logisim/data/Bounds.java:    var newX = this.x;
src/main/java/com/cburch/logisim/data/Bounds.java:    var newWidth = this.wid;
src/main/java/com/cburch/logisim/data/Bounds.java:    var newY = this.y;
src/main/java/com/cburch/logisim/data/Bounds.java:    var newHeight = this.ht;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retX = Math.min(x, this.x);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retY = Math.min(y, this.y);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retWidth = Math.max(x + wid, this.x + this.wid) - retX;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var retHeight = Math.max(y + ht, this.y + this.ht) - retY;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var x1 = x + wid - 1;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var y1 = y + ht - 1;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var othX = (wid <= 0 ? x : x + wid - 1);
src/main/java/com/cburch/logisim/data/Bounds.java:    final var othY = (ht <= 0 ? y : y + ht - 1);
src/main/java/com/cburch/logisim/data/Bounds.java:    var x0 = this.x;
src/main/java/com/cburch/logisim/data/Bounds.java:    var y0 = this.y;
src/main/java/com/cburch/logisim/data/Bounds.java:    var x1 = x0 + this.wid;
src/main/java/com/cburch/logisim/data/Bounds.java:    var y1 = y0 + this.ht;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var x2 = other.x;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var y2 = other.y;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var x3 = x2 + other.wid;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var y3 = y2 + other.ht;
src/main/java/com/cburch/logisim/data/Bounds.java:    var degrees = to.toDegrees() - from.toDegrees();
src/main/java/com/cburch/logisim/data/Bounds.java:    final var dx = x - xc;
src/main/java/com/cburch/logisim/data/Bounds.java:    final var dy = y - yc;
src/main/java/com/cburch/logisim/data/FailException.java:    final var ret = new ArrayList<FailException>();
src/main/java/com/cburch/logisim/data/Location.java:    final var xRounded = hasToSnap ? Math.round(x / 5) * 5 : x;
src/main/java/com/cburch/logisim/data/Location.java:    final var yRounded = hasToSnap ? Math.round(y / 5) * 5 : y;
src/main/java/com/cburch/logisim/data/Location.java:    final var hashCode = 31 * xRounded + yRounded;
src/main/java/com/cburch/logisim/data/Location.java:    final var ret = cache.get(hashCode);
src/main/java/com/cburch/logisim/data/Location.java:      final var loc = (Location) ret;
src/main/java/com/cburch/logisim/data/Location.java:    final var loc = new Location(hashCode, xRounded, yRounded, hasToSnap);
src/main/java/com/cburch/logisim/data/Location.java:    final var base = value;
src/main/java/com/cburch/logisim/data/Location.java:      final var len = value.length();
src/main/java/com/cburch/logisim/data/Location.java:    var comma = value.indexOf(',');
src/main/java/com/cburch/logisim/data/Location.java:    final var x = Integer.parseInt(value.substring(0, comma).trim());
src/main/java/com/cburch/logisim/data/Location.java:    final var y = Integer.parseInt(value.substring(comma + 1).trim());
src/main/java/com/cburch/logisim/data/Location.java:    var degrees = to.toDegrees() - from.toDegrees();
src/main/java/com/cburch/logisim/data/Location.java:    final var dx = x - xc;
src/main/java/com/cburch/logisim/data/Location.java:    final var dy = y - yc;
src/main/java/com/cburch/logisim/data/Location.java:      final var aloc = a.getLocation();
src/main/java/com/cburch/logisim/data/Location.java:      final var bloc = b.getLocation();
src/main/java/com/cburch/logisim/data/Location.java:      final var aloc = a.getLocation();
src/main/java/com/cburch/logisim/data/Location.java:      final var bloc = b.getLocation();
src/main/java/com/cburch/logisim/data/TestVector.java:      var line = in.readLine();
src/main/java/com/cburch/logisim/data/TestVector.java:        final var i = line.indexOf('#');
src/main/java/com/cburch/logisim/data/TestVector.java:        final var ret = new StringTokenizer(line);
src/main/java/com/cburch/logisim/data/TestVector.java:      final var vals = new Value[columnName.length];
src/main/java/com/cburch/logisim/data/TestVector.java:      for (var i = 0; i < columnName.length; i++) {
src/main/java/com/cburch/logisim/data/TestVector.java:        final var t = curLine.nextToken();
src/main/java/com/cburch/logisim/data/TestVector.java:      final var n = curLine.countTokens();
src/main/java/com/cburch/logisim/data/TestVector.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/data/TestVector.java:        final var t = (String) curLine.nextElement();
src/main/java/com/cburch/logisim/data/TestVector.java:          final var e = t.indexOf(']');
src/main/java/com/cburch/logisim/data/TestVector.java:          var w = 0;
src/main/java/com/cburch/logisim/data/TestVector.java:    try (final var in = new BufferedReader(new FileReader(src))) {
src/main/java/com/cburch/logisim/data/TestVector.java:      final var r = new TestVectorReader(in);
src/main/java/com/cburch/logisim/data/Value.java:      final var mask = (width == 64 ? -1L : ~(-1L << width));
src/main/java/com/cburch/logisim/data/Value.java:      var hashCode = width;
src/main/java/com/cburch/logisim/data/Value.java:      final var ret = new Value(width, error, unknown, value);
src/main/java/com/cburch/logisim/data/Value.java:    final var width = values.length;
src/main/java/com/cburch/logisim/data/Value.java:    for (var i = 0; i < values.length; i++) {
src/main/java/com/cburch/logisim/data/Value.java:    final var radix = radixOfLogString(width, t);
src/main/java/com/cburch/logisim/data/Value.java:    for (var i = offset; i < n; i++) {
src/main/java/com/cburch/logisim/data/Value.java:      final var c = t.charAt(i);
src/main/java/com/cburch/logisim/data/Value.java:      final var ret = new Value[bits];
src/main/java/com/cburch/logisim/data/Value.java:    final var ret = new Value[width];
src/main/java/com/cburch/logisim/data/Value.java:    for (var i = 0; i < ret.length; i++) {
src/main/java/com/cburch/logisim/data/Value.java:    var ret = width;
src/main/java/com/cburch/logisim/data/Value.java:        final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/data/Value.java:        final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/data/Value.java:        for (var i = width - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/data/Value.java:      final var vals = getAll();
src/main/java/com/cburch/logisim/data/Value.java:      final var c = new char[(vals.length + 3) / 4];
src/main/java/com/cburch/logisim/data/Value.java:      for (var i = 0; i < c.length; i++) {
src/main/java/com/cburch/logisim/data/Value.java:        final var k = c.length - 1 - i;
src/main/java/com/cburch/logisim/data/Value.java:        final var frst = 4 * k;
src/main/java/com/cburch/logisim/data/Value.java:        final var last = Math.min(vals.length, 4 * (k + 1));
src/main/java/com/cburch/logisim/data/Value.java:        var v = 0;
src/main/java/com/cburch/logisim/data/Value.java:        for (var j = last - 1; j >= frst; j--) {
src/main/java/com/cburch/logisim/data/Value.java:      final var vals = getAll();
src/main/java/com/cburch/logisim/data/Value.java:      final var c = new char[(vals.length + 2) / 3];
src/main/java/com/cburch/logisim/data/Value.java:      for (var i = 0; i < c.length; i++) {
src/main/java/com/cburch/logisim/data/Value.java:        final var k = c.length - 1 - i;
src/main/java/com/cburch/logisim/data/Value.java:        final var frst = 3 * k;
src/main/java/com/cburch/logisim/data/Value.java:        final var last = Math.min(vals.length, 3 * (k + 1));
src/main/java/com/cburch/logisim/data/Value.java:        var v = 0;
src/main/java/com/cburch/logisim/data/Value.java:        for (var j = last - 1; j >= frst; j--) {
src/main/java/com/cburch/logisim/data/Value.java:        final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/data/Value.java:        for (var i = width - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var include = new HashSet<>(file.getCircuits());
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var countMap = new HashMap<Circuit, Map<ComponentFactory, Count>>();
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var countList = sortCounts(countMap.get(circuit), file);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var counts = doSimpleCount(circuit);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var count : counts.values()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var sub : include) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var subFactory = sub.getSubcircuitFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:        final var multiplier = counts.get(subFactory).simpleCount;
src/main/java/com/cburch/logisim/file/FileStatistics.java:        final var subCountRecursive = doRecursiveCount(sub, include, countMap);
src/main/java/com/cburch/logisim/file/FileStatistics.java:        for (final var subCount : subCountRecursive.values()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:          final var subfactory = subCount.factory;
src/main/java/com/cburch/logisim/file/FileStatistics.java:          var superCount = counts.get(subfactory);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var counts = new HashMap<ComponentFactory, Count>();
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:      var count = counts.get(factory);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var count : counts.values()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var factory = count.getFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:      var unique = 0;
src/main/java/com/cburch/logisim/file/FileStatistics.java:      for (final var circ : circuitCounts.keySet()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:        final var subcount = circuitCounts.get(circ).get(factory);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var ret = new Count(null);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var count : counts) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var factory = count.getFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:    final var ret = new ArrayList<Count>();
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var tool : file.getTools()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var factory = tool.getFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:      final var count = counts.get(factory);
src/main/java/com/cburch/logisim/file/FileStatistics.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:      for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/file/FileStatistics.java:          final var factory = addTool.getFactory();
src/main/java/com/cburch/logisim/file/FileStatistics.java:          final var count = counts.get(factory);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var currentDirectory = loader.getCurrentDirectory();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    var fileName = file.toString();
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var currentParts = currentDirectory.toString().split(Pattern.quote(File.separator));
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var newParts = fileName.split(Pattern.quote(File.separator));
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var nrOfNewParts = newParts.length;
src/main/java/com/cburch/logisim/file/LibraryManager.java:      var nrOfPartsEqual = 0;
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var nrOfLevelsToGoDown = currentParts.length - nrOfPartsEqual;
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var relativeFile = new StringBuilder();
src/main/java/com/cburch/logisim/file/LibraryManager.java:      for (var restingPartId = nrOfPartsEqual; restingPartId < nrOfNewParts; restingPartId++) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var old = findKnown(oldFile);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var lib = findKnown(dest);
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var clone = file.cloneLogisimFile(loader);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var retLibRef = fileMap.get(key);
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var retLib = retLibRef.get();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var desc = invMap.get(lib);
src/main/java/com/cburch/logisim/file/LibraryManager.java:          final var ret = findReference(loadedProj, query);
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var desc = invMap.get(lib);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var ret = new ArrayList<LogisimFile>();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var lib : invMap.keySet()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var jarDescriptor = new JarDescriptor(toRead, className);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    var ret = findKnown(jarDescriptor);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var buildinNames = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var lib : loader.getBuiltin().getLibraries()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var sep = desc.indexOf(DESC_SEP);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var type = desc.substring(0, sep);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var name = desc.substring(sep + 1);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var ret = loader.getBuiltin().getLibrary(name);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var toRead = loader.getFileFor(name, Loader.LOGISIM_FILTER);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var sepLoc = name.lastIndexOf(DESC_SEP);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var fileName = name.substring(0, sepLoc);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var className = name.substring(sepLoc + 1);
src/main/java/com/cburch/logisim/file/LibraryManager.java:        final var toRead = loader.getFileFor(fileName, Loader.JAR_FILTER);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var sep = desc.indexOf(DESC_SEP);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var type = desc.substring(0, sep);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var name = desc.substring(sep + 1);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var sep = desc.indexOf(DESC_SEP);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var type = desc.substring(0, sep);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var name = desc.substring(sep + 1);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    var ret = findKnown(toRead);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var desc = new LogisimProjectDescriptor(toRead);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var descriptor = invMap.get(lib);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var lib = findKnown(file);
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var toBeRemoved = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var library : logiLib.getLibraries()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:      var isUsed = false;
src/main/java/com/cburch/logisim/file/LibraryManager.java:      for (final var circ : logiLib.getCircuits()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:        for (final var tool : circ.getNonWires()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var remove : toBeRemoved) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var result = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LibraryManager.java:    for (final var lib : library.getLibraries()) {
src/main/java/com/cburch/logisim/file/LibraryManager.java:    final var libIterator = library.getLibraries().iterator();
src/main/java/com/cburch/logisim/file/LibraryManager.java:      final var lib = libIterator.next();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    final var dest = factory.createAttributeSet();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      final var xn = new CircuitMutation(circuit);
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      for (final var comp : toReplace) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:        final var factory = compMap.get(comp.getFactory());
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:          final var newAttrs = createAttributes(factory, comp.getAttributeSet());
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var circuit : file.getCircuits()) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var proj : Projects.getOpenProjects()) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      final var oldTool = proj.getTool();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      final var oldCircuit = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      final var oldFactory = oldCircuit.getSubcircuitFactory();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:        final var newFactory = (SubcircuitFactory) compMap.get(oldFactory);
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var file : LibraryManager.instance.getLogisimLibraries()) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    final var changes = new HashSet<>(old.getLibraries());
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var lib : changes) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var lib : changes) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    final var componentMap = new HashMap<ComponentFactory, ComponentFactory>();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    final var toolMap = new HashMap<Tool, Tool>();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    for (final var oldTool : old.getTools()) {
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:      final var newTool = base.getTool(oldTool.getName());
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:        final var oldFactory = tool.getFactory();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:          final var newFactory = tool.getFactory();
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    var toolChanges = new HashSet<Tool>(old.getTools());
src/main/java/com/cburch/logisim/file/LoadedLibrary.java:    final var old = base;
src/main/java/com/cburch/logisim/file/Loader.java:    final var dir = base.getParentFile();
src/main/java/com/cburch/logisim/file/Loader.java:    var name = base.getName();
src/main/java/com/cburch/logisim/file/Loader.java:    for (var i = 1; i <= 20; i++) {
src/main/java/com/cburch/logisim/file/Loader.java:      final var ext = i == 1 ? ".bak" : (".bak" + i);
src/main/java/com/cburch/logisim/file/Loader.java:      final var candidate = new File(dir, name + ext);
src/main/java/com/cburch/logisim/file/Loader.java:    final var ref = (!filesOpening.empty()) ? filesOpening.peek() : mainFile;
src/main/java/com/cburch/logisim/file/Loader.java:    var file = new File(name);
src/main/java/com/cburch/logisim/file/Loader.java:      final var currentDirectory = getCurrentDirectory();
src/main/java/com/cburch/logisim/file/Loader.java:      final var chooser = createChooser();
src/main/java/com/cburch/logisim/file/Loader.java:    final var ret = substitutions.get(source);
src/main/java/com/cburch/logisim/file/Loader.java:    final var actual = getSubstitution(request);
src/main/java/com/cburch/logisim/file/Loader.java:    final var loader = new ZipClassLoader(actual);
src/main/java/com/cburch/logisim/file/Loader.java:    final var actual = getSubstitution(file);
src/main/java/com/cburch/logisim/file/Loader.java:    final var actual = getSubstitution(request);
src/main/java/com/cburch/logisim/file/Loader.java:    for (final var fileOpening : filesOpening) {
src/main/java/com/cburch/logisim/file/Loader.java:    final var actual = getSubstitution(file);
src/main/java/com/cburch/logisim/file/Loader.java:    final var ret = LibraryManager.instance.loadLogisimLibrary(this, actual);
src/main/java/com/cburch/logisim/file/Loader.java:      final var ret = loadLogisimFile(file);
src/main/java/com/cburch/logisim/file/Loader.java:      final var mainCircFile =
src/main/java/com/cburch/logisim/file/Loader.java:      final var libraryHome =
src/main/java/com/cburch/logisim/file/Loader.java:      final var fwrite = new FileOutputStream(mainCircFile);
src/main/java/com/cburch/logisim/file/Loader.java:    final var reference = LibraryManager.instance.findReference(file, dest);
src/main/java/com/cburch/logisim/file/Loader.java:    final var backup = determineBackupName(dest);
src/main/java/com/cburch/logisim/file/Loader.java:    final var backupCreated = (backup != null) && dest.renameTo(backup);
src/main/java/com/cburch/logisim/file/Loader.java:    final var oldFile = getMainFile();
src/main/java/com/cburch/logisim/file/Loader.java:      final var top = filesOpening.peek();
src/main/java/com/cburch/logisim/file/Loader.java:      final var init = toProjectName(top) + ":";
src/main/java/com/cburch/logisim/file/Loader.java:      final var sep = description.contains("\n") ? "\n" : " ";
src/main/java/com/cburch/logisim/file/Loader.java:      var lines = 1;
src/main/java/com/cburch/logisim/file/Loader.java:      for (var pos = description.indexOf('\n');
src/main/java/com/cburch/logisim/file/Loader.java:      final var textArea = new JTextArea(lines, 60);
src/main/java/com/cburch/logisim/file/Loader.java:      final var scrollPane = new JScrollPane(textArea);
src/main/java/com/cburch/logisim/file/Loader.java:    var message = source.getMessage();
src/main/java/com/cburch/logisim/file/Loader.java:    final var ret = file.getName();
src/main/java/com/cburch/logisim/file/Loader.java:    final var chooser = createChooser();
src/main/java/com/cburch/logisim/file/Loader.java:    final var returnVal = chooser.showOpenDialog(window);
src/main/java/com/cburch/logisim/file/Loader.java:    final var selected = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/file/LogisimFile.java:      for (var i = 2; true; i++) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var act = event.getAction();
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var oldname = (String) event.getData();
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var newname = event.getCircuit().getName();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var mylib : getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var mytool : this.getCircuits()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var mylib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var mytool : lib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var ret = new LogisimFile(loader);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var first = new byte[512];
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (var i = 0; i < lineBreak; i++) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var inputStream = new FileInputStream(file);
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var readerInputStream = new ReaderInputStream(new FileReader(file), "UTF8");
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var inBuffered = new BufferedInputStream(in);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var firstLine = getFirstLine(inBuffered);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var xmlReader = new XmlReader(loader, file);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var ret = xmlReader.readLibrary(inBuffered, null);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var tool = new AddTool(circuit.getSubcircuitFactory());
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var tool = new AddTool(new VhdlEntity(content));
src/main/java/com/cburch/logisim/file/LogisimFile.java:      for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:          final var atrs = addTool.getAttributeSet();
src/main/java/com/cburch/logisim/file/LogisimFile.java:          for (final var attr : atrs.getAttributes()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var reader = new PipedInputStream();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var writer = new PipedOutputStream();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var lib : getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var ret = findTool(lib, query);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var e = new LibraryEvent(this, action, data);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var ret = new ArrayList<Circuit>(tools.size());
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (var i = 0; i < tools.size(); i++) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var tool = tools.get(i);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var ret = new ArrayList<VhdlContent>(tools.size());
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (var i = 0; i < tools.size(); i++) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var tool = tools.get(i);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var factories = new HashSet<ComponentFactory>();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var circuit : getCircuits()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:      for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var tb = options.getToolbarData();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var mm = options.getMouseMappings();
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var t : lib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFile.java:    final var index = indexOfVhdl(vhdl);
src/main/java/com/cburch/logisim/file/LogisimFile.java:    for (final var lib : libraries)
src/main/java/com/cburch/logisim/file/LogisimFile.java:      final var msg = e.getMessage();
src/main/java/com/cburch/logisim/file/LogisimFile.java:      var err = S.get("xmlConversionError");
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var libNames = new HashMap<String, Library>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var toolList = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var errors = new HashMap<String, String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      var canContinue = true;
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : source.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var lib : mergelib.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var newToolList = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var ret = LibraryTools.libraryCanBeMerged(toolList, newToolList);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var Location = "";
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var toolNames = LibraryTools.getToolLocation(source, Location, ret);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            for (final var key : toolNames.keySet()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              var solStr = S.get("LibMergeFailure2") + " a) ";
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var errLoc = toolNames.get(key);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var errParts = errLoc.split("->");
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var splits = mergelib.getLoader().getDescriptor(lib).split("#");
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var theFile = mergelib.getLoader().getFileFor(splits[1], null);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var circ : mergelib.getCircuits()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var circName = circ.getName().toUpperCase();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var ret = new ArrayList<String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var toolNames = LibraryTools.getToolLocation(source, "", ret);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            for (final var key : toolNames.keySet()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var errLoc = toolNames.get(key);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var errParts = errLoc.split("->");
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:                var solStr = S.get("LibMergeFailure2") + " a) ";
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var circ1 = LibraryTools.getCircuitFromLibs(source, circName);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:                final var Reponse =
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var origComps = new HashMap<Location, Component>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var newComps = new HashMap<Location, Component>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var comp : orig.getWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var comp : orig.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var comp : newone.getWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var comp : newone.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var it = newComps.keySet().iterator();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var loc = it.next();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var comp1 = newComps.get(loc);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var comp2 = newComps.get(loc);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var wire1 = (Wire) comp1;
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var wire2 = (Wire) comp2;
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var jarLib : jarLibs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        try (final var jarFile = new JarFile(jarLib)) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var manifest = jarFile.getManifest();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var lib = loader.loadJarLibrary(jarLib, className);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var logiLib : logiLibs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var put = loader.loadLogisimLibrary(logiLib);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var circ : mergedCircuits) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        var replace = false;
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var circs : proj.getLogisimFile().getCircuits()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var result = new CircuitMutation(newCircuit);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var comp : circ.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var wir : circ.getWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var availableTools = new HashMap<String, AddTool>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var circ : mergedCircuits) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var newCirc = proj.getLogisimFile().getCircuit(circ.getName());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var result = new CircuitMutation(newCirc);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          for (final var comp : circ.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var current = availableTools.get(comp.getFactory().getName().toUpperCase());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:                final var factory = current.getFactory();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:                  final var newAttrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var circ : mergedCircuits) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var newCirc = proj.getLogisimFile().getCircuit(circ.getName());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var libNames = new HashMap<String, Library>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var toolList = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var errors = new HashMap<String, String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var newLib : libs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var builtinLibraries = LibraryManager.getBuildinNames(source.getLoader());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : source.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var libName = lib.getName();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var newLib : libs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : source.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : libs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var addedToolList = new HashSet<String>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            for (final var tool : addedToolList)
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : baseLibsToEnable) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var logisimFile = proj.getLogisimFile();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : mergedLibs) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var availableTools = new HashMap<String, AddTool>();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var circ : thisLib.getCircuits()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          for (final var tool : circ.getNonWires()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:              final var current = availableTools.get(tool.getFactory().getName().toUpperCase());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:                final var newComp = Text.FACTORY.createComponent(tool.getLocation(), (AttributeSet) tool.getAttributeSet().clone());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var libs : lib.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : mergedLibs) proj.getLogisimFile().removeLibrary(lib);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : baseLibsToEnable) proj.getLogisimFile().removeLibrary(lib);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var ret = new MoveCircuit(tool, ((MoveCircuit) other).toIndex);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var srcTool : srcLib.getTools()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var srcAttrs = srcTool.getAttributeSet();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        final var dstTool = dstLib.getTool(srcTool.getName());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var dstAttrs = dstTool.getAttributeSet();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var attr = (Attribute<Object>) attrBase;
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var srcValue = srcAttrs.getValue(attr);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:            final var dstValue = dstAttrs.getValue(attr);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var src = ProjectActions.createNewFile(proj);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var dst = proj.getLogisimFile();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var srcLib : src.getLibraries()) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        var dstLib = dst.getLibrary(srcLib.getName());
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:          final var desc = src.getLoader().getDescriptor(srcLib);
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      final var newOpts = proj.getOptions();
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var attrValue : attrValues) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:        for (final var lib : libraries) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (var i = libs.length - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/file/LogisimFileActions.java:      for (final var lib : libs) {
src/main/java/com/cburch/logisim/file/MouseMappings.java:      final var srcTool = other.map.get(mods);
src/main/java/com/cburch/logisim/file/MouseMappings.java:      var dstTool = file.findTool(srcTool);
src/main/java/com/cburch/logisim/file/MouseMappings.java:    var changed = false;
src/main/java/com/cburch/logisim/file/MouseMappings.java:    for (final var entry : map.entrySet()) {
src/main/java/com/cburch/logisim/file/MouseMappings.java:      final var key = entry.getKey();
src/main/java/com/cburch/logisim/file/MouseMappings.java:      final var tool = entry.getValue();
src/main/java/com/cburch/logisim/file/MouseMappings.java:      final var searchFor = (tool instanceof AddTool addTool) ? addTool.getFactory() : tool;
src/main/java/com/cburch/logisim/file/MouseMappings.java:    var changed = false;
src/main/java/com/cburch/logisim/file/MouseMappings.java:      final var newTool = toolMap.get(searchFor);
src/main/java/com/cburch/logisim/file/MouseMappings.java:        final var clone = newTool.cloneTool();
src/main/java/com/cburch/logisim/file/MouseMappings.java:    for (final var tool : map.values()) {
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:        final var lib = proj.getLogisimFile();
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:        final var file = lib.getLoader().getMainFile();
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:      for (final var proj : Projects.getOpenProjects()) {
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:        final var l = new DirtyListener(proj);
src/main/java/com/cburch/logisim/file/ProjectsDirty.java:        final var lib = proj.getLogisimFile();
src/main/java/com/cburch/logisim/file/ReaderInputStream.java:      final var buf = new byte[1];
src/main/java/com/cburch/logisim/file/ReaderInputStream.java:      final var buf = new char[len]; // might read too much
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var l : toolListeners) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:      final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var tool : contents) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:        final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var tool : contents) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var srcTool : other.contents) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:        final var toolCopy = file.findTool(srcTool);
src/main/java/com/cburch/logisim/file/ToolbarData.java:          final var dstTool = toolCopy.cloneTool();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var tool : contents) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:    final var moved = contents.remove(from);
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var l : toolListeners) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:      final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var tool : contents) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:        final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    var changed = false;
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var it = contents.listIterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/file/ToolbarData.java:        final var newTool = toolMap.get(old);
src/main/java/com/cburch/logisim/file/ToolbarData.java:          final var addedTool = newTool.cloneTool();
src/main/java/com/cburch/logisim/file/ToolbarData.java:    for (final var tool : contents) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var libName = elt.getAttribute("lib");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var lib = reader.findLibrary(libName);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var tool = lib.getTool(name);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var msg =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var source = ((AddTool) tool).getFactory();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var locStr = elt.getAttribute("loc");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var attrs = source.createAttributeSet();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    var defaults = source;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var ramAttrs = (RamAttributes) attrs;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var str = elt.getAttribute("from");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var str = elt.getAttribute("to");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var element = circData.circuitElement;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var dest = circData.circuit;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    var knownComponents = circData.knownComponents;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      var hasNamedBox = false;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      var hasNamedBoxFixedSize = false;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      var hasAppearAttr = false;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      for (final var attrElt : XmlIterator.forChildElements(circData.circuitElement, "a")) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var name = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var appear =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:            var appear = CircuitAttributes.APPEAR_CLASSIC;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var componentsAt = new HashMap<Bounds, Component>();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var overlapComponents = new ArrayList<Component>();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (final var subElement : XmlIterator.forChildElements(element)) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var subEltName = subElement.getTagName();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          var comp = knownComponents.get(subElement);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:            final var bds = comp.getBounds();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:            final var conflict = componentsAt.get(bds);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:              final var msg =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var context =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var context =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (var comp : overlapComponents) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var bds = comp.getBounds();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      var d = 0;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var loc = comp.getLocation().translate(d, d);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      final var attrs = (AttributeSet) comp.getAttributeSet().clone();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var dest = circData.circuit;
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var shapes = new ArrayList<AbstractCanvasObject>();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (final var appearElt : XmlIterator.forChildElements(circData.circuitElement, "appear")) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:      for (final var sub : XmlIterator.forChildElements(appearElt)) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var m = AppearanceSvgReader.createShape(sub, null, dest);
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:            final var context =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:          final var context =
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var access = new HashMap<Circuit, Integer>();
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (final var data : circuitsData) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (final var circuitData : circuitsData) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    for (final var circuitData : circuitsData) {
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var loc = elt.getAttribute("loc");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var from = elt.getAttribute("from");
src/main/java/com/cburch/logisim/file/XmlCircuitReader.java:    final var to = elt.getAttribute("to");
src/main/java/com/cburch/logisim/file/XmlIterator.java:    final var nodes = node.getChildNodes();
src/main/java/com/cburch/logisim/file/XmlIterator.java:    final var ret = new ArrayList<Element>();
src/main/java/com/cburch/logisim/file/XmlIterator.java:      final var sub = nodes.item(i);
src/main/java/com/cburch/logisim/file/XmlIterator.java:    final var nodes = node.getChildNodes();
src/main/java/com/cburch/logisim/file/XmlIterator.java:    final var ret = new ArrayList<Element>();
src/main/java/com/cburch/logisim/file/XmlIterator.java:      final var sub = nodes.item(i);
src/main/java/com/cburch/logisim/file/XmlIterator.java:        final var elt = (Element) sub;
src/main/java/com/cburch/logisim/file/XmlIterator.java:      final var ret = (XmlIterator<E>) super.clone();
src/main/java/com/cburch/logisim/file/XmlIterator.java:    final var ret = this.clone();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var msg : exception.getMessages()) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var ret = libs.get(libName);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var attrsDefined = new HashMap<String, String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var attrElt : XmlIterator.forChildElements(parent, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var attrName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:              var dirPath = "";
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var tmp = Paths.get(dirPath, attrVal);
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (var i = 0; true; i++) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var attrList = attrs.getAttributes();
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var attrName = attr.getName();
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var attrVal = attrsDefined.get(attrName);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var map = file.getOptions().getMouseMappings();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var sub_elt : XmlIterator.forChildElements(elt, "tool")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var modsStr = sub_elt.getAttribute("map");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var toolbar = file.getOptions().getToolbarData();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var subElement : XmlIterator.forChildElements(elt)) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var known = new HashMap<Element, Component>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var sub : XmlIterator.forChildElements(elt, "comp")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var comp = XmlCircuitReader.getComponent(sub, this, isHolyCross, isEvolution);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var map = new HashMap<String, CircuitMapInfo>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var cmap : XmlIterator.forChildElements(board, "mc")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var key = cmap.getAttribute("key");
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var br = new BoardRectangle(x, y, w, h);
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var cmapi = MapComponent.getMapInfo(cmap);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var pins = new ArrayList<AppearanceSvgReader.PinInfo>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var comp : circData.knownComponents.values()) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var shapes = new ArrayList<AbstractCanvasObject>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var sub : XmlIterator.forChildElements(appearElt)) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var m = AppearanceSvgReader.createShape(sub, pins, null);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var desc = elt.getAttribute("desc");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var ret = loader.loadLibrary(desc);
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var subElt : XmlIterator.forChildElements(elt, "tool")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var toolStr = subElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var tool = ret.getTool(toolStr);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var versionString = elt.getAttribute("source");
src/main/java/com/cburch/logisim/file/XmlReader.java:      var isHolyCrossFile = false;
src/main/java/com/cburch/logisim/file/XmlReader.java:      var isEvolutionFile = true;
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var libsToAddAfter = new HashSet<Library>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var baseLibsToEnable = new HashSet<String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var libsLoaded = new HashSet<String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var o : XmlIterator.forChildElements(elt, "lib")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var lib = toLibrary(o, isHolyCrossFile, isEvolutionFile);
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var logiLib : libsToAddAfter) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var builtinLibraries = LibraryManager.getBuildinNames((Loader) loader);
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var lib : libsToAddAfter) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var libName = lib.getName();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var newLib : libsToAddAfter) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var circuitsData = new ArrayList<CircuitData>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var circElt : XmlIterator.forChildElements(elt)) {
src/main/java/com/cburch/logisim/file/XmlReader.java:            final var vhdl = circElt.getTextContent();
src/main/java/com/cburch/logisim/file/XmlReader.java:            final var contents = VhdlContent.parse(name, vhdl, file);
src/main/java/com/cburch/logisim/file/XmlReader.java:            final var circData = new CircuitData(circElt, new Circuit(name, file, proj));
src/main/java/com/cburch/logisim/file/XmlReader.java:            for (final var boardMap : XmlIterator.forChildElements(circElt, "boardmap")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var boardName = boardMap.getAttribute("boardname");
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var name = sub_elt.getTagName();
src/main/java/com/cburch/logisim/file/XmlReader.java:            final var main = sub_elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:            final var circ = file.getCircuit(main);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var lib = findLibrary(elt.getAttribute("lib"));
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var tool = lib.getTool(name);
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var toolElt : XmlIterator.forChildElements(root, "tool")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var attrElt : XmlIterator.forChildElements(toolElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:    var validLabels = findValidLabels(elt, "circuit", "name");
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var elt : candidates) {
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var validLabels = new HashMap<String, String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var initialLabels = getXMLLabels(root, nodeType, attrType);
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (var label : initialLabels) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var initialLabel = label;
src/main/java/com/cburch/logisim/file/XmlReader.java:    var label = initialLabel;
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var attrValuesList = new ArrayList<String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var name = circElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          for (final var attrElt : XmlIterator.forChildElements(circElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var label = attrElt.getAttribute("val");
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var compElt : XmlIterator.forChildElements(circElt, "comp")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          for (final var attrElt : XmlIterator.forChildElements(compElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var label = attrElt.getAttribute("val");
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var name = circElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:            for (final var attrElt : XmlIterator.forChildElements(circElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:          for (final var compElt : XmlIterator.forChildElements(circElt, "comp")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var cName = compElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          for (final var attrElt : XmlIterator.forChildElements(circElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var label = attrElt.getAttribute("val");
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var compElt : XmlIterator.forChildElements(circElt, "comp")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          for (final var attrElt : XmlIterator.forChildElements(compElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:              final var aName = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:                final var label = attrElt.getAttribute("val");
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var tool : toolNames.split(";")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var version = LogisimVersion.fromString(root.getAttribute("source"));
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var toolbar : XmlIterator.forChildElements(root, "toolbar")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var elt : XmlIterator.forChildElements(toolbar, "tool")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var eltName = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var circElt : XmlIterator.forChildElements(root, "circuit")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        for (final var attrElt : XmlIterator.forChildElements(circElt, "a")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var name = attrElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var factory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var doc = loadXmlFrom(is);
src/main/java/com/cburch/logisim/file/XmlReader.java:    var elt = doc.getDocumentElement();
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var file = new LogisimFile((Loader) loader);
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var context = new ReadContext(file);
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var all = new StringBuilder();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var msg : context.messages) {
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var srcLabel = src.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var toRemove = new ArrayList<Element>();
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var elt : XmlIterator.forChildElements(src, "tool")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var elt : toRemove) {
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var libElt : XmlIterator.forChildElements(root, "lib")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var desc = libElt.getAttribute("desc");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var label = libElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var toRemove = new ArrayList<Element>();
src/main/java/com/cburch/logisim/file/XmlReader.java:      var componentsRemoved = !toRemove.isEmpty();
src/main/java/com/cburch/logisim/file/XmlReader.java:      for (final var elt : toRemove) {
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var error = "Some components have been deleted. The Legacy library is not supported.";
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var elt = doc.createElement("message");
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var libElt : XmlIterator.forChildElements(root, "lib")) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var desc = libElt.getAttribute("desc");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var label = libElt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:          final var thisLabel = Integer.parseInt(label);
src/main/java/com/cburch/logisim/file/XmlReader.java:    final var labelMap = new HashMap<String, String>();
src/main/java/com/cburch/logisim/file/XmlReader.java:    for (final var elt : elts) {
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var oldLib = elt.getAttribute("lib");
src/main/java/com/cburch/logisim/file/XmlReader.java:      final var name = elt.getAttribute("name");
src/main/java/com/cburch/logisim/file/XmlReader.java:        final var newLib = labelMap.get(oldLib + ":" + name);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var n = a.getLength();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var lst = new ArrayList<String>();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:        var compareResult = stringCompare(nodeA.getNodeName(), nodeB.getNodeName());
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var children = top.getChildNodes();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var childrenCount = children.getLength();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var name = top.getNodeName();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var circuitPortIndexes = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (var nodeIndex = 0; nodeIndex < childrenCount; nodeIndex++)
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var numberOfPorts = circuitPortIndexes.size();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var nodeSet = new Node[numberOfPorts];
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (var portIndex = 0; portIndex < numberOfPorts; portIndex++)
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (var portIndex = 0; portIndex < numberOfPorts; portIndex++) top.insertBefore(nodeSet[portIndex], null);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var nodeSet = new Node[childrenCount];
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (var nodeIndex = 0; nodeIndex < childrenCount; nodeIndex++) nodeSet[nodeIndex] = children.item(nodeIndex);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (var nodeIndex = 0; nodeIndex < childrenCount; nodeIndex++) top.insertBefore(nodeSet[nodeIndex], null);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (var childId = 0; childId < childrenCount; childId++) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var docFactory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var docBuilder = docFactory.newDocumentBuilder();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var doc = docBuilder.newDocument();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      var dstFilePath = destFile.getAbsolutePath();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var tfFactory = TransformerFactory.newInstance();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var tf = tfFactory.newTransformer();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var attrBase : attrs.getAttributes()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var attr = (Attribute<Object>) attrBase;
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var val = attrs.getValue(attr);
src/main/java/com/cburch/logisim/file/XmlWriter.java:        final var dflt = source == null ? null : source.getDefaultAttributeValue(attr, BuildInfo.version);
src/main/java/com/cburch/logisim/file/XmlWriter.java:        final var defaultValue = dflt == null ? "" : attr.toStandardString(dflt);
src/main/java/com/cburch/logisim/file/XmlWriter.java:        var newValue = attr.toStandardString(val);
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var a = doc.createElement("a");
src/main/java/com/cburch/logisim/file/XmlWriter.java:            final var outFP = Paths.get(outFilePath);
src/main/java/com/cburch/logisim/file/XmlWriter.java:            final var attrValP = Paths.get(newValue);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("circuit");
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var appear = doc.createElement("appear");
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var elt = canvasObject.toSvgElement(doc);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var wire : circuit.getWires()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var elt = fromComponent(comp);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var board : circuit.getBoardMapNamestoSave()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var elt = fromMap(circuit, board);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("vhdl");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("boardmap");
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var map = doc.createElement("mc");
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var mapInfo = circ.getMapInfo(boardName).get(key);
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var rect = mapInfo.getRectangle();
src/main/java/com/cburch/logisim/file/XmlWriter.java:        final var nmap = mapInfo.getMap();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var source = comp.getFactory();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var lib = findLibrary(source);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var value = comp.getAttributeSet().getValue(Text.ATTR_TEXT);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("comp");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("lib");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var name = Integer.toString(libs.size());
src/main/java/com/cburch/logisim/file/XmlWriter.java:    var desc = loader.getDescriptor(lib);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      var isUsed = false;
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var tools = lib.getTools();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (final var circuit : file.getCircuits()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:        for (final var tool : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (final var tool : file.getOptions().getToolbarData().getContents()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      for (final var entry : file.getOptions().getMouseMappings().getMappings().entrySet()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:        final var origFile = LibraryManager.getLibraryFilePath(file.getLoader(), desc);
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var names = origFile.split(Pattern.quote(File.separator));
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var filename = names[names.length - 1];
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var newFile = String.format("%s%s%s", librariesPath, File.separator, filename);
src/main/java/com/cburch/logisim/file/XmlWriter.java:          final var newFilePath = LineBuffer.format("..{{1}}{{2}}{{1}}{{3}}", File.separator, Loader.LOGISIM_LIBRARY_DIR, filename);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var attrs = t.getAttributeSet();
src/main/java/com/cburch/logisim/file/XmlWriter.java:        final var toAdd = doc.createElement("tool");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("project");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var elt = fromLibrary(lib);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var mainElt = doc.createElement("main");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var circ : file.getCircuits()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var vhdl : file.getVhdlContents()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var elt = doc.createElement("mappings");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var map = file.getOptions().getMouseMappings();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var entry : map.getMappings().entrySet()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var mods = entry.getKey();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var tool = entry.getValue();
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var toolElt = fromTool(tool);
src/main/java/com/cburch/logisim/file/XmlWriter.java:      final var mapValue = InputEventUtil.toString(mods);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var elt = doc.createElement("options");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var lib = findLibrary(tool);
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var elt = doc.createElement("tool");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var elt = doc.createElement("toolbar");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var toolbar = file.getOptions().getToolbarData();
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var tool : toolbar.getContents()) {
src/main/java/com/cburch/logisim/file/XmlWriter.java:    final var ret = doc.createElement("wire");
src/main/java/com/cburch/logisim/file/XmlWriter.java:    for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    final var result = new HashMap<String, ArrayList<Integer>>();
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    final var list = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    var count = 0;
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var type : IoComponentTypes.KNOWN_COMPONENT_SET) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:      for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    final var result = new ArrayList<BoardRectangle>();
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/BoardInformation.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    final var factory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    final var xml = new File(absoluteFileName);
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    final var circuitInfo = nodeList.item(0);
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    final var circuitInfoDetails = circuitInfo.getChildNodes();
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    for (var i = 0; i < circuitInfoDetails.getLength(); i++) {
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        final var attrs = circuitInfoDetails.item(i).getAttributes();
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        for (var j = 0; j < attrs.getLength(); j++) {
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:    for (var i = 0; i < circuitInfoDetails.getLength(); i++) {
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        var x = -1;
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        var y = -1;
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        var width = -1;
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        var height = -1;
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        var key = "";
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        final var attrs = circuitInfoDetails.item(i).getAttributes();
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:        for (var j = 0; j < attrs.getLength(); j++) {
src/main/java/com/cburch/logisim/fpga/data/ComponentMapParser.java:          for (final var comp : boardInfo.getAllComponents()) {
src/main/java/com/cburch/logisim/fpga/data/ConstantButton.java:    final var map = selComp.getMap();
src/main/java/com/cburch/logisim/fpga/data/ConstantButton.java:    var v = 0L;
src/main/java/com/cburch/logisim/fpga/data/ConstantButton.java:      final var value = OptionPane.showInputDialog(S.get("FpgaMapSpecConst"));
src/main/java/com/cburch/logisim/fpga/data/ConstantButton.java:    final var map = comp.getMap();
src/main/java/com/cburch/logisim/fpga/data/DriveStrength.java:    final var theList = DriveStrength.getStrings();
src/main/java/com/cburch/logisim/fpga/data/DriveStrength.java:    final var iter = theList.iterator();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var result = new LinkedList<String>();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (final var comp : IoComponentTypes.KNOWN_COMPONENT_SET) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var attrs = DocumentInfo.getAttributes();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var attributeIndex = 0; attributeIndex < attrs.getLength(); attributeIndex++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      final var thisAttr = attrs.item(attributeIndex);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var vals = thisAttr.getNodeValue().split(",");
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var vals = thisAttr.getNodeValue().split(",");
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var idx = 0;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var loc : InputLocs) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var loc : OutputLocs) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var loc : IOLocs) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var PinsComplete = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var NrInpPins = IoComponentTypes.getFpgaInputRequirement(myType);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var NrOutpPins = IoComponentTypes.getFpgaOutputRequirement(myType);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var ret = false;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var clone = new FpgaIoInformationContainer();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var pinId = 0; pinId < nrOfPins; pinId++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var result = doc.createElement(myType.toString());
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var label = doc.createAttribute(BoardWriterClass.LABEL_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var attrSet = doc.createAttribute(BoardWriterClass.INPUT_SET_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var first = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var attrSet = doc.createAttribute(BoardWriterClass.OUTPUT_SET_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var first = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var attrSet = doc.createAttribute(BoardWriterClass.IO_SET_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var first = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var drive = doc.createAttribute(DriveStrength.DRIVE_ATTRIBUTE_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var pull = doc.createAttribute(PullBehaviors.PULL_ATTRIBUTE_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var stand = doc.createAttribute(IoStandards.IO_ATTRIBUTE_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        final var act = doc.createAttribute(PinActivity.ACTIVITY_ATTRIBUTE_STRING);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      for (var i = pinIsMapped.size(); i < count; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      for (var i = pinIsMapped.size() - 1; i >= count; i--) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var map = pinIsMapped.get(i);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = pinIsMapped.get(pin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var result = new MapResultClass();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = new mapType(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var result = new MapResultClass();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = new mapType(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var result = new MapResultClass();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = new mapType(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = new mapType(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = pinIsMapped.get(pin);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = comp.getMap();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var connect = comp.getPin();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var ret = selectable;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var PaintColor = BoardManipulator.getColor(paintColor);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var c = g.getColor();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var c = gfx.getColor();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var i = getNrOfMaps();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var com = selComp.getMap();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var selPin = partialMapArray[xPos - myRectangle.getXpos()][Ypos - myRectangle.getYpos()];
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = selComp.getMap();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = selComp.getMap();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var fact = map.getComponentFactory();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var nrOfMatrixRows = map.getAttributeSet().getValue(DotMatrix.ATTR_MATRIX_ROWS).getWidth();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var nrOfMatrixColumns = map.getAttributeSet().getValue(DotMatrix.ATTR_MATRIX_COLS).getWidth();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var startRow =  selectedPin / nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var startColumn = selectedPin % nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var canMap = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var row = 0; row < nrOfMatrixRows; row++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:          for (var column = 0; column < nrOfMatrixColumns; column++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:            var SourcePin = row * nrOfMatrixColumns + column;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:            var MapPin = (row + startRow) * nrOfColumns + column + startColumn;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var nrOfSegs = map.getAttributeSet().getValue(LedBar.ATTR_MATRIX_COLS).getWidth();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var selCol = selectedPin % nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var canBeMapped = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var i = 0; i < nrOfSegs; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var diag = new PartialMapDialog(selComp, this, parent);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var map = selComp.getMap();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:      var nrOfSwitches = map.getAttributeSet().getValue(DipSwitch.ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        var canMap = true;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:        for (var i = 0; i < nrOfSwitches; i++)
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var diag = new PartialMapDialog(selComp, this, parent);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var x = AppPreferences.getScaled(myRectangle.getXpos(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var y = AppPreferences.getScaled(myRectangle.getYpos(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var width = AppPreferences.getScaled(myRectangle.getWidth(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var height = AppPreferences.getScaled(myRectangle.getHeight(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var alpha = highlighted && selectable ? 200 : 100;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var color = containsMap() ? BoardManipulator.SELECTED_MAPPED_COLOR_ID :
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var col = BoardManipulator.getColor(color);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var x = AppPreferences.getScaled(myRectangle.getXpos(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var y = AppPreferences.getScaled(myRectangle.getYpos(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var width = AppPreferences.getScaled(myRectangle.getWidth(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    final var height = AppPreferences.getScaled(myRectangle.getHeight(), scale);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var alpha = 150;
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    var col = BoardManipulator.getColor(BoardManipulator.SELECTABLE_COLOR_ID);
src/main/java/com/cburch/logisim/fpga/data/FpgaIoInformationContainer.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    for (var elem : KNOWN_COMPONENT_SET) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          final var row = id / nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          final var col = id % nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sa = com.cburch.logisim.std.io.SevenSegment.Segment_A;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sb = com.cburch.logisim.std.io.SevenSegment.Segment_B;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sc = com.cburch.logisim.std.io.SevenSegment.Segment_C;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sd = com.cburch.logisim.std.io.SevenSegment.Segment_D;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var se = com.cburch.logisim.std.io.SevenSegment.Segment_E;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sf = com.cburch.logisim.std.io.SevenSegment.Segment_F;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    final var sg = com.cburch.logisim.std.io.SevenSegment.Segment_G;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var hasDp = false;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var part = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var partX = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var partY = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var widthIndex = 0; widthIndex < width; widthIndex++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var heightIndex = 0; heightIndex < height; heightIndex++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:            var pinIndex = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var w = 0; w < width; w++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var h = 0; h < height; h++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var indexes = getSevenSegmentDisplayArray(hasDp);
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var xIndex = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var yIndex = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var w = 0; w < width; w++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var h = 0; h < height; h++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var w = 0; w < width; w++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var h = 0; h < height; h++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:            var realRow = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:            var realColumn = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var w = 0; w < width; w++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var h = 0; h < height; h++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var hasDp = false;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var part = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var boxWidth = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var boxHeight = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var boxXpos = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var boxYpos = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var partX = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:    var partY = 0f;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var yPinNr = pinNr;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var by = y + (int) ((float) pinNr * part);
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var bh = (int) ((float) (pinNr + 1) * part) - (int) ((float) pinNr * part);
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var indexes = getSevenSegmentDisplayArray(hasDp);
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var realXIndex = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var realXIndexPlusOne = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var realYIndex = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var realYIndexPlusOne = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        for (var xIndex = 0; xIndex < 5; xIndex++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:          for (var yIndex = 0; yIndex < 7; yIndex++) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var selectedColumn = pinNr % nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        final var selectedRow = pinNr / nrOfColumns;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var xPosition = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var nextXPosition = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var yPosition = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentTypes.java:        var nextYPosition = 0;
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var x = 0; x < BoardManipulator.IMAGE_WIDTH; x++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:      for (var y = 0; y < imageHeight; y++) lookup[x][y] = null;
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var overlap = false;
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var io : ioComps) overlap |= io.getRectangle().overlap(rect);
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var overlap = false;
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var io : ioComps)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var io : ioComps) {
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:      var rect = comp.getRectangle();
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:      for (var x = rect.getXpos(); x < rect.getXpos() + rect.getWidth(); x++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:        for (var y = rect.getYpos(); y < rect.getYpos() + rect.getHeight(); y++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:      var rect = comp.getRectangle();
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:      for (var x = rect.getXpos(); x < rect.getXpos() + rect.getWidth(); x++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:        for (var y = rect.getYpos(); y < rect.getYpos() + rect.getHeight(); y++)
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var xpos = AppPreferences.getDownScaled(e.getX(), scale);
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var ypos = AppPreferences.getDownScaled(e.getY(), scale);
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var selected = lookup[xpos][ypos];
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var c : ioComps) c.paint(g, scale);
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    var area =
src/main/java/com/cburch/logisim/fpga/data/IoComponentsInformation.java:    for (var l : listeners) l.repaintRequest(area);
src/main/java/com/cburch/logisim/fpga/data/IoStandards.java:    final var thelist = IoStandards.getStrings();
src/main/java/com/cburch/logisim/fpga/data/IoStandards.java:    final var iter = thelist.iterator();
src/main/java/com/cburch/logisim/fpga/data/LedArrayDriving.java:    final var thelist = LedArrayDriving.getStrings();
src/main/java/com/cburch/logisim/fpga/data/LedArrayDriving.java:    var result = new LinkedList<String>();
src/main/java/com/cburch/logisim/fpga/data/LedArrayDriving.java:    var result = new LinkedList<String>();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var mapInfo = comp.getMapInformationContainer();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var bName = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 1; i < name.size(); i++) bName.add(name.get(i));
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var BubbleInfo = comp.getGlobalBubbleId(bName);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < mapInfo.getNrOfInPorts(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var idx = BubbleInfo == null ? -1 : BubbleInfo.getInputStartIndex() + i;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < mapInfo.getNrOfOutPorts(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var idx = BubbleInfo == null ? -1 : BubbleInfo.getOutputStartIndex() + i;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < mapInfo.getNrOfInOutPorts(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var idx = BubbleInfo == null ? -1 : BubbleInfo.getInOutStartIndex() + i;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var key : myIoBubbles.keySet()) if (myIoBubbles.get(key) == id) return key;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var iopin = maps.get(pin).getIoPin();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var map1 = maps.get(0);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var map2 = maps.get(1);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var map3 = maps.get(2);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          for (var i = 0; i < 3; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var map = maps.get(pin);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var map = maps.get(i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var map = maps.get(i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var pin = cmap.getPinId();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var pin = cmap.getPinId();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var mask = 1L;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var val = cmap.getConstValue();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          var value = (val & mask) == 0L ? 0 : 1;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var rect = cmap.getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var comp : IOcomps) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var pmaps = cmap.getPinMaps();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var isPinMapped = true;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          final var rect1 = pmaps.get(0).getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          final var rect2 = pmaps.get(1).getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          final var rect3 = pmaps.get(2).getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var iomap1 = pmaps.get(0).getIoId();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var iomap2 = pmaps.get(1).getIoId();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var iomap3 = pmaps.get(2).getIoId();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:              for (var comp : IOcomps) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var map = new MapClass(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var map = new MapClass(comp, compPin);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var parts = PinKey.split("#");
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var key : SevenSegment.getLabels()) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var pinId = Integer.parseUnsignedInt(number);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        for (var comp : IOcomps) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var oldmaps = new ArrayList<MapClass>();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var oldOpens = new ArrayList<Boolean>();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var oldConstants = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var success = true;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var newMap = new MapClass(comp, -1);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var oldMap = maps.get(i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var res = comp.tryInputMap(this, i, i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var outputid = i - (myInputBubbles == null ? 0 : myInputBubbles.size());
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var res = comp.tryOutputMap(this, i, outputid);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var ioid =
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var res = comp.tryIOMap(this, i, ioid);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = 0; i < nrOfPins && maps != null; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var map = oldmaps.get(i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var maskinp = 1L;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var change = false;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var nrConstants = 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var nrOpens = 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var nrMaps = 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var s = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 1; i < myName.size(); i++) s.append(i == 1 ? "" : "_").append(myName.get(i));
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var s = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 1; i < myName.size(); i++) s.append(i == 1 ? "" : "_").append(myName.get(i));
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    var s = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:    for (var i = 1; i < myName.size(); i++) s.append("/").append(myName.get(i));
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var outAllOpens = nrOutputs() > 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var ioAllOpens = nrIOs() > 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var inpAllConst = nrInputs() > 0;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var ioAllConst = ioAllOpens;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var inpConst = 0L;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var ioConst = 0L;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var open = S.get("MapOpen");
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = nrOfPins - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var addcomma = false;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        var value = 0L;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        for (var i = nrOfPins - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var rect = maps.get(0).IOcomp.getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var s = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var first = true;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          var map = maps.get(i);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var s = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var first = true;
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      final var br = cmap.getRectangle();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var xy = map.getAttribute(COMPLETE_MAP).split(",");
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var x = Integer.parseUnsignedInt(xy[0]);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:        final var y = Integer.parseUnsignedInt(xy[1]);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var maps = map.getAttribute(PIN_MAP).split(",");
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      var complexI = new CircuitMapInfo();
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:      for (var s : maps) {
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:          var parts = s.split("_");
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var x = Integer.parseUnsignedInt(parts[0]);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var y = Integer.parseUnsignedInt(parts[1]);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var pin = Integer.parseUnsignedInt(parts[2]);
src/main/java/com/cburch/logisim/fpga/data/MapComponent.java:            final var c = Long.parseUnsignedLong(s);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:    var oldsize = 0;
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:    for (var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:      var map = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          var idx = getInsertionPoint(map);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          var idx = getInsertionPoint(map);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          for (var i = map.getNrOfPins() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          var idx = getInsertionPoint(map);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          var idx = getInsertionPoint(map);
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:          for (var i = map.getNrOfPins() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/fpga/data/MapListModel.java:    var idx = 0;
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var BoardId = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var io : currentUsedBoard.getAllComponents()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:        var clone = (FpgaIoInformationContainer) io.clone();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      for (final var io : myIOComponents) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var cur = new HashSet<ArrayList<String>>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var BoardId = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var newMappableResources = myCircuit.getNetList().getMappableResources(BoardId, true);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : newMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:        var comp = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:          var newMap = new MapComponent(key, newMappableResources.get(key));
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : cur) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var key = getHierarchyName(mapKey);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var id = 0;
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var result = new HashMap<String, CircuitMapInfo>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : myMappableResources.keySet()) myMappableResources.get(key).unmap();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var split1 = mapKey.split(" ");
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var hier = split1[split1.length - 1];
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var split2 = hier.split("#");
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : split2[0].split("/")) if (!key.isEmpty()) result.add(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    var result = true;
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      var map = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      for (var i = 0; i < map.getNrOfPins(); i++) result &= map.isMapped(i);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (final var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      final var map = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:          final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (final var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      final var map = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:          final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:    for (final var key : myMappableResources.keySet()) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      final var map = myMappableResources.get(key);
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/data/MappableResourcesContainer.java:          final var sb = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/data/PinActivity.java:    final var thelist = PinActivity.getStrings();
src/main/java/com/cburch/logisim/fpga/data/PullBehaviors.java:    final var thelist = PullBehaviors.getStrings();
src/main/java/com/cburch/logisim/fpga/data/PullBehaviors.java:    final var iter = thelist.iterator();
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockSourceContainer.java:    for (final var clock : sources) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    final var result = new ArrayList<Byte>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    for (final var solderPoint : clockSources) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    for (final var solderPoint : clockNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    for (final var solderPoint : clockSources) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    for (final var solderPoint : clockNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeContainer.java:    for (final var solderPoint : clockSources) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:    for (final var search : sourceTrees) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:    for (final var search : sourceTrees) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:    for (final var tree : sourceTrees) tree.clear();
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:    for (var i = 0; i < sources.getNrofSources(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:      for (final var ThisClockNet : sourceTrees) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ClockTreeFactory.java:          for (final var clockEntry : ThisClockNet.getClockEntries(selectedNet)) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/ConnectionEnd.java:    final var Connection = myConnections.get(bitIndex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:    final var result = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:    final var err = nameErrors(label, errorIdentifierString);
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:    for (var i = 0; i < label.length(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:    for (var i = 0; i < label.length(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:      final var str = label.substring(i, i + 1);
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:      final var low = str.toLowerCase();
src/main/java/com/cburch/logisim/fpga/designrulecheck/CorrectLabel.java:    for (var i = 0; i < Label.length(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    final var oldconns = sourceNetsList.get(bitIndex).getAll();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:      final var point = oldconns.get(0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    var ret = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    for (var i = 0; i < nrOfBits; i++) ret |= sourceList.get(i).size() > 1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    var ret = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    for (var i = 0; i < nrOfBits; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    final var sinks = new HashSet<ConnectionPoint>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    for (var i = 0; i < nrOfBits; i++) sinks.addAll(sinkList.get(i).getAll());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    var ret = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    for (var i = 0; i < nrOfBits; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Net.java:    for (var i = 0; i < nrOfBits; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var sub : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subFact = (SubcircuitFactory) sub.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var subcirc : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subFact = (SubcircuitFactory) subcirc.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subFactory = (SubcircuitFactory) comp.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var names = new ArrayList<>(name);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var firstTime = !circuits.contains(subFactory.getName());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subInputBubbles = subFactory.getSubcircuit().getNetList().getNumberOfInputBubbles();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subInOutBubbles = subFactory.getSubcircuit().getNetList().numberOfInOutBubbles();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subOutputBubbles = subFactory.getSubcircuit().getNetList().numberOfOutputBubbles();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(name);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subInputBubbles = comp.getMapInformationContainer().getNrOfInPorts();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subInOutBubbles = comp.getMapInformationContainer().getNrOfInOutPorts();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subOutputBubbles = comp.getMapInformationContainer().getNrOfOutPorts();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var compNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var labels = new HashMap<String, Component>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var drc = new ArrayList<SimpleDrcContainer>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var handledCircuits = new ArrayList<Circuit>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myCircuit.getNonWires()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subCircuit = factory.getSubcircuit();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myCircuit.getNonWires()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var compName = comp.getFactory().getHDLName(comp.getAttributeSet());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myCircuit.getNonWires()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var label = CorrectLabel.getCorrectLabel(comp.getAttributeSet().getValue(StdAttr.LABEL)).toUpperCase();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var componentName = comp.getFactory().getHDLName(comp.getAttributeSet());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var simpleDRCContainer : drc) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var openInputs = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var j = 0; j < comp.nrOfEnds(); j++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var openInputs = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var j = 0; j < comp.nrOfEnds(); j++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myInputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var openInputs = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var j = 0; j < comp.nrOfEnds(); j++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myOutputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var openOutputs = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var j = 0; j < comp.nrOfEnds(); j++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var ports =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var clockSources = myClockInformation.getSourceContainer();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var hierarchyNetlists = new ArrayList<Netlist>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var sub = (SubcircuitFactory) comp.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var myHierarchyName = new ArrayList<>(hierarchyname);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(hierarchyname);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var current : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var drc = new ArrayList<SimpleDrcContainer>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var errors = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var progress = Reporter.report.getProgressBar();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var curMax = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var curVal = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var curStr = "";
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newNet = new Net();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var components = myCircuit.getNonWires();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var outputsList = new HashSet<Location>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var inputsList = new HashSet<Location>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var tunnelList = new HashSet<Component>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var ignore = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = comp.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var end : ends) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var width = end.getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var loc = end.getLocation();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var simpleDRCContainer : drc) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var points = new HashMap<Location, Integer>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var end : comp.getEnds()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var loc = end.getLocation();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          var newNet = true;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          for (final var net : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var bitWidth = points.get(loc);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var areTunnelsPresent = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : tunnelList) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = comp.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var end : ends) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var netIterator = myNets.listIterator();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var thisNet = netIterator.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          var merged = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var searchIterator = myNets.listIterator(myNets.indexOf(thisNet) + 1);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var searchNet = searchIterator.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var name : thisNet.getTunnelNames()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var thisSplitter = mySplitIter.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var dupeFound = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var searchIter = mySplitters.listIterator(mySplitters.indexOf(thisSplitter) + 1);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var SearchSplitter = searchIter.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (var i = 0; i < SearchSplitter.getEnds().size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var wire = netIterator.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var mySplitter = mySplitIter.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var busWidth = mySplitter.getEnd(0).getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var myEnds = mySplitter.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var maxFanoutWidth = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var index = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var i = 1; i < myEnds.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var width = mySplitter.getEnd(i).getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var busLoc = mySplitter.getEnd(0).getLocation();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var connectedLoc = mySplitter.getEnd(index).getLocation();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var issueWarning = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var currentNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : mySplitters) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = comp.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var combinedEnd = ends.get(0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var rootNet = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var i = 0; i < myNets.size() && rootNet < 0; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connections = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var i = 1; i < ends.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var thisEnd = ends.get(i);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var connectedNet = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var j = 0; j < myNets.size() && connectedNet < 1; j++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var unconnectedEnds = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var connectedUnknownEnds = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var sattrs = (SplitterAttributes) comp.getAttributeSet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var i = 1; i < ends.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var connectedNet = connections.get(i - 1);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var busBitConnection = ((Splitter) comp).getEndpoints();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : components) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var bit = 0; bit < thisNet.getBitWidth(); bit++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          for (final var comp : mySplitters) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var ends = comp.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var combinedEnd = ends.get(0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            var connectedBus = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var sattrs = (SplitterAttributes) comp.getAttributeSet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (var i = 0; i < myNets.size() && connectedBus < 0; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:                final var busBitConnection = ((Splitter) comp).getEndpoints();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:                final var indexBits = new ArrayList<Byte>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:                var rootBus = myNets.get(connectedBus);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:                final var solderPoint = new ConnectionPoint(comp);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:                var isSink = true;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var label = CorrectLabel.getCorrectLabel(pinLabel);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subFactory = (SubcircuitFactory) comp.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (var end = 0; end < comp.nrOfEnds(); end++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var result = new ArrayList<ConnectionPoint>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var netId = myNets.indexOf(thisNet) + "-" + bitIndex;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var currentSplitter : splitters) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = currentSplitter.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var splitterAttrs = (SplitterAttributes) currentSplitter.getAttributeSet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var busBitConnection = ((Splitter) currentSplitter).getEndpoints();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var splitterEnd = busBitConnection[bitIndex];
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (var index = 0; index < bitIndex; index++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var rootIndices = new ArrayList<Byte>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var components = new HashMap<ArrayList<String>, netlistComponent>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var sub = (SubcircuitFactory) comp.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var MyHierarchyName = new ArrayList<>(hierarchy);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(hierarchy);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var comp : myInputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(hierarchy);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var comp : myInOutPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(hierarchy);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var comp : myOutputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var myHierarchyName = new ArrayList<>(hierarchy);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var myIterator = wires.iterator();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var matchedWires = new ArrayList<Wire>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var compWire = wire;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var thisWire = myIterator.next();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var matched : matchedWires) getNet(matched, thisNet);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var search : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var circuitLabel = CorrectLabel.getCorrectLabel(search.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var i = 0; i < search.nrOfEnds(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var thisEnd = search.getEnd(i);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var search : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var circuitLabel = CorrectLabel.getCorrectLabel(search.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var i = 0; i < search.nrOfEnds(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var thisEnd = search.getEnd(i);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var source = CorrectLabel.getCorrectLabel(label);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var inPort : myInputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var comp = CorrectLabel.getCorrectLabel(inPort.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var inOutPort : myInOutPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var comp = CorrectLabel.getCorrectLabel(inOutPort.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var outPort : myOutputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var comp = CorrectLabel.getCorrectLabel(outPort.getComponent().getAttributeSet().getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var rootNet = child.getParent();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var rootNet = child.getParent();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var rootIndex = child.getBit(bitIndex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var splitters = new HashSet<Splitter>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myCircuit.getNonWires()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var netId = myNets.indexOf(srcNet) + "-" + srcBitIndex;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var netId = myNets.indexOf(thisNet) + "-" + bitIndex;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var splitter : splitters) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = splitter.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var end = 0; end < ends.size(); end++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var busBitConnection = ((Splitter) splitter).getEndpoints();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var splitterEnd = busBitConnection[bitIndex];
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (var index = 0; index < bitIndex; index++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var ret = getHiddenSource(null, (byte) 0, slaveNet, netIndex, splitters, handledNets, segments, splitter);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var rootIndices = new ArrayList<Byte>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var ret = getHiddenSource(null, (byte) 0, rootNet, rootIndices.get(bitIndex), splitters, handledNets, segments, splitter);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var netId = myNets.indexOf(fannoutNet) + "-" + fannoutBitIndex;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var netId = myNets.indexOf(combinedNet) + "-" + combinedBitIndex;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (var currentSplitter : splitterList) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var ends = currentSplitter.getEnds();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var end = 0; end < ends.size(); end++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var busBitConnection = ((Splitter) currentSplitter).getEndpoints();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            var splitterEnd = busBitConnection[combinedBitIndex];
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (var index = 0; index < combinedBitIndex; index++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var rootIndices = new ArrayList<Byte>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            for (final var thisnet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var continuesBus = true;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var connInfo = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var nrOfBits = connInfo.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var connectedNet = connInfo.get((byte) 0).getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var connectedNetIndex = connInfo.get((byte) 0).getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (var i = 1; (i < nrOfBits) && continuesBus; i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var sub : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subFact = (SubcircuitFactory) sub.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNames = new ArrayList<>(hierarchyNames);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myCircuit.getNonWires()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var clockSource : myClockGenerators) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var clockConnection = clockSource.getEnd(0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var solderPoint = clockConnection.get((byte) 0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var clockid = clockSources.getClockId(clockSource.getComponent());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var ret = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var net : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var error =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var sourceNets = net.getSourceNets(0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var sourceConnections = new HashMap<Component, Integer>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var segments = new HashSet<>(net.getWires());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          var foundShortCrcuit = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var error = new SimpleDrcContainer(myCircuit, S.get("NetList_ShortCircuit"), SimpleDrcContainer.LEVEL_FATAL, SimpleDrcContainer.MARK_WIRE | SimpleDrcContainer.MARK_INSTANCE);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var connectedNet = sourceNet.getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var source = getHiddenSource(net, (byte) 0, connectedNet, bitIndex, mySplitters, new HashSet<>(), segments, null);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var comp = source.getSource().getComp();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              for (final var seg : segments) error.addMarkComponent(seg);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var index = source.getIndex();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var mySinks = new HashSet<ConnectionPoint>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var i = 0; i < thisNet.getBitWidth(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            var hasSink = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var sinks = thisNet.getBitSinks(i);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var hiddenSinkNets = getHiddenSinks(thisNet, (byte) i, mySplitters, new HashSet<>(), true);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var sink : mySinks) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var nrOfBusses = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var count = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var inp : myInOutPorts) count += inp.getEnd(0).getNrOfBits();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var count = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var inPort : myInputPorts) count += inPort.getEnd(0).getNrOfBits();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var nrOfNets = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisNet : myNets) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var count = 0;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var outPort : myOutputPorts) count += outPort.getEnd(0).getNrOfBits();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var normalComponent = new netlistComponent(comp);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisPin : comp.getEnds()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connection = findConnectedNet(thisPin.getLocation());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var pinId = comp.getEnds().indexOf(thisPin);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var pinIsSink = thisPin.isInput();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var thisEnd = normalComponent.getEnd(pinId);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var rootNet = getRootNet(connection);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var bitid = 0; bitid < thisPin.getWidth().getWidth(); bitid++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var rootNetBitIndex = getRootNetIndex(connection, (byte) bitid);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var thisSolderPoint = thisEnd.get((byte) bitid);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subCircuit = new netlistComponent(comp);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subFactory = (SubcircuitFactory) comp.getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subPins = ((CircuitAttributes) comp.getAttributeSet()).getPinInstances();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subNetlist = subFactory.getSubcircuit().getNetList();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var thisPin : comp.getEnds()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connection = findConnectedNet(thisPin.getLocation());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var pinId = comp.getEnds().indexOf(thisPin);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subPortIndex = subNetlist.getPortInfo(subPins[pinId].getAttributeValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        var pinIsSink = thisPin.isInput();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var rootNet = getRootNet(connection);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var rootNetBitIndex = getRootNetIndex(connection, bitid);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var sub = (SubcircuitFactory) point.getComp().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var inputPort = sub.getSubcircuit().getNetList().getInputPin(point.getChildsPortIndex());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subCirc = getSubCirc(point.getComp());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var bitindex = subCirc.getConnectionBitIndex(point.getParentNet(), point.getParentNetBitIndex());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var subClockNet = inputPort.getEnd(0).get(bitindex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNames = new ArrayList<>(hierarchyNames);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var label =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var hiddenComps = getHiddenSinks(clockNet, clockNetBitIndex, mySplitters, new HashSet<>(), false);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var point : hiddenComps) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var outputPort = getOutPort(point.getComp());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var bitIndex = outputPort.getConnectionBitIndex(point.getParentNet(), point.getParentNetBitIndex());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subClockNet =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var newHierarchyNames = new ArrayList<>(hierarchyNames);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var current : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var current : myOutputPorts) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var root = new ArrayList<Netlist>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var suppress = AppPreferences.SupressGatedClockWarnings.getBoolean();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var notGatedSet = new HashMap<String, Map<netlistComponent, Circuit>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var gatedSet = new HashMap<String, Map<netlistComponent, Circuit>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var key : notGatedSet.keySet()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var comp : instances.keySet()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var comp : instances.keySet()) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var subCirc : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var sub = (SubcircuitFactory) subCirc.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNames = new ArrayList<>(getCurrentHierarchyLevel());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var gatedClock = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var pinSources = new ArrayList<SourceInfo>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var pinWires = new ArrayList<Set<Wire>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var pinGatedComponents = new ArrayList<Set<netlistComponent>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var nonPinSources = new ArrayList<SourceInfo>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var nonPinWires = new ArrayList<Set<Wire>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var nonPinGatedComponents = new ArrayList<Set<netlistComponent>>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (final var comp : myComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var fact = comp.getComponent().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var clockPins = fact.clockPinIndex(comp);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (final var clockPin : clockPins)
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var myName = CorrectLabel.getCorrectLabel(circuitName);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        for (var i = 0; i < pinSources.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          for (final var comp : pinGatedComponents.get(i)) warn.addMarkComponent(comp.getComponent());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var newList = new HashMap<netlistComponent, Circuit>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var newList = new HashMap<netlistComponent, Circuit>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var isGatedClock = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var clockNetName = Hdl.getClockNetName(comp, clockPinIndex, this);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connection = comp.getEnd(clockPinIndex).get((byte) 0);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connectedNet = connection.getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connectedNetindex = connection.getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var hasSource = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var segments = new HashSet<Wire>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var source = getHiddenSource(null, (byte) 0, connectedNet, connectedNetindex, mySplitters, new HashSet<>(), segments, null);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var sourceCon = source.getSource();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var index = getEntryIndex(pinSources, sourceCon, (int) connectedNetindex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var comps = new HashSet<netlistComponent>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:            final var index = getEntryIndex(nonPinSources, sourceCon, (int) connectedNetindex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:              final var comps = new HashSet<netlistComponent>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    var result = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (var i = 0; i < searchList.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var thisEntry = searchList.get(i);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    final var comp = sourcePoint.getComp();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var idx = -1;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (var i = 0; i < myInputPorts.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subNet =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newHierarchyNames = new ArrayList<>(hierarchyNames);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subNetList = hierarchyNetlists.get(hierarchyNetlists.size() - 2);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newNet = subNet.getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newNetIndex = subNet.getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var segments = new HashSet<Wire>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var source = subNetList.getHiddenSource(null, (byte) 0, newNet, newNetIndex, subNetList.mySplitters, new HashSet<>(), segments, null);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var sfac = source.getSource().getComp().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var outputPort = sub.getSubcircuit().getNetList().getOutputPin(sourcePoint.getChildsPortIndex());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var connectedNet = sourcePoint.getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var circ : mySubCircuits) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var bitIndex = subCirc.getConnectionBitIndex(connectedNet, (byte) index);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      final var subNet = outputPort.getEnd(0).get(bitIndex);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var subNetList = sub.getSubcircuit().getNetList();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newHierarchyNames = new ArrayList<>(hierarchyNames);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newHierarchyNetlists = new ArrayList<>(hierarchyNetlists);
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newNet = subNet.getParentNet();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var newNetIndex = subNet.getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var segments = new HashSet<Wire>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var source =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:        final var sfac = source.getSource().getComp().getFactory();
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:    for (var i = 0; i < sources.size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      var alreadyWarned = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:      for (final var comp : components.get(i))
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          for (final var comp : components.get(i)) warn.addMarkComponent(comp.getComponent());
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          final var warn =
src/main/java/com/cburch/logisim/fpga/designrulecheck/Netlist.java:          for (final var comp : components.get(i))
src/main/java/com/cburch/logisim/fpga/designrulecheck/SimpleDrcContainer.java:    for (final var obj : drcComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/SimpleDrcContainer.java:    for (final var obj : drcComponents) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    for (var i = 0; i < ref.getEnds().size(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:        final var nrOfBits = ref.getEnd(0).getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    final var thisInfo = new BubbleInformationContainer();
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    var isConnected = false;
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    final var ThisEnd = endEnds.get(index);
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    for (var i = 0; i < ThisEnd.getNrOfBits(); i++) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    for (final var search : endEnds) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:        final var connection = search.get(bit);
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    final var connections = new ArrayList<ConnectionPoint>();
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    for (final var search : endEnds) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:        final var connection = search.get(bit);
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:    for (final var search : endEnds) {
src/main/java/com/cburch/logisim/fpga/designrulecheck/netlistComponent.java:        final var connection = search.get(bit);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var SofFile = new File(sandboxPath + ToplevelHdlGeneratorFactory.FPGA_TOP_LEVEL_NAME + ".sof").exists();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var PofFile = new File(sandboxPath + ToplevelHdlGeneratorFactory.FPGA_TOP_LEVEL_NAME + ".pof").exists();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var down = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var stage0 = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var stage1 = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var stage2 = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var scriptFile = FileWriter.getFilePointer(scriptPath, alteraTclFile);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var fileType = hdlType.equals(HdlGeneratorFactory.VHDL) ? "VHDL_FILE" : "VERILOG_FILE";
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    for (var entity : entities) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    for (var architecture : architectures) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    for (final var key : mapInfo.getMappableResources().keySet()) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var map = mapInfo.getMappableResources().get(key);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:          final var pairs = new LineBuffer.Pairs()
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var ledArrayMap = DownloadBase.getLedArrayMaps(mapInfo, rootNetList, boardInfo);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    for (final var key : ledArrayMap.keySet())
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var pkg = currentBoard.fpga.getPackage().split(" ");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var currentBehavior = currentBoard.fpga.getUnusedPinsBehavior();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var behavior = switch (currentBehavior) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var detect = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var response = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var devices = getDevices(response);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var selection = Download.chooseBoard(devices);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var dev = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    for (var line : lines) {
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      var n = dev.size() + 1;
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var jicFile = ToplevelHdlGeneratorFactory.FPGA_TOP_LEVEL_NAME + ".jic";
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var prog = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var result = Download.execute(prog, null);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var FpgaDevice = stripPackageSpeedSuffix();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var ProgrammerSofFile = new File(VendorSoftware.getToolPath(VendorSoftware.VENDOR_ALTERA)).getParent()
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var prog = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var result = Download.execute(prog, null);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var FpgaDevice = boardInfo.fpga.getPart();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var index = FpgaDevice.indexOf("F");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var jic = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var result = Download.execute(jic, null);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var docFactory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var docBuilder = docFactory.newDocumentBuilder();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var cofFile = docBuilder.newDocument();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var rootElement = cofFile.createElement("cof");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var sofData = cofFile.createElement("sof_data");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var bitFile = cofFile.createElement("bit0");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var options = cofFile.createElement("options");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var advancedOptions = cofFile.createElement("advanced_options");
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var transformerFac = TransformerFactory.newInstance();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var transformer = transformerFac.newTransformer();
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var source = new DOMSource(cofFile);
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:      final var result = new StreamResult(new File(scriptPath + AlteraCofFile));
src/main/java/com/cburch/logisim/fpga/download/AlteraDownload.java:    final var namedElement = doc.createElement(elementName);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    final var rootSheet = myProject.getLogisimFile().getCircuit(topLevelSheet);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var steps = basicSteps;
src/main/java/com/cburch/logisim/fpga/download/Download.java:    for (var listener : listeners) {
src/main/java/com/cburch/logisim/fpga/download/Download.java:        var error = download();
src/main/java/com/cburch/logisim/fpga/download/Download.java:    final var root = myProject.getLogisimFile().getCircuit(topLevelSheet);
src/main/java/com/cburch/logisim/fpga/download/Download.java:      var error = download();
src/main/java/com/cburch/logisim/fpga/download/Download.java:      for (var stages = 0; stages < downloader.getNumberOfStages(); stages++) {
src/main/java/com/cburch/logisim/fpga/download/Download.java:        final var currentStage = downloader.performStep(stages);
src/main/java/com/cburch/logisim/fpga/download/Download.java:          final var result = execute(downloader.getStageMessage(stages), currentStage);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var DownloadBitfile = downloader.downloadToBoard();
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var executable = process.start();
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var is = executable.getInputStream();
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var isr = new InputStreamReader(is);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var br = new BufferedReader(isr);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var line = "";
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var is = executable.getInputStream();
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var isr = new InputStreamReader(is);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var br = new BufferedReader(isr);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var line = "";
src/main/java/com/cburch/logisim/fpga/download/Download.java:    final var name = myProject.getLogisimFile().getName();
src/main/java/com/cburch/logisim/fpga/download/Download.java:        var mapFile = new File(mapFileName);
src/main/java/com/cburch/logisim/fpga/download/Download.java:        var cmp = new ComponentMapParser(mapFile, myMappableResources, myBoardInformation);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    final var projectPath = getProjDir(topLevelSheet);
src/main/java/com/cburch/logisim/fpga/download/Download.java:    final var sourcePath = projectPath + AppPreferences.HdlType.get().toLowerCase() + File.separator;
src/main/java/com/cburch/logisim/fpga/download/Download.java:    var clkfreq = currentBoard.fpga.getClockFrequency();
src/main/java/com/cburch/logisim/fpga/download/Download.java:      var choices = new String[devices.size()];
src/main/java/com/cburch/logisim/fpga/download/Download.java:      for (var i = 0; i < devices.size(); i++) choices[i] = devices.get(i);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var myFile = myProject.getLogisimFile();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var rootSheet = myFile.getCircuit(circuitName);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var boardComponents = myBoardInformation.getComponents();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    for (final var key : boardComponents.keySet()) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var confirm =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var root = myProject.getLogisimFile().getCircuit(circuitName);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var sheetNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    var drcResult = Netlist.DRC_PASSED;
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    var projectDir =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var projectDir = getProjDir(selectedCircuit);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var rootSheet = myProject.getLogisimFile().getCircuit(selectedCircuit);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    for (final var hdlPath : HDLPaths) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var generatedHDLComponents = new HashSet<String>();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    var worker = rootSheet.getSubcircuitFactory().getHDLGenerator(rootSheet.getStaticAttributes());
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      final var ticker =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      final var clockGen =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      final var compName =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var top =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      for (var type : LedArrayDriving.DRIVING_STRINGS) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:          final var name = LedArrayGenericHdlGeneratorFactory.getSpecificHDLName(type);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      var dir = new File(dirPath);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var dir = new File(path);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var files = dir.listFiles();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    for (final var thisFile : files) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:        final var entityMask =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:        final var architectureMask =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var base =
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      final var thisDir = new File(dir);
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:      for (var theFiles : thisDir.listFiles()) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    final var ledArrayMaps = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    var hasMappedClockedArray = false;
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:    for (final var comp : maps.getIoComponentInformation().getComponents()) {
src/main/java/com/cburch/logisim/fpga/download/DownloadBase.java:          for (var pin = 0; pin < comp.getExternalPinCount(); pin++) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var stage0 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var createProjectFile = FileWriter.getFilePointer(scriptPath, CREATE_PROJECT_TCL);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var xdcFile = FileWriter.getFilePointer(xdcPath, XDC_FILE);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var generateBitstreamFile = FileWriter.getFilePointer(scriptPath, GENERATE_BITSTREAM_FILE);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var loadBitstreamFile = FileWriter.getFilePointer(scriptPath, LOAD_BITSTEAM_FILE);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var contents = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    for (final var entity : entities) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    for (final var architecture : architectures) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      final var clockPin = boardInfo.fpga.getClockPinLocation();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      final var clockSignal = TickComponentHdlGeneratorFactory.FPGA_CLOCK;
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      final var getPortsString = " [get_ports {" + clockSignal + "}]";
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:        final var clockIoStandard = IoStandards.BEHAVIOR_STRINGS[boardInfo.fpga.getClockStandard()];
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      final var clockFrequency = boardInfo.fpga.getClockFrequency();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      var clockPeriod = 1000000000.0 / (double) clockFrequency;
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    var openProjectPath = vivadoProjectPath + File.separator + VIVADO_PROJECT_NAME + ".xpr";
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var jtagPos = String.valueOf(boardInfo.fpga.getFpgaJTAGChainPosition());
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var lindex = "[lindex [get_hw_devices] " + jtagPos + "]";
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    for (final var key : mapInfo.getMappableResources().keySet()) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      final var map = mapInfo.getMappableResources().get(key);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:          final var netName = (map.isExternalInverted(i) ? "n_" : "") + map.getHdlString(i);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:          final var info = map.getFpgaInfo(i);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:            final var ioStandard = info.getIoStandard();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var LedArrayMap = DownloadBase.getLedArrayMaps(mapInfo, rootNetList, boardInfo);
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    for (final var key : LedArrayMap.keySet()) {
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var stage0 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/VivadoDownload.java:    final var stage1 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var part = boardInfo.fpga.getPart().toUpperCase();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      final var xilinx = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var usbtmcdevice = new File("/dev/usbtmc0").exists();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var bitfile = new File(sandboxPath + ToplevelHdlGeneratorFactory.FPGA_TOP_LEVEL_NAME + "." + bitfileExt);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var bitfileBuffer = new byte[BUFFER_SIZE];
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var bitfileBufferSize = 0;
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var usbtmc = new File("/dev/usbtmc0");
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var jtagPos = String.valueOf(boardInfo.fpga.getFpgaJTAGChainPosition());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var scriptFile = FileWriter.getFilePointer(scriptPath, SCRIPT_FILE);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var vhdlListFile = FileWriter.getFilePointer(scriptPath, VHDL_LIST_FILE);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var ucfFile = FileWriter.getFilePointer(ucfPath, UCF_FILE);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var downloadFile = FileWriter.getFilePointer(scriptPath, DOWNLOAD_FILE);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    for (var entity : entities) contents.add("{{hdlType}} work \"{{1}}\"", entity);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    for (var arch : architectures) contents.add("{{hdlType}} work \"{{1}}\"", arch);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var contents = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    var temp = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    for (var key : mapInfo.getMappableResources().keySet()) {
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      var map = mapInfo.getMappableResources().get(key);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      for (var i = 0; i < map.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:          final var info = map.getFpgaInfo(i);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var LedArrayMap = DownloadBase.getLedArrayMaps(mapInfo, rootNetList, boardInfo);
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    for (var key : LedArrayMap.keySet()) {
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var stage0 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var stage1 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var stage2 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      final var pinPullBehavior = switch (boardInfo.fpga.getUnusedPinsBehavior()) {
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:      final var fpga = boardInfo.fpga;
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var stage3 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var command = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var stage4 = new ProcessBuilder(command.get());
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var fpga = currentBoard.fpga;
src/main/java/com/cburch/logisim/fpga/download/XilinxDownload.java:    final var result = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:    var fpgaList = BoardDoc.getElementsByTagName(BoardWriterClass.BOARD_INFORMATION_SECTION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:    var frequency = -1L;
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:    final var thisFpga = fpgaList.item(0);
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:    final var fpgaParams = thisFpga.getChildNodes();
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:        final var clockAttrs = fpgaParams.item(i).getAttributes();
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:        final var unusedAttrs = fpgaParams.item(i).getAttributes();
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:        final var fpgaAttrs = fpgaParams.item(i).getAttributes();
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:      for (var i = 0; i < compList.getLength(); i++) {
src/main/java/com/cburch/logisim/fpga/file/BoardReaderClass.java:        final var newComp = new FpgaIoInformationContainer(compList.item(i));
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var root = boardInfo.createElement(BoardInfo.getBoardName());
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var fpgaInfo = boardInfo.createElement(BOARD_INFORMATION_SECTION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var comment = boardInfo.createComment("This section decribes the FPGA and its clock");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var clkInfo = boardInfo.createElement(CLOCK_INFORMATION_SECTION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var pin = boardInfo.createAttribute(CLOCK_SECTION_STRINGS[1]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var pull = boardInfo.createAttribute(CLOCK_SECTION_STRINGS[2]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var ios = boardInfo.createAttribute(CLOCK_SECTION_STRINGS[3]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var fpga = boardInfo.createElement(FPGA_INFORMATION_SECTION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var part = boardInfo.createAttribute(FPGA_SECTION_STRINGS[1]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var tech = boardInfo.createAttribute(FPGA_SECTION_STRINGS[2]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var box = boardInfo.createAttribute(FPGA_SECTION_STRINGS[3]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var speed = boardInfo.createAttribute(FPGA_SECTION_STRINGS[4]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var usbTmc = boardInfo.createAttribute(FPGA_SECTION_STRINGS[5]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var jtagPos = boardInfo.createAttribute(FPGA_SECTION_STRINGS[6]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var flashName = boardInfo.createAttribute(FPGA_SECTION_STRINGS[7]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var flashJtagPos = boardInfo.createAttribute(FPGA_SECTION_STRINGS[8]);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var unusedPins = boardInfo.createElement(UNUSED_PINS_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var components = boardInfo.createElement(COMPONENTS_SECTION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var compCmd =
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      for (final var comp : BoardInfo.getAllComponents()) {
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var writer = new ImageXmlFactory();
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var boardPicture = boardInfo.createElement(IMAGE_INFORMATION_STRING);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var pictCmd = boardInfo.createComment("This section hold the board picture");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var pictsize = boardInfo.createElement("PictureDimension");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var height = boardInfo.createAttribute("Height");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var codeTable = boardInfo.createElement("CompressionCodeTable");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var pixelData = boardInfo.createElement("PixelData");
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var tranFactory = TransformerFactory.newInstance();
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var aTransformer = tranFactory.newTransformer();
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var src = new DOMSource(boardInfo);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var dest = new StreamResult(new StringWriter());
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var tranFactory = TransformerFactory.newInstance();
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var aTransformer = tranFactory.newTransformer();
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var src = new DOMSource(boardInfo);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var file = new File(filename);
src/main/java/com/cburch/logisim/fpga/file/BoardWriterClass.java:      final var dest = new StreamResult(file);
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var fileName = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      final var outDir = new File(targetDirectory);
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      final var outFile = new File(fileName.toString());
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var fileName = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      final var outDir = new File(targetDirectory);
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      final var outFile = new File(fileName.toString());
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var headText =
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var headUrl = " " + BuildInfo.url;
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var headProj = " Project   : " + projName;
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:    final var headComp = " Component : " + compName;
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      final var output = new FileOutputStream(outfile);
src/main/java/com/cburch/logisim/fpga/file/FileWriter.java:      for (var thisLine : contents) {
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var thisLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var buttonLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    var screenWidth = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    var screenHeight = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var imageWidth = picturepanel.getWidth();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var imageHeight = picturepanel.getHeight();
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var imageBorderX = panel.getWidth() - imageWidth;
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var imageBorderY = panel.getHeight() - imageHeight;
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var zoomX = (screenWidth * 100) / imageWidth;
src/main/java/com/cburch/logisim/fpga/gui/BoardEditor.java:    final var zoomY = (screenHeight * 100) / imageHeight;
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    for (final var comp : board.getAllComponents()) {
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    for (final var listener : listeners) {
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    final var rect = defineRectangle.getBoardRectangle(scale);
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    var comp = defineRectangle.getIoInfo();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var result = (new IoComponentSelector(ioComps.getParentFrame())).run();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:    final var source = (JSlider) event.getSource();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var mySize = new Dimension(getWidth(), getHeight());
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var edit = ioComps.getHighligted();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var fc = new JFileChooser();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var retVal = fc.showOpenDialog(this);
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:        final var file = fc.getSelectedFile();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      var sel = unmappedList.getSelectedIndex();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:            final var clone = (FpgaIoInformationContainer) ioComps.getHighligted().clone();
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:      final var toBeRepainted = defineRectangle.resizeRemoveAndgetUpdate(e);
src/main/java/com/cburch/logisim/fpga/gui/BoardManipulator.java:        final var map = mappedList.getSelectedValue();
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:    final var fc = new JFileChooser(oldDirectory);
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:    final var retVal = fc.showOpenDialog(null);
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:      final var file = fc.getSelectedFile();
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:      final var fileName = file.getName();
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:      final var absoluteFileName = file.getPath();
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:      final var parse = new ComponentMapParser(file, mappableComponents, boardInfo);
src/main/java/com/cburch/logisim/fpga/gui/ComponentMapDialog.java:      final var result = parse.parseFile();
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    for (var freq : MenuSimulate.getTickFrequencyStrings())
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    final var newTopCircuit = myProject.getLogisimFile().getCircuit(circuitName);
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    final var savedDownloadFrequency = rootSheet.getDownloadFrequency();
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    final var savedSimFrequency = rootSheet.getTickFrequency();
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    final var selectedFrequency = (savedDownloadFrequency > 0) ? savedDownloadFrequency : savedSimFrequency;
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:    for (var i = 0; i < MenuSimulate.SUPPORTED_TICK_FREQUENCIES.length; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:      final var savedDownloadFrequency = rootSheet.getDownloadFrequency();
src/main/java/com/cburch/logisim/fpga/gui/FpgaClockPanel.java:      final var savedSimFrequency = rootSheet.getTickFrequency();
src/main/java/com/cburch/logisim/fpga/gui/FpgaCommander.java:    final var circuitName = Main.getCurrentCircuit().getName();
src/main/java/com/cburch/logisim/fpga/gui/FpgaCommander.java:    final var circuit = MyProject.getLogisimFile().getCircuit(circuitName);
src/main/java/com/cburch/logisim/fpga/gui/FpgaCommander.java:      final var boardName = circuit.getDownloadBoard();
src/main/java/com/cburch/logisim/fpga/gui/FpgaCommander.java:      final var boardIndex = AppPreferences.Boards.getBoardNames().indexOf(boardName);
src/main/java/com/cburch/logisim/fpga/gui/FpgaCommander.java:        final var circuitName = circuitsList.getSelectedItem().toString();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      for (var i = 0; i < nr; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var txt = new JTextField(6);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var txt = new JTextField(6);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var idx = (LocInputs.indexOf(txt));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var offset = 0;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var oldY = 0;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var maxY = -1;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    for (var i = 0; i < nr; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var LocText = new JLabel(S.get("FpgaIoLocation", PinLabels.get(i)));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var pinLabels = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var nrOfPins = 0;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var row = 0; row < nrOfRows; row++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          for (var col = 0; col < nrOfColumns; col++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var nrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfRows);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var nrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfColumns);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        var preamble = "";
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var rgb = 0; rgb < 3; rgb++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          for (var row = 0; row < nrOfRows; row++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            for (var col = 0; col < nrOfColumns; col++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var nrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfRows);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        var preamble = "";
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var id = i - nrBits;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var rgb = id / nrOfColumns;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var col = id % nrOfColumns;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var nrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfColumns);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        var preamble = "";
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var id = i - nrBits;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var rgb = id / nrOfRows;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            final var col = id % nrOfRows;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var rectPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var nrOfPins = new HashMap<Integer, Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var selWindow = new JDialog(IOcomps.getParentFrame(), info.getType() + " " + S.get("FpgaIoProperties"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var contents = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var driveInput = new JComboBox<>(DriveStrength.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var pullInput = new JComboBox<>(PullBehaviors.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var activeInput = new JComboBox<>(PinActivity.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var inputSize = new JComboBox<Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var outputSize = new JComboBox<Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var ioSize = new JComboBox<Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var rowSize = new JComboBox<Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var colSize = new JComboBox<Integer>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var eEncoding = new JComboBox<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var mapRotation = new JComboBox<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var locInputs = new ArrayList<JTextField>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var locOutputs = new ArrayList<JTextField>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var locIos = new ArrayList<JTextField>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var pinLabels = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var arrayPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var inputsPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var outputsPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var ioPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var abort = false;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var rectLocations = new ArrayList<JTextField>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var oldInputLocations = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var oldOutputLocations = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var oldIoLocations = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var myType = info.getType();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var myRotation = info.getMapRotation();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var MyRectangle = info.getRectangle();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    for (var cnt = 0; cnt < info.getNrOfPins(); cnt++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              var nr = (int) inputSize.getSelectedItem();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              for (var i = 0; i < nr; i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              var nr = (int) outputSize.getSelectedItem();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              for (var i = 0; i < nr; i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              var nr = (int) ioSize.getSelectedItem();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              for (var i = 0; i < nr; i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      var tf = new JTextField(5);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      for (var i = 1; i < 33; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      for (var val : LedArrayDriving.getDisplayStrings())
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var arr = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 1; i < 129; i++) inputSize.addItem(i);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      var nr = nrOfPins.get(INPUT_ID);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      for (var i = 0; i < nr; i++) pinLabels.add(IoComponentTypes.getOutputLabel(nr, 0, 0, i, myType));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 1; i < 129; i++) outputSize.addItem(i);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var nr = nrOfPins.get(OUTPUT_ID);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nr; i++) pinLabels.add(IoComponentTypes.getOutputLabel(nr, 0, 0, i, myType));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 1; i < 129; i++) ioSize.addItem(i);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var nr = nrOfPins.get(IO_ID);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      for (var i = 0; i < nr; i++) pinLabels.add(IoComponentTypes.getIoLabel(nr, i, myType));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var LabText = new JLabel(S.get("FpgaIoLabel"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var LabelInput = new JTextField(6);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var StandardText = new JLabel(S.get("FpgaIoStandard"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var StandardInput = new JComboBox<>(IoStandards.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var DriveText = new JLabel(S.get("FpgaIoStrength"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var PullText = new JLabel(S.get("FpgaIoPull"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var ActiveText = new JLabel(S.get("FpgaIoActivity", myType));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:      final var delButton = new JButton();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var OkayButton = new JButton(S.get("FpgaBoardDone"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var CancelButton = new JButton(S.get("FpgaBoardCancel"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        final var NrPins = nrOfPins.get(INPUT_ID) + nrOfPins.get(OUTPUT_ID) + nrOfPins.get(IO_ID);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        var correct = true;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins.get(INPUT_ID); i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins.get(OUTPUT_ID); i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:        for (var i = 0; i < nrOfPins.get(IO_ID); i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            var values = new int[4];
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:            for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:                final var msgKey = switch (i) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:              final var update = new Rectangle(values[0], values[1], values[2], values[3]);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          var idx = 0;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          for (var i = 0; i < nrOfPins.get(INPUT_ID); i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          for (var i = 0; i < nrOfPins.get(OUTPUT_ID); i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          for (var i = 0; i < nrOfPins.get(IO_ID); i++)
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:          final var rotation = switch (mapRotation.getSelectedIndex()) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var selWindow = new JDialog(panel, S.get("FpgaBoardFpgaProp"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var ClockPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var FreqText = new JLabel(S.get("FpgaBoardClkFreq"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var FreqPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var FreqLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var FreqInput = new JTextField(10);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var StandardInput = new JComboBox<>(freqStrs);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var LocText = new JLabel(S.get("FpgaBoardClkLoc"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var LocInput = new JTextField();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var PullText = new JLabel(S.get("FpgaBoardClkPul"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var PullInput = new JComboBox<>(PullBehaviors.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var StandardText = new JLabel(S.get("FpgaBoardClkStd"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var StdInput = new JComboBox<>(IoStandards.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var fpgaPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var VendorText = new JLabel(S.get("FpgaBoardFpgaVend"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var vendorInput = new JComboBox<>(VendorSoftware.VENDORS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var familyText = new JLabel(S.get("FpgaBoardFpgaFam"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var familyInput = new JTextField();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var PartText = new JLabel(S.get("FpgaBoardFpgaPart"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var partInput = new JTextField();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var BoxText = new JLabel(S.get("FpgaBoardFpgaPack"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var boxInput = new JTextField();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var speedText = new JLabel(S.get("FpgaBoardFpgaSG"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var speedInput = new JTextField();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var unusedPinsText = new JLabel(S.get("FpgaBoardPinUnused"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var unusedPinsInput = new JComboBox<>(PullBehaviors.BEHAVIOR_STRINGS);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var jtagPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var posText = new JLabel(S.get("FpgaBoardJtagLoc"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var PosInput = new JTextField(5);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var FlashPosText = new JLabel(S.get("FpgaBoardFlashLoc"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var flashPosInput = new JTextField(5);
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var miscPanel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var flashName = new JLabel(S.get("FpgaBoardFlashType"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var flashNameInput = new JTextField("");
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var usbTmc = new JCheckBox(S.get("FpgaBoardUSBTMC"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var dialogLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var cancelButton = new JButton(S.get("FpgaBoardCancel"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    final var saveButton = new JButton(S.get("FpgaBoardDone"));
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var saveSettings = false;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var result = 0L;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var multiplier = 1L;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    var dec_mult = false;
src/main/java/com/cburch/logisim/fpga/gui/FpgaIoInformationSettingsDialog.java:    for (var i = 0; i < chars.length(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    var caret = (DefaultCaret) textAreaInfo.getCaret();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var textMessages = new JScrollPane(textAreaInfo);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var textWarnings = new JScrollPane(warnings);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var textErrors = new JScrollPane(errors);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var textConsole = new JScrollPane(textAreaConsole);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var line = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    for (final var mes : infoMessages) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var line = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    for (final var mes : infoMessages) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var idx = indexOfComponent(panelInfos);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var idx = indexOfComponent(panelWarnings);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var idx = indexOfComponent(panelErrors);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var lines = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    for (final var mes : consoleMessages) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var lines = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    for (final var mes : consoleMessages) {
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var idx = indexOfComponent(panelConsole);
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var rect = getBounds();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var sourceIsWarningsWindow =
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:    final var sourceIsErrorsWindow =
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:      var idx = -1;
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:      var idx = -1;
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:      var idx = getComponentCount();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:      var idx = getComponentCount();
src/main/java/com/cburch/logisim/fpga/gui/FpgaReportTabbedPane.java:      final var comps = new HashSet<>(Arrays.asList(getComponents()));
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var content = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    var pane = createInputPane();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var scroll = new JScrollPane(content);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var buttonBar = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var map = mapInfo.getMap();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var integer : InputMapSet) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrInputs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrInputs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var sels = new JComboBox<String>();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        for (var integer : InputMapSet)
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var map = mapInfo.getMap();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var integer : OutputMapSet) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrOutputs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrOutputs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var sels = new JComboBox<String>();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        for (var integer : OutputMapSet)
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var map = mapInfo.getMap();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var panel = new JPanel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var integer : IOMapSet) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrIOs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; i < map.nrIOs(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var sels = new JComboBox<String>();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        for (var integer : IOMapSet)
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var mapToAdd = new JLabel();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    var pinid = -1;
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0;
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0;
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0; IOMultipleMultiple != null && pinid < 0 && i < IOMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = InputMapSet.get(InputSingleMultiple.getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0; InputMultipleMultiple != null && i < InputMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = InputMapSet.get(InputMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = OutputMapSet.get(OutputSingleMultiple.getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0; OutputMultipleMultiple != null && i < OutputMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = OutputMapSet.get(OutputMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = IOMapSet.get(IOSingleMultiple.getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var i = 0; IOMultipleMultiple != null && i < IOMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      final var selId = IOMapSet.get(IOMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:    for (var jLabel : MapTo)
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = Math.max(mapInfo.getPin(), 0);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; InputMultipleMultiple != null && i < InputMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pinId = InputMapSet.get(InputMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = mapInfo.getPin() < 0 ? map.nrInputs() : mapInfo.getPin();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = map.nrInputs() + OutputMultipleSingle.getSelectedIndex() - 1;
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; OutputMultipleMultiple != null && i < OutputMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pinId = OutputMapSet.get(OutputMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = mapInfo.getPin() < 0 ? map.nrInputs() + map.nrOutputs() : mapInfo.getPin();
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = map.nrInputs() + map.nrOutputs() + IOMultipleSingle.getSelectedIndex() - 1;
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:      for (var i = 0; IOMultipleMultiple != null && i < IOMultipleMultiple.size(); i++) {
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pinId = IOMapSet.get(IOMultipleMultiple.get(i).getSelectedIndex() - 1);
src/main/java/com/cburch/logisim/fpga/gui/PartialMapDialog.java:        final var pin = map.nrInputs() + map.nrOutputs() + i;
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    final var midValue = min + ((max - min) >> 1);
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    final var orig = super.getSize();
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    final var labelTable = new Hashtable<Integer, JLabel>();
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    var label = new JLabel(getId(min));
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    final var hun = value / 100;
src/main/java/com/cburch/logisim/fpga/gui/ZoomSlider.java:    final var tens = (value % 100) / 10;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var className = getClass().toString().replace('.', ':').replace(' ', ':');
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var parts = className.split(":");
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var components = getComponentDeclarationSection(theNetlist, attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var typedWires = myTypedWires.getTypedWires();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var mySignals = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var wire : myWires.wireKeySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var reg : myWires.registerKeySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var wire : typedWires.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var sortedSignals = new TreeSet<>(mySignals.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var signal : sortedSignals)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var preamble = String.format("module %s( ", componentName);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var indenting = " ".repeat(preamble.length());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var body = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var ports = new TreeSet<>(myPorts.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var port : myPorts.keySet())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var first = true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var maxNrOfPorts = ports.size();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var port : ports) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var end = maxNrOfPorts == 0 ? " );" : ",";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var parameters = new TreeSet<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var paramId : myParametersList.keySet(attrs)) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var paramName = myParametersList.isPresentedByInteger(paramId, attrs)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var param : parameters)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var inputs = myPorts.keySet(Port.INPUT);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var input : myPorts.keySet(Port.INPUT)) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var outputs = myPorts.keySet(Port.OUTPUT);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var inouts = myPorts.keySet(Port.INOUT);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var wires = myWires.wireKeySet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var regs = myWires.registerKeySet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var typedWires = myTypedWires.getTypedWires();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var sortedWires = new TreeSet<>(typedWires.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var wire : sortedWires)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var wire : sortedWires) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var typeName = typedWires.get(wire);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var parameterMap = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var portMap = getPortMap(nets, componentInfo);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var componentHdlName =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var compName = StringUtil.isNotEmpty(name) ? name : componentHdlName;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var thisInstanceIdentifier = getInstanceIdentifier(componentInfo, componentId);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var attrs = comp.getComponent().getAttributeSet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    var tabLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    var first = true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var generic : parameterMap.keySet())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var currentGeneric = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var genericNames = new TreeSet<>(parameterMap.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var nrOfGenerics = genericNames.size();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var generic : genericNames) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var preamble = currentGeneric == 0 ? "{{generic}} {{map}} (" : " ".repeat(13);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var port : portMap.keySet())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        var currentPort = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var portNames = new TreeSet<>(portMap.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var nrOfPorts = portNames.size();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (final var port : portNames) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var preamble = currentPort == 0 ? "{{port}} {{map}} (" : " ".repeat(10);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (var parameter : parameterMap.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        for (var port : portMap.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var MappedSignal = portMap.get(port);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:            final var vectorList = MappedSignal.split(",");
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:            var tabSize = oneLine.length();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:            for (var vectorEntries = 0; vectorEntries < vectorList.length; vectorEntries++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var attrs = comp.getComponent().getAttributeSet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var label = attrs.getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var result = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var compName = componentInfo.getComponent().getFactory().getDisplayName();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var attrs = componentInfo.getComponent().getAttributeSet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (var port : myPorts.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          var gatedClock = false;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          var hasClock = true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          var clockAttr = attrs.containsAttribute(StdAttr.EDGE_TRIGGER)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var activeLow = StdAttr.TRIG_LOW.equals(clockAttr) || StdAttr.TRIG_FALLING.equals(clockAttr);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var compPinId = myPorts.getComponentPortId(port);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var clockNetName = Hdl.getClockNetName(componentInfo, compPinId, nets);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:              final var clockIndex = activeLow ? ClockHdlGeneratorFactory.NEGATIVE_EDGE_TICK_INDEX : ClockHdlGeneratorFactory.POSITIVE_EDGE_TICK_INDEX;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:              final var clockIndex = activeLow ? ClockHdlGeneratorFactory.INVERTED_DERIVED_CLOCK_INDEX : ClockHdlGeneratorFactory.DERIVED_CLOCK_INDEX;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var fixedMap = myPorts.getFixedMap(port);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var mainDirectory = AppPreferences.HdlType.get().toLowerCase();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var directoryName = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer().addVhdlKeywords();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var myParameters = new HashMap<String, Boolean>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var generic : myParametersList.keySet(attrs)) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var parameterName = myParametersList.get(generic, attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var myGenerics = new TreeSet<>(myParameters.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var currentGenericId = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var thisGeneric : myGenerics) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var nrOfEntries = myPorts.keySet().size();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var tickers = new TreeSet<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var portName : myPorts.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:          final var tickerName = myPorts.getTickName(portName);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var nrOfPortBits = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var firstEntry = true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var currentEntry = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      var direction = (!myPorts.keySet(Port.INOUT).isEmpty()) ? Vhdl.getVhdlKeyword("IN   ") : Vhdl.getVhdlKeyword("IN ");
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var myInputs = new TreeSet<>(myPorts.keySet(Port.INPUT));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var input : myInputs) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var type = getTypeIdentifier(nrOfPortBits, attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var myInOuts = new TreeSet<>(myPorts.keySet(Port.INOUT));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var inout : myInOuts) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var type = getTypeIdentifier(nrOfPortBits, attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var myOutputs = new TreeSet<>(myPorts.keySet(Port.OUTPUT));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      for (final var output : myOutputs) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:        final var type = getTypeIdentifier(nrOfPortBits, attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var fmt = firstEntry
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer().addVhdlKeywords();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var signalSet = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    for (final var input : signals) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var nrOfBits = isPort ? myPorts.contains(input) ? myPorts.get(input, attrs) : 1 : myWires.get(input);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    final var sortedSignals = new TreeSet<>(signalSet.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    for (final var signal : sortedSignals)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:    for (final var signal : sortedSignals) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/AbstractHdlGeneratorFactory.java:      final var type = signalSet.get(signal);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      var fillValue = (floatingPinTiedToGround) ? "0" : "1";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      var hexFillValue = (floatingPinTiedToGround) ? "0" : "F";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var nrHexDigits = nrOfBits / 4;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var nrSingleBits = nrOfBits % 4;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var hexDigits = new String[nrHexDigits];
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var singleBits = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var shiftValue = value;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    for (var hexIndex = nrHexDigits - 1; hexIndex >= 0; hexIndex--) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      var hexValue = shiftValue & 0xFL;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var hexValue = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    for (var hexIndex = 0; hexIndex < nrHexDigits; hexIndex++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var mask = (nrSingleBits == 0) ? 0 : 1L << (nrSingleBits - 1);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var vhdlTicks = (nrOfBits == 1) ? "'" : "\"";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var netName = "";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var floatingValue = floatingNetTiedToGround ? zeroBit() : oneBit();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var thisEnd = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var isOutput = thisEnd.isOutputEnd();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:        final var solderPoint = thisEnd.get((byte) 0);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var busName = "";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var thisEnd = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var isOutput = thisEnd.isOutputEnd();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var nrOfBits = thisEnd.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:          final var connectedNet = thisEnd.get((byte) bitindex).getParentNet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:          final var connectedNetBitIndex = thisEnd.get((byte) bitindex).getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var connectionInformation = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var nrOfBits = connectionInformation.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var connectedNet = connectionInformation.get((byte) 0).getParentNet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var connectionInformation = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var nrOfBits = connectionInformation.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var connectedNet = connectionInformation.get((byte) 0).getParentNet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var contents = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      final var endData = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:        final var connectedNet = endData.get((byte) 0).getParentNet();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:        final var ConnectedNetBitIndex = endData.get((byte) 0).getParentNetBitIndex();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:        final var clocksourceid = theNets.getClockSourceId(
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var outFile = FileWriter.getFilePointer(targetDirectory, componentName, true);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var outFile = FileWriter.getFilePointer(targetDirectory, componentName, false);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var netMap = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var connectionInformation = comp.getEnd(endIndex);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var isOutput = connectionInformation.isOutputEnd();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var nrOfBits = connectionInformation.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      var connected = false;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:      for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            final var sourceNetName = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:              final var solderPoint = connectionInformation.get((byte) bit);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            final var seperateSignals = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:              final var solderPoint = connectionInformation.get((byte) bit);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            final var vector = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:            for (var bit = nrOfBits; bit > 0; bit--) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    var maxNameLength = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    for (var wire : wires.keySet())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var sortedWires = new TreeSet<>(wires.keySet());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    for (var wire : sortedWires)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var lines = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Hdl.java:    final var lines = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            for (var arg = 0; arg < 2; arg++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          for (final var key : map.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          for (final var arg : args) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      final var nrOfBits = (attrs != null) && attrs.containsAttribute(attributeToCheckForBus) ? attrs.getValue(attributeToCheckForBus).getWidth() : 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      var totalValue = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      var selectedValue = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      final var noReqAttrExMsg = "Component has not the required attribute";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      final var notAnIntExMsg = "Requested attribute is not an Integer";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          final var value = attrs.getValue(attributesList.get(0));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          for (var attr : attributesList) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            final var intValue = attrs.getValue(attr);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          for (var attr : attributesList) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            final var intValue = attrs.getValue(attr);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          final var logValue = Math.log(totalValue) / Math.log(2D);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          final var intValue = attrs.getValue(attributesList.get(0));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          final var nrOfInputs = attrs.getValue(GateAttributes.ATTR_INPUTS);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          var bubbleMask = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          var mask = 1L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:          for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            final var realIndex = Hdl.isVhdl() ? nrOfInputs - i - 1 : i;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            final var inputIsInverted = attrs.getValue(new NegateAttribute(realIndex, null));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:            for (final var attr : attributesList) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:                final var attrValue = attrs.getValue(attr);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      var nrOfVectorBits = -1;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:      var value = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    final var newParameter = new ParameterInfo(name, id, type, args);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    final var contents = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:        final var value = parameter.getParameterValue(attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    var count = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    final var keySet = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlParameters.java:    for (final var parameter : myParameters) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:        final var value = attrs.getValue(myBitWidthAttribute);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:        var nrOfBits = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var realType = Port.CLOCK.equals(type) ? Port.INPUT : type;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var newPort = new PortInfo(realType, name, nrOfBits, fixedMap);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var realType = Port.CLOCK.equals(type) ? Port.INPUT : type;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var newPort = new PortInfo(realType, name, nrOfBits, compPinId);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var realType = Port.CLOCK.equals(type) ? Port.INPUT : type;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var newPort = new PortInfo(realType, name, nrOfBits, compPinId, pullToZero);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var realType = Port.CLOCK.equals(type) ? Port.INPUT : type;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var newPort = new PortInfo(realType, name, nrOfBits, compPinId, nrOfBitsAttr);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    final var keySet = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts) if (port.myName.equals(name)) return port.getNrOfBits(attrs);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:      for (final var port : myPorts) if (port.myName.equals(name)) return port.myFixedMap;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts) if (port.myName.equals(name)) return port.myComponentPinId;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts) if (port.myName.equals(name)) return port.myPullToZero;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts) if (port.myName.equals(name)) return true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts) if (port.myName.equals(name)) return port.isClock;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlPorts.java:    for (final var port : myPorts)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      for (var item = 0; item < myEntries.size(); item++)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      var first = true;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      for (final var entry : myEntries) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:    final var myEnum = (HdlEnum) myTypes.get(identifier);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:    final var defs = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:    for (final var entry : myTypes.keySet()) defs.add(myTypes.get(entry).getTypeDefinition());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:    final var contents = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:    for (final var wire : myWires.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlTypes.java:      final var typeId = myWires.get(wire);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    for (var wire : wires.keySet()) myWires.add(new Wire(WIRE, wire, wires.get(wire)));
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    final var keys = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    for (var wire : myWires) if (wire.isWire()) keys.add(wire.getName());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    final var keys = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    for (var wire : myWires) if (!wire.isWire()) keys.add(wire.getName());
src/main/java/com/cburch/logisim/fpga/hdlgenerator/HdlWires.java:    for (var wire : myWires) if (wire.getName().equals(wireName)) return wire.getNrOfBits();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    final var reloadValueAcc = ((double) fpgaClockFrequency) / tickFrequency;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    var reloadValue = (long) reloadValueAcc;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    var nrOfBits = 0;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    var calcValue = reloadValue;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    final var res = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    for (var port : myPorts.keySet())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/TickComponentHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    var hasScanningLedArray = false;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    var hasLedArray = false;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nets = topLevel.getNetList();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var ledArrayTypesUsed = new HashMap<String, Boolean>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var ledArrays = new ArrayList<FpgaIoInformationContainer>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfClockTrees = nets.numberOfClockTrees();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfInputBubbles = nets.getNumberOfInputBubbles();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfInOutBubbles = nets.numberOfInOutBubbles();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfOutputBubbles = nets.numberOfOutputBubbles();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfInputPorts = nets.getNumberOfInputPorts();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfInOutPorts = nets.numberOfInOutPorts();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfOutputPorts = nets.numberOfOutputPorts();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var comp : myIOComponents.getIoComponentInformation().getComponents()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (var clockId = 0; clockId < nrOfClockTrees; clockId++)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (var input = 0; input < nrOfInputPorts; input++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var inputName =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var nrOfBits = nets.getInputPin(input).getComponent().getEnd(0).getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (var inout = 0; inout < nrOfInOutPorts; inout++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var ioName =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var nrOfBits = nets.getInOutPin(inout).getComponent().getEnd(0).getWidth().getWidth();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (var output = 0; output < nrOfOutputPorts; output++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var outputName =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var nrOfBits =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var ledArray : myLedArrays) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var ports =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (final var port : ports.keySet()) myPorts.add(Port.OUTPUT, port, ports.get(port), null);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var in : myIOComponents.getMappedInputPinNames())
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var io : myIOComponents.getMappedOutputPinNames()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var io : myIOComponents.getMappedIoPinNames()) myPorts.add(Port.INOUT, io, 1, null);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var components = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfClockTrees = theNetlist.numberOfClockTrees();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var ticker = new TickComponentHdlGeneratorFactory(fpgaClockFrequency, tickFrequency);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var clockWorker =
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var type : LedArrayDriving.DRIVING_STRINGS) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var worker = LedArrayGenericHdlGeneratorFactory.getSpecificHDLGenerator(type);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var name = LedArrayGenericHdlGeneratorFactory.getSpecificHDLName(type);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var worker = new CircuitHdlGeneratorFactory(myCircuit);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var nrOfClockTrees = theNetlist.numberOfClockTrees();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (final var key : myIOComponents.getMappableResources().keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var comp = myIOComponents.getMappableResources().get(key);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      var index = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var ticker = new TickComponentHdlGeneratorFactory(fpgaClockFrequency, tickFrequency);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (final var clockGen : theNetlist.getAllClockSources()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var thisClock = new netlistComponent(clockGen);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var dut = new CircuitHdlGeneratorFactory(myCircuit);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      for (final var array : myLedArrays) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:    for (var i = 0; i < component.getNrOfPins(); i++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var preamble = component.isExternalInverted(i) ? "n_" : "";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:      final var operator = component.isExternalInverted(i) ? Hdl.notOperator() : "";
src/main/java/com/cburch/logisim/fpga/hdlgenerator/ToplevelHdlGeneratorFactory.java:        final var destination = component.getHdlSignalName(i);
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Vhdl.java:    final var keywords = new TreeSet<String>();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Vhdl.java:    for (final var keyword : VHDL_KEYWORDS)
src/main/java/com/cburch/logisim/fpga/hdlgenerator/Vhdl.java:    final var spaceStrippedKeyword = keyword.replace(" ", "").toLowerCase();
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:    var result = 0L;
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:    for (var charIndex = 0; charIndex < binairyValue.length(); charIndex++) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:      final var character = binairyValue.charAt(charIndex) - '0';
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:    for (final var thisCase : myCases.keySet()) {
src/main/java/com/cburch/logisim/fpga/hdlgenerator/WithSelectHdlGenerator.java:      final var value = myCases.get(thisCase);
src/main/java/com/cburch/logisim/fpga/prefs/FpgaOptions.java:        final var isVhdl = AppPreferences.HdlType.get().equals(HdlGeneratorFactory.VHDL);
src/main/java/com/cburch/logisim/fpga/prefs/FpgaOptions.java:    final var isVhdl = AppPreferences.HdlType.get().equals(HdlGeneratorFactory.VHDL);
src/main/java/com/cburch/logisim/fpga/prefs/SoftwaresOptions.java:      final var source = ae.getSource();
src/main/java/com/cburch/logisim/fpga/prefs/SoftwaresOptions.java:    final var sep = new JSeparator(JSeparator.HORIZONTAL);
src/main/java/com/cburch/logisim/fpga/prefs/SoftwaresOptions.java:    final var layout = new GridBagLayout();
src/main/java/com/cburch/logisim/fpga/prefs/SoftwaresOptions.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/fpga/prefs/SoftwaresOptions.java:    var gridY = 0;
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var parts =
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var ret = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var file = new File(element);
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var ret = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var fileList = dir.listFiles();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    for (final var file : fileList) {
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:          final var fileName = file.getCanonicalPath();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:          final var accept = pattern.matcher(fileName).matches() && fileName.contains(match);
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var ret = new ArrayList<String>();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var entries = zf.entries();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:      final var ze = entries.nextElement();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:      final var fileName = ze.getName();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:      final var accept = pattern.matcher(fileName).matches() && fileName.contains(match);
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var classPath = System.getProperty("java.class.path", File.pathSeparator);
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var classPathElements = classPath.split(Pattern.quote(File.pathSeparator));
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var pattern = Pattern.compile(".*.xml");
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    for (final var element : classPathElements) {
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    for (final var board : definedBoards) {
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    final var ret = new SortedArrayList<String>();
src/main/java/com/cburch/logisim/fpga/settings/BoardList.java:    for (final var board : definedBoards) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var objects = model.getObjectsFromBottom();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    for (var i = objects.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var circState = circuitState;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var width = bounds.getX() + bounds.getWidth() + BOUNDS_BUFFER;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var height = bounds.getY() + bounds.getHeight() + BOUNDS_BUFFER;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var old = oldPreferredSize;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var circuit = circuitState.getCircuit();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var max = getMaxIndex(getModel());
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var requests = reorder.getReorderRequests();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var mod = new ArrayList<ReorderRequest>(requests.size());
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      var changed = false;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      var movedToMax = false;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      for (final var singleRequest : requests) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:        final var obj = singleRequest.getObject();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:            final var from = singleRequest.getFromIndex();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var cur = addAction.getDestinationIndex();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var max = getMaxIndex(getModel());
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var man = popupManager;
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var zoom = grid.getZoomFactor();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var gfxScaled = g.create();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var zoom = grid.getZoomFactor();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var oldx = e.getX();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var oldy = e.getY();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var newx = (int) Math.round(e.getX() / zoom);
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var newy = (int) Math.round(e.getY() / zoom);
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var circuit = circuitState.getCircuit();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:    final var oldModel = super.getModel();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:      final var prop = evt.getPropertyName();
src/main/java/com/cburch/logisim/gui/appear/AppearanceCanvas.java:        final var t = getTool();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var model = canvas.getModel();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var handle = sel.getSelectedHandle();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var selEmpty = sel.isEmpty();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var canChange = proj.getLogisimFile().contains(circ);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var clipExists = !Clipboard.isEmpty();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    var selHasRemovable = false;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    for (final var o : sel.getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      final var zs = ZOrder.getZIndex(sel.getSelected(), canvas.getModel());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      var zMin = Integer.MAX_VALUE;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      var zMax = Integer.MIN_VALUE;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      var count = 0;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      for (final var entry : zs.entrySet()) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      final var maxPoss = AppearanceCanvas.getMaxIndex(canvas.getModel());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    var canAddCtrl = false;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    var canRemCtrl = false;
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var handle = sel.getSelectedHandle();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      final var o = handle.getObject();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var n = sel.getSelected().size();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var select = new ArrayList<CanvasObject>(n);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var remove = new ArrayList<CanvasObject>(n);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    for (final var obj : sel.getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var n = sel.getSelected().size();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var select = new ArrayList<CanvasObject>(n);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var clones = new ArrayList<CanvasObject>(n);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    for (final var obj : sel.getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:        final var copy = obj.clone();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var act = ModelReorderAction.createLower(canvas.getModel(), canvas.getSelection().getSelected());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var act = ModelReorderAction.createLowerBottom(canvas.getModel(), canvas.getSelection().getSelected());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var clip = Clipboard.get();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var contents = clip.getElements();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var add = new ArrayList<CanvasObject>(contents.size());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    for (final var obj : contents) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var raw = canvas.getModel().getObjectsFromBottom();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var cur = new MatchingSet<>(raw);
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      for (final var obj : add) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      for (final var obj : add) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    var anchorLocation = clip.getAnchorLocation();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var prop = e.getPropertyName();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      final var oldModel = (CanvasModel) e.getOldValue();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:      final var newModel = (CanvasModel) e.getNewValue();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var act = ModelReorderAction.createRaise(canvas.getModel(), canvas.getSelection().getSelected());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var act = ModelReorderAction.createRaiseTop(canvas.getModel(), canvas.getSelection().getSelected());
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var handle = sel.getSelectedHandle();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditHandler.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/AppearanceEditPopup.java:    final var value = enabled.get(item);
src/main/java/com/cburch/logisim/gui/appear/AppearanceSelection.java:    for (final var obj : shapes) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:    final var rawItems = new ArrayList<ToolbarItem>();
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:    for (final var tool : tools) {
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:    final var item = (ToolbarToolItem) items.get(0);
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:      final var tool = toolItem.getTool();
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:      final var tool = toolItem.getTool();
src/main/java/com/cburch/logisim/gui/appear/AppearanceToolbarModel.java:    final var prop = e.getPropertyName();
src/main/java/com/cburch/logisim/gui/appear/AppearanceView.java:    final var selectTool = new SelectTool();
src/main/java/com/cburch/logisim/gui/appear/AppearanceView.java:    final var ssTool = new ShowStateTool(this, canvas, attrs);
src/main/java/com/cburch/logisim/gui/appear/AppearanceView.java:    var ret = attrTableManager;
src/main/java/com/cburch/logisim/gui/appear/CanvasActionAdapter.java:      for (final var obj : action.getObjects()) {
src/main/java/com/cburch/logisim/gui/appear/CanvasActionAdapter.java:      final var xn = new ActionTransaction(true);
src/main/java/com/cburch/logisim/gui/appear/CanvasActionAdapter.java:      final var xn = new ActionTransaction(false);
src/main/java/com/cburch/logisim/gui/appear/CanvasActionAdapter.java:      final var accessMap = new HashMap<Circuit, Integer>();
src/main/java/com/cburch/logisim/gui/appear/CanvasActionAdapter.java:      for (final var supercirc : circuit.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    final var renderer = new CheckBoxNodeRenderer();
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    var parent = (DefaultMutableTreeNode) parentPath.getLastPathComponent();
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    var checked = ((CheckBoxNodeData) node.getUserObject()).isChecked();
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    for (final var e = node.depthFirstEnumeration(); e.hasMoreElements(); ) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:      final var n = (DefaultMutableTreeNode) (e.nextElement());
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    var foundCheck = false;
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    for (final var e = parent.children(); !foundCheck && e.hasMoreElements(); ) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:      final var child = (DefaultMutableTreeNode) (e.nextElement());
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    for (final var e = root.postorderEnumeration(); e.hasMoreElements(); ) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:      final var node = (DefaultMutableTreeNode) (e.nextElement());
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    for (final var path : paths) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:      final var treeNode = (DefaultMutableTreeNode) (path.getLastPathComponent());
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    final var paths = new ArrayList<TreePath>();
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    final var root = (DefaultMutableTreeNode) getModel().getRoot();
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    for (final var e = root.preorderEnumeration(); e.hasMoreElements(); ) {
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:      final var n = (DefaultMutableTreeNode) (e.nextElement());
src/main/java/com/cburch/logisim/gui/appear/CheckBoxTree.java:    final var n = (DefaultMutableTreeNode) (path.getLastPathComponent());
src/main/java/com/cburch/logisim/gui/appear/Clipboard.java:    final var old = current;
src/main/java/com/cburch/logisim/gui/appear/ClipboardActions.java:    final var contents = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/gui/appear/ClipboardActions.java:    final var aff = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/gui/appear/ClipboardActions.java:    for (final var obj : canvas.getSelection().getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var ports = new HashSet<AppearancePort>();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    for (final var o : canvas.getSelection().getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    for (final var obj : canvas.getSelection().getSelected()) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var cur = curPopup;
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    for (final var obj : canvas.getModel().getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var start = dragStart;
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var sincePopup = System.currentTimeMillis() - curPopupTime;
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var sincePopup = System.currentTimeMillis() - curPopupTime;
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var act = e.getAction();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:      final var shapes = shouldShowPopup(e.getAffected());
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    var found = false;
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    for (final var obj : add) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:      final var hilight = new HashSet<CanvasObject>();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:      final var ports = getSelectedPorts();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var circuitState = canvas.getCircuitState();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var pins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var elts = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    for (final var shape : shapes) {
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var owner = canvasPane.getViewport();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var ownerLoc = owner.getLocationOnScreen();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var ownerDim = owner.getSize();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var layoutDim = new Dimension((int) (ownerDim.getWidth() - 10.0), (int) (ownerDim.getHeight() / 2));
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var layout = new LayoutThumbnail(layoutDim);
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var x = ownerLoc.x + Math.max(0, ownerDim.width - layoutDim.width - 5);
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var y = ownerLoc.y + Math.max(0, ownerDim.height - layoutDim.height - 5);
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var factory = PopupFactory.getSharedInstance();
src/main/java/com/cburch/logisim/gui/appear/LayoutPopupManager.java:    final var popup = factory.getPopup(canvasPane.getViewport(), layout, x, y);
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var circuit = circuitState.getCircuit();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var bounds = circuit.getBounds(g);
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var size = getSize();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var scaleX = (double) (size.width - 2 * BORDER) / bounds.getWidth();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var scaleY = (double) (size.height - 2 * BORDER) / bounds.getHeight();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var scale = Math.min(1.0, Math.min(scaleX, scaleY));
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var gfxCopy = g.create();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var borderX = (int) ((size.width - bounds.getWidth() * scale) / 2);
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var borderY = (int) ((size.height - bounds.getHeight() * scale) / 2);
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:      final var context = new ComponentDrawContext(this, circuit, circuitState, g, gfxCopy);
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:        final var width = Math.max(4, (int) ((2 / scale) + 0.5));
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:        for (final var port : ports) {
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var b = port.getBounds();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:        final var width = Math.max(4, (int) ((2 / scale) + 0.5));
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:        for (final var elt : elts) {
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var b = elt.getBounds();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var x = b.getX();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var y = b.getY();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var w = b.getWidth();
src/main/java/com/cburch/logisim/gui/appear/LayoutThumbnail.java:          final var h = b.getHeight();
src/main/java/com/cburch/logisim/gui/appear/ResetAppearanceTool.java:    final var appearance = canvas.getCircuit().getAppearance();
src/main/java/com/cburch/logisim/gui/appear/RevertAppearanceAction.java:    final var xn = new ActionTransaction(true);
src/main/java/com/cburch/logisim/gui/appear/RevertAppearanceAction.java:    final var xn = new ActionTransaction(false);
src/main/java/com/cburch/logisim/gui/appear/RevertAppearanceAction.java:      final var accessMap = new HashMap<Circuit, Integer>();
src/main/java/com/cburch/logisim/gui/appear/RevertAppearanceAction.java:      for (final var superCircuit : circuit.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/gui/appear/RevertAppearanceAction.java:      final var appear = circuit.getAppearance();
src/main/java/com/cburch/logisim/gui/appear/SelectionAction.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/SelectionAction.java:    final var anchor = findAnchor(canvasModel);
src/main/java/com/cburch/logisim/gui/appear/SelectionAction.java:    final var anchor = findAnchor(canvasModel);
src/main/java/com/cburch/logisim/gui/appear/SelectionAction.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var circuit = canvas.getCircuit();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var infoPane = new JScrollPane(tree);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var contents = this.getContentPane();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var pref = contents.getPreferredSize();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var loc = shape.getLocation();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var s : avoid) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var o = p.getPath();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var elt = new InstanceComponent[o.length - 1];
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (var i = 1; i < o.length; i++) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var r = ((RefTreeNode) o[i]).refData;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var objs = new Object[path.elt.length + 1];
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (var i = 1; i < objs.length; i++) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (var i = 0; i < node.getChildCount(); i++) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var child = (RefTreeNode) node.getChildAt(i);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var r = child.refData;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var root = (RefTreeNode) tree.getModel().getRoot();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var paths = new ArrayList<TreePath>();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var shape : canvas.getModel().getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var path = toTreePath(root, dynEl.getPath());
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var model = canvas.getModel();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var root = (RefTreeNode) tree.getModel().getRoot();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    var boundingBox = Bounds.EMPTY_BOUNDS;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var shape : model.getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    var loc = Location.create(boundingBox.getX(), boundingBox.getY(), true);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var checked = tree.getCheckingPaths();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var toAdd = new ArrayList<>(Arrays.asList(checked));
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var toRemove = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var shape : model.getObjectsFromBottom()) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var path = toTreePath(root, dynEl.getPath());
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    var dirty = true;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var avoid = new ArrayList<>(model.getObjectsFromBottom());
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (var i = avoid.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var newShapes = new ArrayList<CanvasObject>();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var path : toAdd) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var node = (RefTreeNode) path.getLastPathComponent();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var ref = node.refData;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var factory = ref.ic.getFactory();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var x = loc.getX();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var y = loc.getY();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var p = toComponentPath(path);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var shape = ((DynamicElementProvider) factory).createDynamicElement(x, y, p);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    final var root = new RefTreeNode(new CircuitRef(circuit, ic));
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:    for (final var c : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var factory = child.getFactory();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:          final var node = enumerate(sub.getSubcircuit(), child);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var aa = a.getPath();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var bb = b.getPath();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      for (var i = 1; i < aa.length && i < bb.length; i++) {
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var refA = ((RefTreeNode) aa[i]).refData;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var refB = ((RefTreeNode) bb[i]).refData;
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var locA = refA.ic.getLocation();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:        final var locB = refB.ic.getLocation();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var s = ic.getInstance().getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      final var loc = ic.getInstance().getLocation();
src/main/java/com/cburch/logisim/gui/appear/ShowStateDialog.java:      var str = "";
src/main/java/com/cburch/logisim/gui/appear/ShowStateTool.java:    final var w = new ShowStateDialog(view.getFrame(), canvas);
src/main/java/com/cburch/logisim/gui/appear/ShowStateTool.java:    final var p = view.getFrame().getLocation();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var logFrame = getLogFrame();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var simTools = new SimulationToolbarModel(getProject(), logFrame.getMenuListener());
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var toolbar = new Toolbar(simTools);
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var toolpanel = new JPanel();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var b = logFrame.makeSelectionButton();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var filler = Box.createHorizontalGlue();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var inputMap = getInputMap(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var actionMap = getActionMap();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var p = rightScroll == null ? 0 : rightScroll.getHorizontalScrollBar().getValue();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var zoomer =
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var old = model.setSpotlight(s);
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var spotlight = model.getSpotlight();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var hsb = Color.RGBtoHSB(c.getRed(), c.getGreen(), c.getBlue(), null);
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:    final var s = 0.8f;
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var action = e.getSource();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var l = leftPanel.getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var r = rightPanel.getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var width = l.width + 3 + r.width;
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var height = HEADER_HEIGHT + l.height;
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var l = leftPanel.getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var r = rightPanel.getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var d = getExportImageSize();
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          final var headerHeight = fm.getHeight() * 1.5;
src/main/java/com/cburch/logisim/gui/chrono/ChronoPanel.java:          var scale = 1.0D;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      final var ret = super.getTableCellRendererComponent(table, value, false, false, row, col);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      final var txt = s.getFormattedValue(chronoPanel.getRightPanel().getCurrentTime());
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      final var ret = super.getTableCellRendererComponent(table, txt, false, false, row, col);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var inputMap = getInputMap();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var actionMap = getActionMap();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var nameWidth = 0;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var valueWidth = 0;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var render = getDefaultRenderer(String.class);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var n = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    for (var i = -1; i < n; i++) {
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:        final var s = model.getSignal(i);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      var c = render.getTableCellRendererComponent(this, name, false, false, i, 0);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var col = getColumnModel().getColumn(0);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var header = getTableHeader();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var d = header.getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var sel = getSelectedRows();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    for (final var i : sel) signals.add(model.getSignal(i));
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    for (final var s : signals) {
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      final var i = model.indexOf(s.info);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var sel = getSelectedValuesList();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var first = Integer.MAX_VALUE;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var last = -1;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    for (final var s : sel) {
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    var idx = 0;
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var signals = getSelectedValuesList();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var items = new SignalInfo.List();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    for (final var s : signals) {
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:    final var count = model.remove(items);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      final var items = new ArrayList<SignalInfo>();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:      for (final var s : removing) items.add(s.info);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:        final var incoming = (Signal.List) support.getTransferable().getTransferData(Signal.List.dataFlavor);
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:        var newIdx = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:            final var dl = (JTable.DropLocation) support.getDropLocation();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:          final var sel = getSelectedRows();
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:            for (final var i : sel) {
src/main/java/com/cburch/logisim/gui/chrono/LeftPanel.java:        final var change = model.addOrMoveSignals(incoming, newIdx);
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:        for (var i = 1; i < signals.size(); i++) {
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:      final var g = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:      for (final var r : RadixOption.OPTIONS) {
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:        final var m = new JRadioButtonMenuItem(r.toDisplayString());
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:              for (final var s : signals) s.info.setRadix(r);
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:      var m = new JMenuItem(S.get("editClearItem"));
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:            final var items = new SignalInfo.List();
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:            for (final var s : signals) {
src/main/java/com/cburch/logisim/gui/chrono/PopupMenu.java:    final var menu = new PopupContents();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var n = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var timeScale = model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var numTicks = ((model.getEndTime() - model.getStartTime()) + timeScale - 1) / timeScale;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var tracker =
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var n = rows.size();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var waveForm = rows.get(i);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var n = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var s = model.getSignal(i);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var idx = indexOf(s);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var t0 = model.getStartTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var t1 = model.getEndTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var timeScale = model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var numTicks = ((timeNextDraw - timeStartDraw) + timeScale - 1) / timeScale;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var m = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var d = getPreferredSize();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var v = chronoPanel.getRightViewport();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var sb = chronoPanel.getHorizontalScrollBar();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var oldR = v == null ? null : v.getViewRect();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var r = v.getViewRect(); // has this updated yet?
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var edgeVisible = (oldWidth <= oldR.x + oldR.width);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var cursorVisible = (oldR.x <= curX && curX <= oldR.x + oldR.width);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    var s = 1L;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var f = model.getTimeScale() / tickWidth;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var t0 = model.getStartTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var timeScale = model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var waveform = rows.get(oldSignal.idx);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var waveform = rows.get(newSignal.idx);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    for (var i = firstIdx; i <= lastIdx; i++) {
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var waveform = rows.get(i);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var selected = selectionModel.isSelectedIndex(i);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    for (final var w : rows) w.flush();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var gfx = (Graphics2D) graphics;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var f = gfx.getFont();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var lines = S.get("NoSignalsSelected");
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var x = AppPreferences.getScaled(15);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var y = AppPreferences.getScaled(15);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      for (final var s : lines.split("\\|")) {
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      for (final var w : rows) w.paintWaveform(gfx);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var x = getSignalCursorX();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var idx = y / WAVE_HEIGHT;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var n = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var signal = getSignal(e.getY(), false);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var signal = getSignal(e.getY(), false);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var signal = getSignal(e.getY(), true);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        var idx = selectionModel.getAnchorSelectionIndex();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var signals = chronoPanel.getLeftPanel().getSelectedValuesList();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var signal = getSignal(e.getY(), false);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var m = new PopupMenu(chronoPanel, signals);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var t0 = model.getStartTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var max = signal.getFormattedMaxValue();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var min = signal.getFormattedMinValue();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var labelWidth = Math.max(fm.stringWidth(max), fm.stringWidth(min));
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var z = tickWidth / model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var prevHi = false;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var prevLo = false;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var v = cur.getFormattedValue();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var x0 = (int) (z * (cur.time - t0));
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var x1 = (int) (z * (cur.time + cur.duration - t0));
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        var hi = true;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        var lo = true;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:          final var xt = x0 + Math.min(slope, (x1 - x0) / 2);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var g = buf.createGraphics();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var isBold = (model.getSpotlight() == signal);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var colors = chronoPanel.rowColors(signal.info, selected);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var y = WAVE_HEIGHT * signal.idx;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var timeScale = model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var t0 = model.getStartTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var t1 = model.getEndTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var numTicks = (t1 - t0 + timeScale - 1) / timeScale;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var newTickWidth = 20 * Math.pow(1.15, zoom + sens - 20);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var newWidth = (int) (newTickWidth * numTicks + EXTRA_SPACE + 0.5);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var f = timeScale / tickWidth;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var mouseT = t0 + posX * f;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var sb = chronoPanel.getHorizontalScrollBar();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var vx = posX - sb.getValue();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var q = tickWidth / timeScale;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var g = (Graphics2D) gr;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var x = getSignalCursorX();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var t = getCurrentTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var s = Model.formatDuration(t);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var r = fm.getStringBounds(s, g);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var y = (height - ChronoPanel.GAP) / 2;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var timeScale = model.getTimeScale();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var pixelPerTime = tickWidth / timeScale;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var b = 1L;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      var j = 0;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var f = g.getFont();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var time0 = model.getStartTime();
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var timeL = (time0 / divMajor) * divMajor;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      final var h = ChronoPanel.HEADER_HEIGHT - ChronoPanel.GAP;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:      for (var i = 0; true; i++) {
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var t = timeL + divMinor * i;
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:        final var x = (int) ((t - time0) * pixelPerTime);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var jsp = (JScrollPane) SwingUtilities.getAncestorOfClass(JScrollPane.class, this);
src/main/java/com/cburch/logisim/gui/chrono/RightPanel.java:    final var jsp = (JScrollPane) SwingUtilities.getAncestorOfClass(JScrollPane.class, this);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var baseFont = title.getFont();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var titleSize = Math.round(baseFont.getSize() * 1.2f);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var titleFont = baseFont.deriveFont(AppPreferences.getScaled((float) titleSize)).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var bgColor = new Color(240, 240, 240);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var propPanel = new JPanel(new BorderLayout(0, 0));
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var tableScroll = new JScrollPane(table);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:    final var editor = table.getCellEditor();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var text = tableModel.attrModel.getTitle();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var p = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var col = table.getEditingColumn();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var e = new ChangeEvent(AttrTable.this);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        final var value = getCellEditorValue();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        for (final var r : currentRowIndexes) {
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var e = new ChangeEvent(AttrTable.this);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var dst = e.getOppositeComponent();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        var p = dst;
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var comp = currentEditor;
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var attrModel = tableModel.attrModel;
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var row = attrModel.getRow(rowIndex);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      var editor = row.getEditor(parent);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:          for (var i = 0; i < rowIndexes.length; i++) {
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        final var retVal = dlog.getValue();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        final var dialog = new MyDialog(input);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:        final var retVal = dialog.getValue();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var ed = table.getCellEditor();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var ed = table.getCellEditor();
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      final var e = new TableModelEvent(this);
src/main/java/com/cburch/logisim/gui/generic/AttrTable.java:      for (final var l : new ArrayList<>(listeners)) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var rowd = new HDLrow(null);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      for (final var attr : attrs.getAttributes()) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:          final var row = new AttrRow(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var attr : attrs.getAttributes()) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:        final var row = rowMap.get(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    var index = 0;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    var match = true;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    var rowsSize = rows.size();
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var attr : attrs.getAttributes()) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var newRows = new ArrayList<AttrRow>();
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var missing = new HashSet<>(rowMap.keySet());
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var rowd = new HDLrow(null);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var attr : attrs.getAttributes()) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:        var row = rowMap.get(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var attr : missing) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var attr = e.getAttribute();
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var row = rowMap.get(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var index = rows.indexOf(row);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var event = new AttrTableModelEvent(this);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var event = new AttrTableModelEvent(this);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    final var event = new AttrTableModelEvent(this, index);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var value = attrs.getValue(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var value = attrs.getValue(attr);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:          final var str = attr.toDisplayString(value);
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var a = (SplitterAttributes.BitOutAttribute) (Object) attr;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var b = (SplitterAttributes.BitOutAttribute) (Object) o.attr;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:      final var attr = this.attr;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:        final var msg = S.get("attributeChangeInvalidError") + ": " + e;
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:        var msg = S.get("attributeChangeInvalidError");
src/main/java/com/cburch/logisim/gui/generic/AttributeSetTableModel.java:        final var eMsg = e.getMessage();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:    final var oldValue = zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:    final var oldValue = zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var mx = canvas.getHorizontalScrollBar().getMaximum();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var vx = canvas.getHorizontalScrollBar().getValue();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var ex = canvas.getHorizontalScrollBar().getVisibleAmount();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var rx = e.getX() - vx;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var my = canvas.getVerticalScrollBar().getMaximum();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var vy = canvas.getVerticalScrollBar().getValue();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var ey = canvas.getVerticalScrollBar().getVisibleAmount();
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var ry = e.getY() - vy;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var nmx = mx * value / oldValue;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var px = (vx / mx) + (ex / mx - ex / nmx) * (rx / ex);
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var nvx = (int) (nmx * px);
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var nmy = my * value / oldValue;
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var py = (vy / my) + (ey / my - ey / nmy) * (ry / ey);
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:      final var nvy = (int) (nmy * py);
src/main/java/com/cburch/logisim/gui/generic/BasicZoomModel.java:    final var oldValue = zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var size = new Dimension();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var model = zoomModel;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var oldModel = zoomModel;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var zoom = getZoomFactor();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var minSize = getViewportSize();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:    final var unit = supportScrollableUnitIncrement(visibleRect, orientation, direction);
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:      final var prop = e.getPropertyName();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var oldZoom = (Double) e.getOldValue();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        var r = getViewport().getViewRect();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var cx = (r.x + r.width / 2) / oldZoom;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var cy = (r.y + r.height / 2) / oldZoom;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var newZoom = (Double) e.getNewValue();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var hv = (int) (cx * newZoom) - r.width / 2;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var vv = (int) (cy * newZoom) - r.height / 2;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        var zoom = zoomModel.getZoomFactor();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:        final var opts = zoomModel.getZoomOptions();
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:          final var max = opts.get(opts.size() - 1) / 100.0;
src/main/java/com/cburch/logisim/gui/generic/CanvasPane.java:          final var min = opts.get(0) / 100.0;
src/main/java/com/cburch/logisim/gui/generic/CardPanel.java:    final var oldChoice = current;
src/main/java/com/cburch/logisim/gui/generic/CardPanel.java:      final var e = new ChangeEvent(this);
src/main/java/com/cburch/logisim/gui/generic/CardPanel.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      final var item = model.getSelectedItem();
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      for (var i = 0; item != null && i < model.getSize(); i++) {
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      var idx = currentIndex(model);
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      final var now = System.currentTimeMillis();
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      final var n = model.getSize();
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:      for (var offset = 0; offset < n; offset++) {
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:        final var i = (idx + offset) % n;
src/main/java/com/cburch/logisim/gui/generic/ComboBox.java:        final var item = model.getElementAt(i);
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    for (final var font : GraphicsEnvironment.getLocalGraphicsEnvironment().getAllFonts()) {
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    final var selections = new TreeSet<Integer>();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    for (var size = 2; size < 65; size++) {
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    final var panel = new JPanel();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:      final var isChecked = boldAttribute.isSelected();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:      final var newStyle = isChecked ? fontStyle | Font.BOLD : fontStyle & (Font.BOLD ^ 0xFFFFFFFF);
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:      final var isChecked = italicAttribute.isSelected();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:      final var newStyle = isChecked ? fontStyle | Font.ITALIC : fontStyle & (Font.ITALIC ^ 0xFFFFFFFF);
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    final var selectedFont = selectableFontFamilies.getSelectedValue();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    final var selectedFontSize = selectableFontSize.getSelectedValue();
src/main/java/com/cburch/logisim/gui/generic/FontSelector.java:    var change = (selectedFontSize != null) && (selectedFontSize != fontSize);
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var oldValue = zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var old = zoomModel;
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var x0 = (clip.x / gridImageWidth) * gridImageWidth; // round down to multiple of w
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var y0 = (clip.y / gridImageWidth) * gridImageWidth;
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    for (var x = 0; x < clip.width + gridImageWidth; x += gridImageWidth) {
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      for (var y = 0; y < clip.height + gridImageWidth; y += gridImageWidth) {
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    var ww = f * size * 5;
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var w = (int) Math.round(ww);
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:    final var pix = new int[w * w];
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      final var lineStep = size * w;
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      for (var j = 0; j < pix.length; j += lineStep) {
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:        for (var i = 0; i < w; i += size) {
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      final var dotColor =
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      final var prop = event.getPropertyName();
src/main/java/com/cburch/logisim/gui/generic/GridPainter.java:      final var val = event.getNewValue();
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:      final var loadedIcons = new ArrayList<Image>();
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:      final var loader = LFrame.class.getClassLoader();
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:      for (final var size : sizes) {
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:        final var url = loader.getResource(pathBasePart + size + ".png");
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:          final var icon = new ImageIcon(url);
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:        final var set = frame.getClass().getMethod("setIconImages", List.class);
src/main/java/com/cburch/logisim/gui/generic/LFrame.java:    final var closing = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:    final var path = getSelectionPath();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:    final var last = path.getLastPathComponent();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var path = getSelectionPath();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var plainFont = AppPreferences.getScaledFont(ret.getFont());
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var boldFont = new Font(plainFont.getFontName(), Font.BOLD, plainFont.getSize());
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var tool = toolNode.getValue();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:          var viewed = false;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:            final var fact = ((AddTool) tool).getFactory(false);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var lib = libNode.getValue();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:          final var baseName = lib.getDisplayName();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:          var text = baseName;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:            final var DIRTY_MARKER_LOCAL = "*"; // useless var for easy DIRTY_MARKER hunt in future.
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var path = getPathForLocation(e.getX(), e.getY());
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:          final var menu = listener.menuRequested(new Event(path));
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var path = getPathForLocation(e.getX(), e.getY());
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var model = (ProjectExplorerModel) getModel();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var node = model.findTool((Tool) o);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var act = event.getAction();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var path = e.getNewLeadSelectionPath();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      var count = 0;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      for (final var treePath : paths) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var ret = new TreePath[count];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        for (final var path : paths) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var fact = addTool.getFactory(false);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var haloed = !viewed && (tool == haloedTool && AppPreferences.ATTRIBUTE_HALO.getBoolean());
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var s = g.getClip();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var gfxIcon = g.create();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:      final var context = new ComponentDrawContext(ProjectExplorer.this, null, null, g, gfxIcon);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var tx = x + AppPreferences.getScaled(AppPreferences.BOX_SIZE - 7);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorer.java:        final var ty = y + AppPreferences.getScaled(AppPreferences.BOX_SIZE - 7);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    final var lib = getValue();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var showLib = (showMouseTools & lib instanceof BaseLibrary) || !lib.isHidden();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var oldPos = startIndex;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var baseNode = en.nextElement();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:        final var node = (ProjectExplorerModel.Node<T>) baseNode;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var oldCount = oldPos;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var actualPos = startIndex;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var insertionCount = 0;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var delIndex = new int[oldCount - oldPos];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var delNodes = new ProjectExplorerModel.Node<?>[delIndex.length];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      var delPos = 0;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      for (var i = nodeList.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:        final var node = nodeList.get(i);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:          for (final var other : nodeList) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var minChange = Integer.MAX_VALUE >> 3;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    var maxChange = Integer.MIN_VALUE >> 3;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var moveIndex = new int[maxChange - minChange + 1];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var moveNodes = new ProjectExplorerModel.Node<?>[moveIndex.length];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      for (var i = maxChange; i >= minChange; i--) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:        final var node = nodeList.get(i);
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      for (var i = 0; i < moveIndex.length; i++) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var insIndex = new int[insertionCount];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var insNodes = new ProjectExplorerModel.Node<?>[insertionCount];
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      var insertionsPos = 0;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      for (final var node : nodeList) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:    for (final var en = children(); en.hasMoreElements(); ) {
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerLibraryNode.java:      final var n = en.nextElement();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var root = (Node<?>) getRoot();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var en = root.depthFirstEnumeration();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:      final var node = (Node<?>) en.nextElement();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var model = this;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var root = (Node<?>) getRoot();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var act = event.getAction();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var oldRoot = (Node<?>) getRoot();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:    final var old = proj;
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:      final var parent = (Node<?>) this.getParent();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:        final var indices = new int[] {parent.getIndex(this)};
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerModel.java:        final var items = new Object[] {this.getUserObject()};
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerToolNode.java:      final var factory = ((AddTool) tool).getFactory();
src/main/java/com/cburch/logisim/gui/generic/ProjectExplorerToolNode.java:    final var act = event.getAction();
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    for (final var circ : proj.getLogisimFile().getCircuits()) {
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        for (final var circ : lsFile.getCircuits()) {
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    final var col1 = new MyLabel("Circuit", Font.ITALIC | Font.BOLD);
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    final var col2 = new MyLabel("Reg name", Font.BOLD);
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    final var col3 = new MyLabel("Value", Font.BOLD);
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    var y = 0;
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:      final var keys = registers.keySet().stream().sorted(new AlphanumComparator()).toList();
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:      for (final var key : keys) {
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        final var circuitName = key.split("/")[0];
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        final var registerName = key.split("/")[1];
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        final var selReg = registers.get(key);
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        var mainCircState = proj.getCircuitState();
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        final var val = findVal(mainCircState, circuitName, selReg.getEnd(0).getLocation()); // Get Q port location
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:          final var hexLabel = new MyLabel(val.toHexString());
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:      for (final var cst : cs.getSubStates()) {
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:        final var ret = findVal(cst, cn, loc);
src/main/java/com/cburch/logisim/gui/generic/RegTabContent.java:    for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    var newInst = new TikZInfo();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var fontName = f.getFamily();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var copyList = new ArrayList<DrawObject>();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    for (final var obj : contents) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var objClone = obj.clone();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var at = AffineTransform.getTranslateInstance(x, y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var p = g.getGlyphPosition(i);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var shape = g.getGlyphOutline(i);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var l = contents.listIterator();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var obj = l.next();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        var merged = false;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        for (var i = contents.indexOf(obj) + 1; i < contents.size(); i++) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var n = contents.get(i);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var repeat = i / 26;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var charId = i % 26;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    var replaced = false;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    var fontName = usedFonts.get(i);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    for (final var key : customColors.keySet()) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var writer = new FileWriter(outfile);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    for (final var obj : contents) writer.write(obj.getTikZCommand() + "\n");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var factory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var parser = factory.newDocumentBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var svgInfo = parser.newDocument();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var svg = svgInfo.createElement("svg");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    for (final var obj : contents) obj.getSvgCommand(svgInfo, svg);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var tranFactory = TransformerFactory.newInstance();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var transformer = tranFactory.newTransformer();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var src = new DOMSource(svgInfo);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:    final var dest = new StreamResult(outfile);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var left = new Point(x, y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var right = new Point(x + width, y + height);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var x1 = Math.min(left.x, right.x);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var x2 = Math.max(left.x, right.x);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var y1 = Math.min(left.y, right.y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var y2 = Math.max(left.y, right.y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      var inside = true;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        for (final var point : points) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var move = new Point(dx, dy);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        for (final var point : points) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var p = new Point(pointsX[i], pointsY[i]);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        var first = true;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        for (final var point : points) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement(close ? "polygon" : "polyline");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        var first = true;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        for (final var point : points) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newIns = new TikZLine();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var p = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var at = AffineTransform.getTranslateInstance(origin.getX(), origin.getY());
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var p = s.getPathIterator(at);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var coords = new double[6];
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var type = p.currentSegment(coords);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var current = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var next = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var next = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var control = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var next = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var control1 = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          final var control2 = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      for (final var point : myPath) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement("path");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      for (final var point : myPath) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      var inside = true;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      for (final var point : myPath) inside &= point.insideArea(x, y, width, height);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newInst = new TikZBezier();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      for (final var point : myPath) newInst.myPath.add(point.clone());
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      for (final var point : myPath) point.move(dx, dy);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var newInst = new BezierInfo();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var at = AffineTransform.getTranslateInstance(dx, dy);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:            final var singlePoint = (controlPoint2 == null) ? controlPoint1 : controlPoint2;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        var inside = true;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var x2 = x + width;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var y2 = y + height;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newIns = new TikZRectangle();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement("rect");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var xpos = Math.min(end.x, start.x);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var bwidth = Math.abs(end.x - start.x);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ypos = Math.min(end.y, start.y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var bheight = Math.abs(end.y - start.y);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newIns = new TikZElipse();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement("ellipse");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var radius = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var center = new Point2D.Double();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newIns = new TikZArc();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement("path");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var width = strokeWidth * BASIC_STROKE_WIDTH;
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:        final var fontName = (String) str.getAttribute(TextAttribute.FAMILY);
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:            final var kar = strIter.current();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var content = new StringBuilder();
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:          for (var i = 0; i < name.length(); i++) {
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var ne = root.createElement("text");
src/main/java/com/cburch/logisim/gui/generic/TikZInfo.java:      final var newInst = new TikZString();
src/main/java/com/cburch/logisim/gui/generic/TikZWriter.java:    final var ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
src/main/java/com/cburch/logisim/gui/generic/TikZWriter.java:    final var gd = ge.getDefaultScreenDevice();
src/main/java/com/cburch/logisim/gui/generic/TikZWriter.java:    final var config = gd.getDefaultConfiguration();
src/main/java/com/cburch/logisim/gui/generic/TikZWriter.java:    final var c = new Canvas(config);
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var zoom = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var choices = model.getZoomOptions();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var factor = model.getZoomFactor() * 100.0;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    var closest = 0;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    for (var i = 1; i < choices.size(); i++) {
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var zoom = model.getZoomFactor();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var choices = model.getZoomOptions();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var factor = zoom * 100.0 * 1.001;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    for (final var choice : choices) {
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var zoom = model.getZoomFactor();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var choices = model.getZoomOptions();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var factor = zoom * 100.0 * 0.999;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    for (var i = choices.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var choices = model.getZoomOptions();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:    final var oldModel = model;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var width = getWidth();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var height = getHeight();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var three = AppPreferences.getScaled(3);
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var xdim = (width - AppPreferences.getScaled(4)) / three * three + 1;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var ydim = (height - AppPreferences.getScaled(4)) / three * three + 1;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var xoff = (width - xdim) / 2;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var yoff = (height - ydim) / 2;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      for (var x = 0; x < xdim; x += three) {
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        for (var y = 0; y < ydim; y += three) {
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:      final var grid = model.getShowGrid();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var g = getGraphics();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var bounds =
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var canvasPane = canvas.getCanvasPane();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var padding = 50;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var zoomFactor = zoomModel.getZoomFactor();
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var height = (bounds.getHeight() + 2 * padding) * zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var width = (bounds.getWidth() + 2 * padding) * zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        var autozoom = zoomFactor;
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var max =
src/main/java/com/cburch/logisim/gui/generic/ZoomControl.java:        final var min = zoomModel.getZoomOptions().get(0) / 100.0;
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var caret = editor.getCaret();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    var p0 = caret.getMark();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    var p1 = caret.getDot();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var data = new long[(int) (p1 - p0)];
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var model = editor.getModel();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    for (var i = p0; i < p1; i++) {
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var clip = editor.getToolkit().getSystemClipboard();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var clip = editor.getToolkit().getSystemClipboard();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var xfer = clip.getContents(this);
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var model = (MemContents) editor.getModel();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    var numWords = 0;
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        final var data = (long[]) xfer.getTransferData(binaryFlavor);
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        var addrBits = 32 - Integer.numberOfLeadingZeros(numWords);
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        final var r = HexFile.parseFromClipboard(buf, model.getLogLength(), model.getValueWidth());
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    final var caret = editor.getCaret();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    var p0 = caret.getMark();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:    var p1 = caret.getDot();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        var action =
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        var action =
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        var bits = 1;
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        for (final var datum : data) {
src/main/java/com/cburch/logisim/gui/hex/Clip.java:          var k = datum >> bits;
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        var chars = (bits + 3) / 4;
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        final var buf = new StringBuilder();
src/main/java/com/cburch/logisim/gui/hex/Clip.java:        for (var i = 0; i < data.length; i++) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var mem = (instance == null) ? null : (Mem) instance.getFactory();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var recent = getRecent(proj, mem, instance);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var chooser = createFileOpenChooser(recent);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var choice = chooser.showOpenDialog(parent);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var in = BufferedLineReader.forFile(src);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var r = new HexReader(in, dst.getLogLength(), dst.getValueWidth());
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var in = BufferedLineReader.forString(src);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var r = new HexReader(in, addrSize, wordSize);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var loaded = interactive ? r.decodeOrWarn() : r.decode();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var S = com.cburch.logisim.std.Strings.S;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var mem = instance == null ? null : (Mem) instance.getFactory();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var recent = getRecent(proj, mem, instance);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var chooser = createFileSaveChooser(recent, src);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var choice = chooser.showSaveDialog(parent);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var confirm =
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var out = new StringWriter();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var w = new HexWriter(stream, src, desc);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    var recent = mem == null ? null : mem.getCurrentImage(instance);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var lf = (proj == null ? null : proj.getLogisimFile());
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var ld = (lf == null ? null : lf.getLoader());
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var chooser = createFileChooser(lastFile, false);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:    final var chooser = JFileChoosers.createSelected(lastFile);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      for (final var desc : formatDescriptions) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var p = new JPanel();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var scaledTen = scaled(10);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var m =
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var f = m.getFont();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var grid = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var pos = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var opts = new JPanel(grid);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var radix = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var hs = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var hy = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var he = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var be = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var ae = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var preview = new JPanel();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var original = new JPanel();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var scroller = new JScrollPane(originalTxt);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var buf = new char[1024];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        var n = this.reader.in.readUtf8(buf, 0, 1024);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        var count = 0;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:          final var b = new StringWriter();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:          final var buf = new byte[1024];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:          var n = this.reader.in.readBytes(buf, 0, 1024);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:          var count = 0;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:            final var b = new StringWriter();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var split = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var optp = new JPanel();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var listener = new MyListener();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var s = new StringWriter();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var n = reader.decodedWordCount;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var t = hdr.split("\\s+");
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      for (var i = 1; i < t.length; i++) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var tag = t[i];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var key = switch (tag.toLowerCase()) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var n = s.length();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var d = hex2int(s.charAt(i));
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var d = new HexFormatDialog(errmsg, this);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var hdr = in.readLine();
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var err = parseHeader(hdr);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var hexWord = star < 0 ? word : word.substring(star + 1);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var value = get(addr);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        var addr = curWords[0];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var foundColon = addr.endsWith(":");
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        final var stripOx = addr.startsWith("0x") || addr.startsWith("0X");
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:          final var word = curWords[i];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var buf = new byte[4096];
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var n = in.readBytes(buf, 0, 4096);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var esc = 0;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      var ehex = 0;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:      final var value = get(addr);
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        var val = BigInteger.ZERO;
src/main/java/com/cburch/logisim/gui/hex/HexFile.java:        var val = BigInteger.ZERO;
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:    final var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:    final var pref = editor.getPreferredSize();
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:    final var scroll =
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:      final var sel = editor.selectionExists();
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:      final var clip = true; // TODO editor.clipboardExists();
src/main/java/com/cburch/logisim/gui/hex/HexFrame.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/icons/AppearEditIcon.java:    final var g = (Graphics2D) g2.create();
src/main/java/com/cburch/logisim/gui/icons/AppearEditIcon.java:    var path = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/ArithmeticIcon.java:    final var scale = opp.length() >= nrOfChars ? nrOfChars : 1;
src/main/java/com/cburch/logisim/gui/icons/ArithmeticIcon.java:    final var yOff = opp.length() > nrOfChars ? getIconHeight() >> 2 : getIconHeight() >> 1;
src/main/java/com/cburch/logisim/gui/icons/ArithmeticIcon.java:    var font = g2.getFont().deriveFont((float) getIconWidth() / scale).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/ArithmeticIcon.java:    var textLayout =
src/main/java/com/cburch/logisim/gui/icons/BaseIcon.java:    final var g2 = (Graphics2D) gfx.create();
src/main/java/com/cburch/logisim/gui/icons/BreakpointIcon.java:    final var f = g.getFont();
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    final var wh = scale(12);
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    var x = scale(state);
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    var y = scale(11) + scale(state);
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    final var s = "B";
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    final var f = g2.getFont().deriveFont((float) wh);
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    final var t = new TextLayout(s, f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ButtonIcon.java:    final var center = scale(state) + wh / 2;
src/main/java/com/cburch/logisim/gui/icons/CompileIcon.java:    final var page = new int[] {0, 0, 0, 15, 15, 15, 15, 5, 10, 5, 10, 0, 15, 5, 10, 0, 0, 0};
src/main/java/com/cburch/logisim/gui/icons/CompileIcon.java:    final var xpos = new int[9];
src/main/java/com/cburch/logisim/gui/icons/CompileIcon.java:    final var ypos = new int[9];
src/main/java/com/cburch/logisim/gui/icons/CompileIcon.java:    for (var i = 0; i < 9; i++) {
src/main/java/com/cburch/logisim/gui/icons/CompileIcon.java:    final var f = g2.getFont();
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:    final var f = g2.getFont().deriveFont(scale((float) 6));
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:    final var tens = state / 10;
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:    final var ones = state % 10;
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var val = Math.abs((ones + i) % 10);
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var c = (char) ('0' + val);
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var t = new TextLayout(Character.toString(c), f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var x = scale((float) 11.5) - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var y = scale((float) (8.5 + i * 7)) - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var val = Math.abs((tens + i) % 10);
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var c = (char) ('0' + val);
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var t = new TextLayout(Character.toString(c), f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var x = scale((float) 3.5) - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/CounterIcon.java:      final var y = scale((float) (8.5 + i * 7)) - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/DipSwitchIcon.java:    final var w = scale(8);
src/main/java/com/cburch/logisim/gui/icons/DipSwitchIcon.java:    final var h = scale(5);
src/main/java/com/cburch/logisim/gui/icons/DipSwitchIcon.java:    final var x1 = scale(2) + w >> 1;
src/main/java/com/cburch/logisim/gui/icons/DipSwitchIcon.java:    final var x2 = scale(2);
src/main/java/com/cburch/logisim/gui/icons/DrcIcon.java:    var p = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/DrcIcon.java:    final var f = g2.getFont().deriveFont(scale((float) getIconWidth() / 3)).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/DrcIcon.java:    final var t = new TextLayout("DRC", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/DrcIcon.java:    final var f =
src/main/java/com/cburch/logisim/gui/icons/DrcIcon.java:    final var t = new TextLayout(s, f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var g2 = (Graphics2D) g.create();
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var mywh = !forwardArrow && !backwardArrow ? wh : (3 * wh) >> 2;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var xoff = !forwardArrow && !backwardArrow ? 0 : wh >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var trd = mywh / 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var f = g2.getFont().deriveFont((float) mywh / (float) 1.3).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var t = new TextLayout("X", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var xc = (float) mywh / (float) 2 - (float) t.getBounds().getCenterX() + (float) xoff;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:    final var yc = (float) mywh / (float) 2 - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var five = (5 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var six = (6 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var seven = (7 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var yOff = AppPreferences.getScaled(1);
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var three = (3 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var six = (6 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var seven = (7 * wh) >> 3;
src/main/java/com/cburch/logisim/gui/icons/ErrorIcon.java:      final var yOff = AppPreferences.getScaled(1);
src/main/java/com/cburch/logisim/gui/icons/FatArrowIcon.java:    final var path = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/FatArrowIcon.java:    for (var i = 2; i < points.length; i += 2)
src/main/java/com/cburch/logisim/gui/icons/FlipFlopIcon.java:    var str = "";
src/main/java/com/cburch/logisim/gui/icons/FlipFlopIcon.java:    final var f = g2.getFont().deriveFont((float) ((double) AppPreferences.getIconSize() / 2.1));
src/main/java/com/cburch/logisim/gui/icons/FlipFlopIcon.java:    final var l = new TextLayout(str, f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/FlipFlopIcon.java:    final var p = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/FlipFlopIcon.java:    for (var i = 2; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/icons/HdlIcon.java:    final var font = g2.getFont().deriveFont((float) getIconWidth() / (float) 4.5);
src/main/java/com/cburch/logisim/gui/icons/HdlIcon.java:    var t = new TextLayout("LIBRARY", font, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/InfoIcon.java:    final var g2 = (Graphics2D) g.create();
src/main/java/com/cburch/logisim/gui/icons/InfoIcon.java:    final var f = g2.getFont().deriveFont((float) iconWidth / (float) 1.3).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/InfoIcon.java:    final var t = new TextLayout("i", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/InfoIcon.java:    final var xc = (float) iconWidth / (float) 2 - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/InfoIcon.java:    final var yc = (float) iconWidth / (float) 2 - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/JoystickIcon.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/gui/icons/JoystickIcon.java:    var xtop = scale(13);
src/main/java/com/cburch/logisim/gui/icons/JoystickIcon.java:    var ytop = scale(3);
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    final var wh = scale(12);
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    var x = scale(state);
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    var y = scale(11) + scale(state);
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    final var s = "K";
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    final var f = g2.getFont().deriveFont((float) wh);
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    final var t = new TextLayout(s, f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/KeyboardIcon.java:    final var center = scale(state) + wh / 2;
src/main/java/com/cburch/logisim/gui/icons/LedBarIcon.java:    final var col1 = Color.green;
src/main/java/com/cburch/logisim/gui/icons/LedBarIcon.java:    final var col2 = Color.gray;
src/main/java/com/cburch/logisim/gui/icons/LedBarIcon.java:    final var y = scale(2);
src/main/java/com/cburch/logisim/gui/icons/LedBarIcon.java:    final var h = scale(12);
src/main/java/com/cburch/logisim/gui/icons/LedBarIcon.java:    final var w = scale(5);
src/main/java/com/cburch/logisim/gui/icons/LedMatrixIcon.java:    final var xint = 2;
src/main/java/com/cburch/logisim/gui/icons/LedMatrixIcon.java:    final var yint = 1;
src/main/java/com/cburch/logisim/gui/icons/LedMatrixIcon.java:    for (var i = 0; i < 4; i++)
src/main/java/com/cburch/logisim/gui/icons/LedMatrixIcon.java:      for (var j = 0; j < 4; j++) {
src/main/java/com/cburch/logisim/gui/icons/OpenSaveIcon.java:    final var discCol = myType == FILE_SAVE_AS ? Color.GRAY : Color.BLUE;
src/main/java/com/cburch/logisim/gui/icons/OpenSaveIcon.java:    var bds = getScaled(2, 2, 12, 12);
src/main/java/com/cburch/logisim/gui/icons/OpenSaveIcon.java:        for (var i = 0; i < 7; i++) {
src/main/java/com/cburch/logisim/gui/icons/OpenSaveIcon.java:        for (var i = 0; i < 7; i++) {
src/main/java/com/cburch/logisim/gui/icons/PlexerIcon.java:    final var realPosX = new int[4];
src/main/java/com/cburch/logisim/gui/icons/PlexerIcon.java:    final var realPosY = new int[4];
src/main/java/com/cburch/logisim/gui/icons/PlexerIcon.java:    var xOffset = inverted ? 2 : 0;
src/main/java/com/cburch/logisim/gui/icons/PlexerIcon.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/gui/icons/PlexerIcon.java:    var yOffset = scale(ypos[3] + 1);
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:      final var f =
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:      var l1 = new TextLayout("VH", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:      var top = AppPreferences.getIconSize() / 4 - l1.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:      var left = AppPreferences.getIconSize() / 2 - l1.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:    final var path = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/ProjectAddIcon.java:    for (var i = 2; i < points.length; i += 2)
src/main/java/com/cburch/logisim/gui/icons/QuestionIcon.java:    final var g2 = (Graphics2D) g.create();
src/main/java/com/cburch/logisim/gui/icons/QuestionIcon.java:    final var f = g2.getFont().deriveFont((float) width / (float) 1.3).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/QuestionIcon.java:    final var t = new TextLayout("?", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/QuestionIcon.java:    final var centerX = (float) width / (float) 2 - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/QuestionIcon.java:    final var centerY = (float) width / (float) 2 - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/SevenSegmentIcon.java:    final var segson = HexDigit.getSegs(isHexDisplay ? 10 : 7);
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:    final var s = new StringBuilder();
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:      var mask = 4;
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:    final var f = g2.getFont().deriveFont(scale((float) 6)).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:    final var t = new TextLayout(s.toString(), f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:    final var x = scale((float) 8) - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/ShifterIcon.java:    final var y = scale((float) 8) - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/ShowStateIcon.java:    final var font = gfx.getFont().deriveFont((float) getIconWidth() / (float) 2);
src/main/java/com/cburch/logisim/gui/icons/ShowStateIcon.java:    final var textLayout = new TextLayout("101", font, gfx.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/ShowStateIcon.java:    final var iconBorder = AppPreferences.ICON_BORDER;
src/main/java/com/cburch/logisim/gui/icons/ShowStateIcon.java:    final var wh = AppPreferences.getScaled(AppPreferences.IconSize / 2 - iconBorder);
src/main/java/com/cburch/logisim/gui/icons/ShowStateIcon.java:    final var offset = AppPreferences.getScaled(iconBorder);
src/main/java/com/cburch/logisim/gui/icons/SimulationIcon.java:    final var wh = getIconWidth() - scale(1);
src/main/java/com/cburch/logisim/gui/icons/SimulationIcon.java:      final var wh1 = wh - scale(4);
src/main/java/com/cburch/logisim/gui/icons/TextIcon.java:    final var f = StdAttr.DEFAULT_LABEL_FONT.deriveFont((float) AppPreferences.getIconSize());
src/main/java/com/cburch/logisim/gui/icons/TextIcon.java:    final var l = new TextLayout("A", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/TreeIcon.java:    var path = new GeneralPath();
src/main/java/com/cburch/logisim/gui/icons/TreeIcon.java:    for (var i = 2; i < backsheet.length; i += 2)
src/main/java/com/cburch/logisim/gui/icons/TreeIcon.java:    final var frontSheet = closed ? frontsheetClosed : frontsheetOpen;
src/main/java/com/cburch/logisim/gui/icons/TreeIcon.java:    for (var i = 2; i < frontSheet.length; i += 2)
src/main/java/com/cburch/logisim/gui/icons/TtyIcon.java:    final var display = "Hello World!";
src/main/java/com/cburch/logisim/gui/icons/TtyIcon.java:    final var f = Tty.DEFAULT_FONT.deriveFont(scale((float) 5)).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/TtyIcon.java:    final var t = new TextLayout(display.substring(0, 3), f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/WarningIcon.java:    final var f = g2.getFont().deriveFont((float) wixth / (float) 1.3).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/gui/icons/WarningIcon.java:    final var t = new TextLayout("!", f, g2.getFontRenderContext());
src/main/java/com/cburch/logisim/gui/icons/WarningIcon.java:    final var xc = (float) wixth / (float) 2 - (float) t.getBounds().getCenterX();
src/main/java/com/cburch/logisim/gui/icons/WarningIcon.java:    final var yc = (float) (5 * wixth) / (float) 8 - (float) t.getBounds().getCenterY();
src/main/java/com/cburch/logisim/gui/icons/ZoomIcon.java:    final var scaledOne = AppPreferences.getScaled(1);
src/main/java/com/cburch/logisim/gui/icons/ZoomIcon.java:    final var scaledEleven = AppPreferences.getScaled(10);
src/main/java/com/cburch/logisim/gui/icons/ZoomIcon.java:    final var xyPoint = AppPreferences.getScaled(6.0 + Math.sqrt(12.5));
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var list = selector.getSelectedItems();
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var dialog = new ClockSource(S.getter("selectClockDriverMessage"), circ, true);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var dialog = new ClockSource(S.getter("selectClockMissingMessage"), circ, false);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var dialog = new ClockSource(S.getter("selectClockMultipleMessage"), circ, false);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var dialog = new ClockSource(S.getter("selectClockObserverMessage"), circ, false);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:    final var clk = clockSource.getComponent();
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:      final var hi = clk.getAttributeSet().getValue(Clock.ATTR_HIGH);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:      final var lo = clk.getAttributeSet().getValue(Clock.ATTR_LOW);
src/main/java/com/cburch/logisim/gui/log/ClockSource.java:      final var phase = clk.getAttributeSet().getValue(Clock.ATTR_PHASE);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var nameA = a.getFactory().getDisplayName();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var nameB = b.getFactory().getDisplayName();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var ret = nameA.compareToIgnoreCase(nameB);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var o = rows.get(row);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var n = o.children.size();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        for (var i = 0; i < n; i++) removeAll(row + 1);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var item = rows.remove(row);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var n = item.children.size();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        for (var i = 0; i < n; i++) removeAll(row);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var n = item.children.size();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        for (var i = n - 1; i >= 0; i--) insertAll(row + 1, item.children.get(i));
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var n = root == null ? 0 : root.children.size();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      for (var i = n - 1; i >= 0; i--) insertAll(0, root.children.get(i));
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var log = (LoggableContract) comp.getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var opts = log.getLogOptions();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var log = (LoggableContract) comp.getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var ret = log.getLogName(null);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      for (final var o : children) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var newChildren = new ArrayList<TreeNode<?>>();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var subcircs = new ArrayList<Component>();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      var changed = false;
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      for (final var c : circ.getNonWires()) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var log = (LoggableContract) c.getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        var bitWidth = log.getBitWidth(null);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var w = bitWidth.getWidth();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        var toAdd = findChildFor(c);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      for (final var c : subcircs) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var factory = (SubcircuitFactory) c.getFactory();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var subCircuit = factory.getSubcircuit();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        var toAdd = findChildFor(subCircuit);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:        final var label = comp.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      var ret = circ.getName();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    final var items = new SignalInfo.List();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    final var sel = getSelectedRows();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    for (final var i : sel) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var node = tableModel.rows.get(i);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var item = makeSignalInfo(node);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    var count = 0;
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    for (var cur = n.parent; cur != null; cur = cur.parent) count++;
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    final var paths = new Component[count];
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    var cur = n.parent;
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    for (var j = paths.length - 2; j >= 0; j--) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var tree = (ComponentSelector) c;
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var items = tree.getSelectedItems();
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    for (final var child : node.children) {
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:      final var item = makeSignalInfo(child);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    var sel = new ComponentSelector(circ, ACTUAL_CLOCKS);
src/main/java/com/cburch/logisim/gui/log/ComponentSelector.java:    var clocks = new ArrayList<SignalInfo>();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:    final var filePanel = new JPanel(new GridBagLayout());
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:    var gb = (GridBagLayout) filePanel.getLayout();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:    var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:    var glue = new JPanel();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:        final var result = chooser.showSaveDialog(getLogFrame());
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:        final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:          final var option =
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:      final var model = getModel();
src/main/java/com/cburch/logisim/gui/log/FilePanel.java:      final var file = model.getFile();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:      final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:      for (var i = 0; i < panels.length; i++) {
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:      final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:      final var title = proj.getLogisimFile().getDisplayName();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var name = data == null ? "???" : data.getCircuitState().getCircuit().getName();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var button = new JButton(S.get("addRemoveSignals"));
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var contents = getContentPane();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var w = Math.max(550, project.getFrame().getWidth());
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    var h = 300;
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var d = Toolkit.getDefaultToolkit().getScreenSize();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var r = project.getFrame().getBounds();
src/main/java/com/cburch/logisim/gui/log/LogFrame.java:    final var oldModel = curModel;
src/main/java/com/cburch/logisim/gui/log/LogPanel.java:    final var h = getEditHandler();
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      var mode = model.isStepMode() ? "step" : model.isRealMode() ? "real-time" : "clocked";
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      var gran = model.isFine() ? "fine" : "coarse";
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      final var s = model.getSignal(i);
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      var duration = timeStop - timeNextWrite;
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      final var buf = new StringBuilder();
src/main/java/com/cburch/logisim/gui/log/LogThread.java:      for (final var c : cur) c.advance(duration);
src/main/java/com/cburch/logisim/gui/log/Model.java:      final var circ = circuitState.getCircuit();
src/main/java/com/cburch/logisim/gui/log/Model.java:      final var repl = event.getResult().getReplacementMap(circ);
src/main/java/com/cburch/logisim/gui/log/Model.java:      for (final var comp : repl.getAdditions()) {
src/main/java/com/cburch/logisim/gui/log/Model.java:        final var item = makeIfDefaultComponent(comp);
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var m = getLogFrame().getModel();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:        final var editor = limit.getEditor();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var m = getLogFrame().getModel();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var item = ClockSource.doClockObserverDialog(m.getCircuit());
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var m = getLogFrame().getModel();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:        final var d = clockDiscipline.getValue();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:        final var discipline = clockDisciplines[Arrays.asList(clockDisciplineNames).indexOf(d)];
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      var s = Model.formatDuration(v);
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var fine = stepFine.isSelected();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var fine = realFine.isSelected();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var disciplineName = clockDiscipline.getValue();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var discipline =
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var m = getLogFrame().getModel();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var clockSource = m.getClockSourceInfo();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var dgate = clockGate.getText();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var t = clockScale.getValue();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var dCycle = clockScale.renderAsText(t * ticks);
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:      final var dTick = clockScale.renderAsText(t);
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var n = newModel.getHistoryLimit();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var clockSource = newModel.getClockSourceInfo();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    final var m = getLogFrame().getModel();
src/main/java/com/cburch/logisim/gui/log/OptionsPanel.java:    for (var i = 0; i < clockDisciplines.length; i++)
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var ret = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var g = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      for (final var r : RadixOption.OPTIONS) {
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:        final var m = new JRadioButtonMenuItem(r.toDisplayString());
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var m = new JMenuItem("Delete");
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var margin = getColumnModel().getColumnMargin();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var d = new Dimension(getColumnModel().getTotalColumnWidth(), getRowHeight());
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var inputMap = getInputMap();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var actionMap = getActionMap();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    var idx = 0;
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var items = getSelectedValuesList();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    for (final var item : items) {
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var count = logModel.remove(items);
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var listModel = (SelectionListModel) getModel();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var items = new SignalInfo.List();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var sel = getSelectedRows();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    for (final var i : sel) items.add(logModel.getItem(i));
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var items = new SignalInfo.List();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:        final var items = (SignalInfo.List) support.getTransferable().getTransferData(SignalInfo.List.dataFlavor);
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:        var newIdx = logModel.getSignalCount();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:            final var dl = (JTable.DropLocation) support.getDropLocation();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    for (final var item : items) {
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:      final var i = logModel.indexOf(item);
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var f = g.getFont();
src/main/java/com/cburch/logisim/gui/log/SelectionList.java:    final var c = g.getColor();
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var explorerPane =
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var listPane =
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var gridbag = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var addArrow = new JButton(new FatArrowIcon(Direction.EAST));
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var delArrow = new JButton(new FatArrowIcon(Direction.WEST));
src/main/java/com/cburch/logisim/gui/log/SelectionPanel.java:    final var arrowBox = new Box(BoxLayout.Y_AXIS);
src/main/java/com/cburch/logisim/gui/log/Signal.java:    var t = timeStart;
src/main/java/com/cburch/logisim/gui/log/Signal.java:    for (var p = 0; p < curSize; p++) {
src/main/java/com/cburch/logisim/gui/log/Signal.java:      var i = (firstIndex + p) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var i = (firstIndex + curSize - 1) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var i = (firstIndex + curSize - 1) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var c = val.length;
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var cap = CHUNK * (c - 1) + val[c - 1].length;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var val2 = new Value[c + 1][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var dur2 = new long[c + 1][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var i = (firstIndex + curSize - 1) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var j = (i + curSize - 1) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var valueNew = new Value[c][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var durNew = new long[c][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var c = (amt + CHUNK - 1) / CHUNK;
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var last = cap == 0 ? CHUNK : Math.min(CHUNK, cap - (c - 1) * CHUNK);
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var v = new Value[c][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var d = new long[c][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:    for (var i = 0; i < c; i++) {
src/main/java/com/cburch/logisim/gui/log/Signal.java:    for (var p = 0; p < amt; p++) {
src/main/java/com/cburch/logisim/gui/log/Signal.java:        final var c = val.length;
src/main/java/com/cburch/logisim/gui/log/Signal.java:        final var cap = CHUNK * (c - 1) + val[c - 1].length;
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var last = Math.min(CHUNK, newMaxSize - (c - 1) * CHUNK);
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var v = new Value[last];
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var d = new long[last];
src/main/java/com/cburch/logisim/gui/log/Signal.java:        final var discard = (maxSize - newMaxSize);
src/main/java/com/cburch/logisim/gui/log/Signal.java:        for (var p = 0; p < discard; p++) {
src/main/java/com/cburch/logisim/gui/log/Signal.java:          final var i = (firstIndex + p) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var val2 = new Value[1][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var dur2 = new long[1][];
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var i = firstIndex;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var width = info.getWidth();
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var i = (firstIndex + position) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var width = info.getWidth();
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var t = time + timeFwd;
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var width = info.getWidth();
src/main/java/com/cburch/logisim/gui/log/Signal.java:    var tt = timeStart;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var i = (firstIndex + p) % curSize;
src/main/java/com/cburch/logisim/gui/log/Signal.java:      final var d = dur[i / CHUNK][i % CHUNK];
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var width = info.getWidth();
src/main/java/com/cburch/logisim/gui/log/Signal.java:    final var width = info.getWidth();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:      var changed = false;
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:        final var t = circ[i];
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:        final var c = path[i];
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:        final var repl = event.getResult().getReplacementMap(t);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:        final var newComps = repl.getReplacementsFor(c);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:        for (final var c2 : newComps) {
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:            final var factory = (SubcircuitFactory) path[i].getFactory();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var log = (LoggableContract) c.getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var log = (LoggableContract) path[n - 1].getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var w = bw.getWidth();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var buf = new StringBuilder();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    for (var i = 0; i < n - 1; i++) buf.append(logName(path[i], null)).append("/");
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var f = buf.toString();
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    final var log = (LoggableContract) path[n - 1].getFeature(LoggableContract.class);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    var cur = root;
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    for (var i = 0; i < n - 1; i++) cur = circ[i].getSubcircuitFactory().getSubstate(cur, path[i]);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    for (final var t : circ) t.removeCircuitListener(this);
src/main/java/com/cburch/logisim/gui/log/SignalInfo.java:    for (final var c : path) c.getAttributeSet().removeAttributeListener(this);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var pane =
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var model = getModel();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var x = event.getX() - (getWidth() - tableWidth) / 2;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var ret = (x + COLUMN_SEP / 2) / (cellWidth + COLUMN_SEP);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var y = event.getY() - (getHeight() - tableHeight) / 2;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:    final var ret = (y - cellHeight - HEADER_SEP) / cellHeight;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var model = getModel();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var columns = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var g = getGraphics();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:        final var fm = g.getFontMetrics(HEAD_FONT);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var sz = getSize();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var model = getModel();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var columns = model.getSignalCount();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var lineY = top + cellHeight + HEADER_SEP / 2;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var headerMetric = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      var x = left;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var y = top + headerMetric.getAscent() + 1;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      for (var i = 0; i < columns; i++) {
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      // final var bodyMetric = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      // final var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      // final var firstRow = Math.max(0, (clip.y - y) / cellHeight - 1);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      // final var lastRow = Math.min(rowCount, 2 + (clip.y + clip.height - y) / cellHeight);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      // final var y0 = top + cellHeight + HEADER_SEP;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var width = fm.stringWidth(header);
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var curY = getValue();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var curHeight = getVisibleAmount();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      var numCells = curHeight / cellHeight - 1;
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var curY = getValue();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var newMaximum = getMaximum();
src/main/java/com/cburch/logisim/gui/log/TablePanel.java:      final var newExtent = getVisibleAmount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var oldCellHeight = cellHeight;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var oldTableWidth = tableWidth;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var oldTableHeight = tableHeight;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var columns = model == null ? 0 : model.getColumnCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var g = getGraphics();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      var cellsWidth = 0;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var headerMetric = g.getFontMetrics(HEAD_FONT);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var bodyMetric = g.getFontMetrics(BODY_FONT);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        for (var i = 0; i < columns; i++) {
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:          final var radix = model.getColumnValueRadix(i);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:          final var header = model.getColumnName(i);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:          var cellWidth = Math.max(24, headerMetric.stringWidth(header));
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:          final var w = model.getColumnValueWidth(i);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:            final var val =
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:            final var label = val.toDisplayString(radix);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var headSize = new Dimension(tableWidth, cellHeight + HEADER_SEP);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var bodySize = new Dimension(tableWidth, tableHeight);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    var left = Math.max(0, (width - tableWidth) / 2);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var columns = model.getColumnCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    for (var i = 0; i < columns; i++) {
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var cellWidth = columnWidth[i];
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var row = y / cellHeight;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var columns = model == null ? 0 : model.getColumnCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var rows = model.getRowCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    var topRow = Math.min(rows - 1, Math.max(0, top / cellHeight));
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    var bottomRow = Math.min(rows - 1, Math.max(0, bottom / cellHeight));
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:    final var rect = scrollPane.getViewport().getViewRect();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var sz = getSize();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var columns = model == null ? 0 : model.getColumnCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var bodyMetric = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var firstRow = Math.max(0, clip.y / cellHeight);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var lastRow = Math.min(model.getRowCount() - 1, (clip.y + clip.height) / cellHeight);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      var top = 0;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var left = Math.max(0, (sz.width - tableWidth) / 2);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      var x = left + COLUMN_SEP;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var bg = getBackground();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var cellWidth = columnWidth[col];
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var radix = model.getColumnValueRadix(col);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        for (var row = firstRow; row <= lastRow; row++) {
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:          final var cell = rowData[row - rowStart][col];
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:            final var label =
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:            final var width = bodyMetric.stringWidth(label);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var sz = getSize();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var columns = model == null ? 0 : model.getColumnCount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var headerMetric = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var top = 0;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var left = Math.max(0, (sz.width - tableWidth) / 2);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      var x = left + COLUMN_SEP;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var y = top + headerMetric.getAscent() + 1;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      for (var i = 0; i < columns; i++) {
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var label = model.getColumnName(i);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var cellWidth = columnWidth[i];
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var width = headerMetric.stringWidth(label);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:        final var col = model == null ? -1 : findColumn(e.getX(), getSize().width);
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var curHeight = getVisibleAmount();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      var numCells = curHeight / cellHeight - 1;
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var newMaximum = getMaximum();
src/main/java/com/cburch/logisim/gui/log/ValueTable.java:      final var newExtent = getVisibleAmount();
src/main/java/com/cburch/logisim/gui/main/AttrTableComponentModel.java:        final var mayBeChangedList = compAttrSet.attributesMayAlsoBeChanged(attr, value);
src/main/java/com/cburch/logisim/gui/main/AttrTableComponentModel.java:          for (final var mayChangeAttr : mayBeChangedList) {
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:    final var selection = frame.getCanvas().getSelection();
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:    final var circuit = frame.getCanvas().getCircuit();
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:      final var circuitModel = new AttrTableCircuitModel(project, circuit);
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:      final var act = new SetAttributeAction(circuit, S.getter("selectionAttributeAction"));
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:      final var comps = new TreeSet<>(new PositionComparator());
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:      for (final var comp : comps) {
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:                final var mutation = new CircuitMutation(fac.getSubcircuit());
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:                final var action = mutation.toAction(null);
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:            final var compAttrSet = comp.getAttributeSet();
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:              final var mayBeChangedList = compAttrSet.attributesMayAlsoBeChanged(attr, value);
src/main/java/com/cburch/logisim/gui/main/AttrTableSelectionModel.java:                for (final var mayChangeAttr : mayBeChangedList) {
src/main/java/com/cburch/logisim/gui/main/Canvas.java:    final var oldColor = g.getColor();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:      final var loc = Location.create(event.getX(), event.getY(), false);
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        var zoomModel = proj.getFrame().getZoomModel();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:      final var tool = proj.getTool();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        var zoomControl = proj.getFrame().getZoomControl();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        var rect = getViewableRect();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        var zoom = proj.getFrame().getZoomModel().getZoomFactor();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        final var id = (mwe.getWheelRotation() < 0) ? KeyEvent.VK_UP : KeyEvent.VK_DOWN;
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        final var e = new KeyEvent(mwe.getComponent(), KeyEvent.KEY_PRESSED, mwe.getWhen(), 0, id, '\0');
src/main/java/com/cburch/logisim/gui/main/Canvas.java:        final var hz = tickCounter.getTickRate();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:          final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:      final var old = g.getFont();
src/main/java/com/cburch/logisim/gui/main/Canvas.java:      var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var exceptions = proj.getCurrentCircuit().getWidthIncompatibilityData();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var fm = base.getFontMetrics(g.getFont());
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    for (final var ex : exceptions) {
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var common = ex.getCommonBitWidth();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        final var p = ex.getPoint(i);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        final var w = ex.getBitWidth(i);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        var drawn = false;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        for (var j = 0; j < i; j++) {
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        var caption = "" + w.getWidth();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:        for (var j = i + 1; j < ex.size(); j++) {
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var dragTool = canvas.getDragTool();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var showHalo = AppPreferences.ATTRIBUTE_HALO.getBoolean();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var bds = haloedComponent.getBounds(g).expand(5);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var width = bds.getWidth();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var height = bds.getHeight();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var a = Canvas.SQRT_2 * width;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var b = Canvas.SQRT_2 * height;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var circState = proj.getCircuitState();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var context = new ComponentDrawContext(canvas, circ, circState, base, g, false);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var tool = dragTool != null ? dragTool : proj.getTool();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:      final var gfxCopy = g.create();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var comp = haloedComponent;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var bds = comp.getBounds(gfx).expand(7);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var width = bds.getWidth();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var height = bds.getHeight();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var a = Canvas.SQRT_2 * width;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var b = Canvas.SQRT_2 * height;
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var size = canvas.getSize();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var gfxScaled = g.create();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var circState = proj.getCircuitState();
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    var ptContext = new ComponentDrawContext(canvas, circ, circState, g, gfxScaled);
src/main/java/com/cburch/logisim/gui/main/CanvasPainter.java:    final var g = canvas.getGraphics();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var canvasPane = new CanvasPane(layoutCanvas);
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var explPanel = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var simPanel = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var attrFooter = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var bottomTabAndZoom = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var state = new VhdlSimState(project);
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var prefPoint = getInitialLocation();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var tmpOrient = Direction.parse(AppPreferences.CANVAS_PLACEMENT.get());
src/main/java/com/cburch/logisim/gui/main/Frame.java:        final var isSwapped = (orientation == Direction.WEST);
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var config = new ZoomStepPair[] {new ZoomStepPair(50, 5), new ZoomStepPair(200, 10), new ZoomStepPair(1000, 20)};
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var steps = new ArrayList<Double>();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    var zoom = 0D;
src/main/java/com/cburch/logisim/gui/main/Frame.java:    for (final var pair : config) {
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var s = AppPreferences.WINDOW_LOCATION.get();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var comma = s.indexOf(',');
src/main/java/com/cburch/logisim/gui/main/Frame.java:      var x = Integer.parseInt(s.substring(0, comma));
src/main/java/com/cburch/logisim/gui/main/Frame.java:      var y = Integer.parseInt(s.substring(comma + 1));
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var desired = new Rectangle(x, y, 50, 50);
src/main/java/com/cburch/logisim/gui/main/Frame.java:      var gcBestSize = 0;
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      for (final var gd : ge.getScreenDevices()) {
src/main/java/com/cburch/logisim/gui/main/Frame.java:        for (final var gc : gd.getConfigurations()) {
src/main/java/com/cburch/logisim/gui/main/Frame.java:          final var gcBounds = gc.getBounds();
src/main/java/com/cburch/logisim/gui/main/Frame.java:            final var inter = gcBounds.intersection(desired);
src/main/java/com/cburch/logisim/gui/main/Frame.java:            final var size = inter.width * inter.height;
src/main/java/com/cburch/logisim/gui/main/Frame.java:    for (final var current : Projects.getOpenProjects()) {
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var frame = current.getFrame();
src/main/java/com/cburch/logisim/gui/main/Frame.java:        final var loc = frame.getLocationOnScreen();
src/main/java/com/cburch/logisim/gui/main/Frame.java:        final var d = Math.abs(loc.x - x) + Math.abs(loc.y - y);
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var circuit = project.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var name = project.getLogisimFile().getName();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var title = new StringBuilder();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var message = S.get("confirmDiscardMessage", project.getLogisimFile().getName());
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var result = OptionPane.showOptionDialog(this, message, title, 0, OptionPane.QUESTION_MESSAGE, null, options, options[0]);
src/main/java/com/cburch/logisim/gui/main/Frame.java:    var ret = false;
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var curView = mainPanel.getView();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      var app = appearance;
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var loc = AppPreferences.TOOLBAR_PLACEMENT.get();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      var value = BorderLayout.NORTH;
src/main/java/com/cburch/logisim/gui/main/Frame.java:      for (final var dir : Direction.cardinals) {
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var vertical = BorderLayout.WEST.equals(value) || BorderLayout.EAST.equals(value);
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var appearanceZoom = appearance.getZoomModel();
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var state = getExtendedState() & ~JFrame.ICONIFIED;
src/main/java/com/cburch/logisim/gui/main/Frame.java:    final var dim = getSize();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var tool = model.getTool();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var circ = model.getCircuit();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var comp = model.getComponent();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var oldModel = attrTable.getAttrTableModel();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var same = (oldModel instanceof AttrTableToolModel model) && model.getTool() == oldTool;
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var circ = project.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var ok = getProject().isFileDirty();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/main/Frame.java:        final var oldTool = (Tool) event.getOldData();
src/main/java/com/cburch/logisim/gui/main/Frame.java:        final var newTool = (Tool) event.getData();
src/main/java/com/cburch/logisim/gui/main/Frame.java:      final var source = event.getSource();
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    final var proj = frame.getProject();
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    final var sel = proj == null ? null : proj.getSelection();
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    final var selEmpty = (sel == null || sel.isEmpty());
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    final var canChange = proj != null && proj.getLogisimFile().contains(proj.getCurrentCircuit());
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    var selectAvailable = false;
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    for (final var lib : proj.getLogisimFile().getLibraries()) {
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:    for (final var sub : proj.getLogisimFile().getLibraries()) {
src/main/java/com/cburch/logisim/gui/main/LayoutEditHandler.java:        final var tool = baseLibrary.getTool(EditTool._ID);
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    final var data = proj.getOptions().getToolbarData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    for (final var item : items) {
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    final var oldItems = items;
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    final var newItems = new ArrayList<ToolbarItem>();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    final var data = proj.getLogisimFile().getOptions().getToolbarData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:    for (final var tool : data.getContents()) {
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:        final var i = findItem(oldItems, tool);
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      final var act = e.getAction();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:        final var old = (LogisimFile) e.getOldData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:          final var data = old.getOptions().getToolbarData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:        final var file = (LogisimFile) e.getData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:          final var data = file.getOptions().getToolbarData();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      final var pad = 2 * AppPreferences.ICON_BORDER;
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      var ret = tool.getDescription();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      var index = 1;
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      for (final var item : items) {
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:        final var mask = frame.getToolkit().getMenuShortcutKeyMaskEx();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      final var gfxCopy = gfx.create();
src/main/java/com/cburch/logisim/gui/main/LayoutToolbarModel.java:      final var c = new ComponentDrawContext(destination, null, null, gfx, gfxCopy);
src/main/java/com/cburch/logisim/gui/main/Print.java:      var circ = circuits.get(pageIndex);
src/main/java/com/cburch/logisim/gui/main/Print.java:      final var circState = proj.getCircuitState(circ);
src/main/java/com/cburch/logisim/gui/main/Print.java:      var g = base.create();
src/main/java/com/cburch/logisim/gui/main/Print.java:      var g2 = g instanceof Graphics2D ? (Graphics2D) g : null;
src/main/java/com/cburch/logisim/gui/main/Print.java:      var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/main/Print.java:      var head =
src/main/java/com/cburch/logisim/gui/main/Selection.java:        var loc = c.getLocation();
src/main/java/com/cburch/logisim/gui/main/Selection.java:        var gfxNew = g.create();
src/main/java/com/cburch/logisim/gui/main/Selection.java:        var gfxNew = g.create();
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var i = findIndex(attr);
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var vs = values;
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/gui/main/SelectionAttributes.java:      final var ro = readOnly;
src/main/java/com/cburch/logisim/gui/main/SelectionBase.java:      final var newLoc = Location.create(newX, newY, false);
src/main/java/com/cburch/logisim/gui/main/SimulationToolbarModel.java:    final var sim = project.getSimulator();
src/main/java/com/cburch/logisim/gui/main/SimulationToolbarModel.java:    final var running = sim != null && sim.isAutoPropagating();
src/main/java/com/cburch/logisim/gui/main/SimulationToolbarModel.java:    final var ticking = sim != null && sim.isAutoTicking();
src/main/java/com/cburch/logisim/gui/main/SimulationTreeCircuitNode.java:      var nameA = a.getFactory().getDisplayName();
src/main/java/com/cburch/logisim/gui/main/SimulationTreeCircuitNode.java:      var nameB = b.getFactory().getDisplayName();
src/main/java/com/cburch/logisim/gui/main/SimulationTreeCircuitNode.java:      final var factory = (SubcircuitFactory) comp.getFactory();
src/main/java/com/cburch/logisim/gui/main/SimulationTreeCircuitNode.java:      final var state = factory.getSubstate(circuitState, comp);
src/main/java/com/cburch/logisim/gui/main/SimulationTreeCircuitNode.java:      for (final var treeNode : children) {
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    var table = new StatisticsTable();
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    final var tablePane = new JScrollPane(table);
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    var button = new JButton(S.get("statsCloseButton"));
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    var contents = this.getContentPane();
src/main/java/com/cburch/logisim/gui/main/StatisticsDialog.java:    var pref = contents.getPreferredSize();
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:      final var tickPeriodNanoseconds = NANOSECONDS_PER_SECONDS / simulator.getTickFrequency();
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:    final var currentFrequency = simulator.getTickFrequency();
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:    final var elapsedTime = System.nanoTime() - startTime;
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:    final var ticksPerNanoseconds = (double) tickCount / elapsedTime;
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:    final var fullCyclesPerSeconds = NANOSECONDS_PER_SECONDS / 2.0 * ticksPerNanoseconds; // 2 ticks per cycles
src/main/java/com/cburch/logisim/gui/main/TickCounter.java:      final var nanoseconds = WEIGHT_REDUCTION_TICKS_COUNT / ticksPerNanoseconds;
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:      final var factory = factoryAttributes.getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:        for (final var attr : config.getAttributeValues().keySet()) {
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:        for (final var attr : config.getAttributeValues().keySet()) {
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:        final var factory = factoryAttributes.getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:          final var circuit = sub.getSubcircuit();
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:          for (final var supercirc : circuit.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/gui/main/ToolAttributeAction.java:          for (final var supercirc : vhdl.getCircuitsUsingThis()) {
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      final var tool = toolNode.getValue();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var factory = ((AddTool) tool).getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var source = tool.getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      final var baseTool = toolNode.getValue();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var source = tool.getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      final var lib = libNode.getValue();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var isTop = event.getTreePath().getPathCount() <= 2;
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      final var tool = toolNode.getValue();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var source = addTool.getFactory();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:          final var circ = circFact.getSubcircuit();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:      for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/gui/main/ToolboxManip.java:        final var attrs = tool.getAttributeSet();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var windowMenu = new JMenu("Window");
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var fileMenu = new JMenu("File");
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var main = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var north = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 2));
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      final var fileChooser = proj.createChooser();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      final var ff =
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var comps = curCircuit.getNonWires();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:    final var iter = comps.iterator();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      final var comp = iter.next();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      final var objArr = entry.keySet().toArray();
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      for (final var obj : objArr) {
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:      final var val = curCircuitState.getInstanceState(selReg).getPortValue(Register.OUT);
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:        final var pattern =
src/main/java/com/cburch/logisim/gui/menu/AssemblyWindow.java:        final var m = pattern.matcher(document.getText().replaceAll("\r", ""));
src/main/java/com/cburch/logisim/gui/menu/EditHandler.java:    final var l = listener;
src/main/java/com/cburch/logisim/gui/menu/EditHandler.java:    final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/EditPopup.java:      final var menu = new JMenuItem(display);
src/main/java/com/cburch/logisim/gui/menu/EditPopup.java:    var x = false;
src/main/java/com/cburch/logisim/gui/menu/EditPopup.java:      final var source = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/EditPopup.java:      for (final var entry : items.entrySet()) {
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var item = menuItems.get(which);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var item = menuItems.get(which);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var item = menuItems.get(which);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var e = new ChangeEvent(this);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    for (final var listener : enableListeners) {
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var menuItem = menuItems.get(item);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var item = menuItems.get(which);
src/main/java/com/cburch/logisim/gui/menu/LogisimMenuBar.java:    final var item = menuItems.get(which);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var cur = proj == null ? null : proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var proj = frame == null ? null : frame.getProject();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var file = proj == null ? null : proj.getLogisimFile();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var cur = proj == null ? null : proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var curIndex = file == null ? -1 : file.indexOfCircuit(cur);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var editorView = frame == null ? "" : frame.getEditorView();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var viewAppearance = editorView.equals(Frame.EDIT_APPEARANCE);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var viewLayout = editorView.equals(Frame.EDIT_LAYOUT);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      var canSetMain = false;
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      var canMoveUp = false;
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      var canMoveDown = false;
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      var canRemove = false;
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      var canRevert = false;
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var file = proj.getLogisimFile();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var cur = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var isProjectCircuit = file.contains(cur);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var viewAppearance = frame.getEditorView().equals(Frame.EDIT_APPEARANCE);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var canRevert = isProjectCircuit && viewAppearance && !cur.getAppearance().isDefaultAppearance();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var oldValue = menubar.isEnabled(LogisimMenuBar.REVERT_APPEARANCE);
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/gui/menu/MainMenuListener.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:    final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:      final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:      final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:      final var last = (proj != null) ? proj.getLastAction() : null;
src/main/java/com/cburch/logisim/gui/menu/MenuEdit.java:      final var next = (proj == null || !proj.getCanRedo()) ? null : proj.getLastRedoAction();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:    final var menuMask = getToolkit().getMenuShortcutKeyMaskEx();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:    final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:    final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:    final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:    final var baseProj = menubar.getBaseProject();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:      final var newProj =
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:      var result = 0;
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:      final var frame = proj.getFrame();
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:        final var message =
src/main/java/com/cburch/logisim/gui/menu/MenuFile.java:        final var projectList = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/gui/menu/MenuHelp.java:    final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuHelp.java:    var helpUrl = S.get("helpsetUrl");
src/main/java/com/cburch/logisim/gui/menu/MenuHelp.java:      final var loader = MenuHelp.class.getClassLoader();
src/main/java/com/cburch/logisim/gui/menu/MenuHelp.java:        final var hsUrl = HelpSet.findHelpSet(loader, helpUrl);
src/main/java/com/cburch/logisim/gui/menu/MenuItemHelper.java:      final var e =
src/main/java/com/cburch/logisim/gui/menu/MenuListener.java:      for (final var item : LogisimMenuBar.EDIT_ITEMS) {
src/main/java/com/cburch/logisim/gui/menu/MenuListener.java:        for (final var item : LogisimMenuBar.EDIT_ITEMS) {
src/main/java/com/cburch/logisim/gui/menu/MenuProject.java:    final var known = menubar.getSaveProject() != null;
src/main/java/com/cburch/logisim/gui/menu/MenuProject.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuProject.java:      final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var menuMask = getToolkit().getMenuShortcutKeyMaskEx();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var bgroup = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    for (var i = 0; i < SUPPORTED_TICK_FREQUENCIES.length; i++) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    for (final var supportedTickFrequency : SUPPORTED_TICK_FREQUENCIES) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var small =
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var freqHz =
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var kf = Math.round(supportedTickFrequency / 100) / 10.0;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var freqKhz = "" + ((kf == Math.round(kf)) ? (int) kf : kf);
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    for (final var item : items) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var present = currentState != null;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    for (final var freq : tickFreqs) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    var first = true;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var mask = getToolkit().getMenuShortcutKeyMaskEx();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    for (var i = items.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var item = items.get(i);
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var oldSim = currentSim;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var oldState = currentState;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      var cur = bottomState;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var oldPresent = oldState != null;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    final var present = currentState != null;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var freq = currentSim == null ? 1.0 : currentSim.getTickFrequency();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      for (final var tickFrequencyChoice : tickFreqs) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:    var cur = bottomState;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var circuit = circuitState.getCircuit();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var proj = menubar.getSimulationProject();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var vhdl = proj.getVhdlSimulator();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var sim = proj.getSimulator();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var sim = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      final var freq = sim.getTickFrequency();
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:      for (final var item : tickFreqs) {
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var small = Math.abs(f - Math.round(f)) < 0.0001;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var freqHz = "" + (small ? (int) Math.round(f) : f);
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var kf = Math.round(f / 100) / 10.0;
src/main/java/com/cburch/logisim/gui/menu/MenuSimulate.java:        final var freqKhz = "" + ((kf == Math.round(kf)) ? (int) kf : kf);
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:    for (final var item : recentItems) {
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:    for (var index = recentItems.size() - 1; index >= 0; index--) {
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:    final var files = AppPreferences.getRecentFiles();
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:      for (final var file : files) {
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:      final var proj = menubar.getSaveProject();
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:      final var baseProj = menubar.getBaseProject();
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:      final var parent =
src/main/java/com/cburch/logisim/gui/menu/OpenRecent.java:      final var newProj = ProjectActions.doOpen(parent, baseProj, file);
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var canChange = proj.getLogisimFile().contains(circuit);
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var file = proj.getLogisimFile();
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var source = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var source = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/Popups.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var format = new PageFormat();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var job = PrinterJob.getPrinterJob();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var imWidth = pf.getImageableWidth();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var imHeight = pf.getImageableHeight();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var g = (Graphics2D) pg;
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var chooser = JFileChoosers.createSelected(getLastExported());
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    for (final var ff : filters) {
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var returnVal =
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    var dest = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    for (final var filter : filters) {
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:      final var confirm =
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var fmt =
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var d = getExportImageSize();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var img = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_RGB);
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var base = (fmt == ExportImage.FORMAT_TIKZ || fmt == ExportImage.FORMAT_SVG) ? new TikZWriter() : img.getGraphics();
src/main/java/com/cburch/logisim/gui/menu/PrintHandler.java:    final var gr = base.create();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var name = promptForCircuitName(proj.getFrame(), proj.getLogisimFile(), "");
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:        final var circuit = new Circuit(name, proj.getLogisimFile(), proj);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    for (final var myLib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    for (final var myTool : lib.getTools()) {
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var name = promptForVhdlName(proj.getFrame(), proj.getLogisimFile(), "");
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var content = VhdlContent.create(name, proj.getLogisimFile());
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var vhdl = proj.getLogisimFile().getLoader().vhdlImportChooser(proj.getFrame());
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var content = VhdlContent.parse(null, vhdl, proj.getLogisimFile());
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var pinNames = Analyze.getPinLabels(circuit);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var inputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var outputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    var numInputs = 0;
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    var numOutputs = 0;
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    for (final var entry : pinNames.entrySet()) {
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var isInput = Pin.FACTORY.isInputPin(pin);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var v = new Var(entry.getValue(), width);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var analyzer = AnalyzerManager.getAnalyzer(proj.getFrame());
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var tool = proj.getLogisimFile().getAddTool(cur);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var oldPos = proj.getLogisimFile().indexOfCircuit(cur);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var newPos = oldPos + delta;
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:      final var toolsCount = proj.getLogisimFile().getTools().size();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var name = promptForNewName(frame, file, initialValue, true);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var field = new JTextField(15);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var gb = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var gc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var strut = new JPanel(null);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var label = new JLabel(prompt);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var panel = new JPanel(gb);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var error = new JLabel(" ");
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var pane =
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var dlog = pane.createDialog(frame, title);
src/main/java/com/cburch/logisim/gui/menu/ProjectCircuitActions.java:    final var action = pane.getValue();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var file = proj.getLogisimFile();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var baseBuilt = file.getLoader().getBuiltin().getLibraries();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var builtins = new ArrayList<>(baseBuilt);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var list = new LibraryJList(builtins);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var listPane = new JScrollPane(list);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var libs = list.getSelectedLibraries();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var chooser = loader.createChooser();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      try (final var jarFile = new JarFile(f)) {
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:        final var manifest = jarFile.getManifest();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var lib = loader.loadJarLibrary(f, className);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var chooser = loader.createChooser();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var check = chooser.showOpenDialog(proj.getFrame());
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var lib = loader.loadLogisimLibrary(f);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var file = proj.getLogisimFile();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var canUnload = new ArrayList<Library>();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    for (final var lib : file.getLibraries()) {
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var message = file.getUnloadLibraryMessage(lib);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var list = new LibraryJList(canUnload);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var listPane = new JScrollPane(list);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var action =
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var libs = list.getSelectedLibraries();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:    final var message = proj.getLogisimFile().getUnloadLibraryMessage(lib);
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var options = new ArrayList<BuiltinOption>();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      for (final var lib : libraries) {
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:      final var selected = getSelectedValuesList().toArray();
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:        final var libs = new Library[selected.length];
src/main/java/com/cburch/logisim/gui/menu/ProjectLibraryActions.java:        for (var i = 0; i < selected.length; i++) {
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:    final var nowOpen = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:    final var closed = new HashSet<>(projectMap.keySet());
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:    for (final var proj : closed) {
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:      final var manager = projectMap.get(proj);
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:    final var opened = new LinkedHashSet<>(nowOpen);
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:    for (final var proj : opened) {
src/main/java/com/cburch/logisim/gui/menu/WindowManagers.java:      final var manager = new ProjectManager(proj);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var mapPane = new JScrollPane(mappings);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var removeArea = new JPanel();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var gridbag = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var explorerPane = new JScrollPane(explorer, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:    final var gap = new JPanel();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var sz = getSize();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var x1 = (sz.width - fm.stringWidth(label1)) / 2;
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var y = Math.max(0, (sz.height - fm.getHeight()) / 2 + fm.getAscent() - 2);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var x2 = (sz.width - fm.stringWidth(label2)) / 2;
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        var y = Math.max(0, (sz.height - 2 * fm.getHeight()) / 2 + fm.getAscent() - 2);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      var row = Collections.binarySearch(curKeys, mods);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var key = curKeys.get(row);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        var row = mappings.getSelectedRow();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var t = curTool.cloneTool();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:      final var target = event.getTarget();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var tool = model.getTool(row);
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var proj = getProject();
src/main/java/com/cburch/logisim/gui/opts/MouseOptions.java:        final var model = (tool.getAttributeSet() != null) ? new AttrTableToolModel(proj, tool) : null;
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:          final var action = event.getAction();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:    for (final var panel : panels) {
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:    final var contents = getContentPane();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:    final var file = project.getLogisimFile();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:    final var name = (file == null) ? "???" : file.getName();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:    final var title = S.get("optionsFrameTitle", name);
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:      final var buttonPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:        final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:      for (var i = 0; i < panels.length; i++) {
src/main/java/com/cburch/logisim/gui/opts/OptionsFrame.java:      final var title = project.getLogisimFile().getDisplayName();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:    final var simLimitPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:    final var gateUndefinedPanel = new JPanel();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:    final var attrs = getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:      final var source = event.getSource();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:        final var opt = (Integer) simLimit.getSelectedItem();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:          final var attrs = getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:        final var attrs = getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:        final var opt = (ComboOption) gateUndefined.getSelectedItem();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:          final var attrs = getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:        final var sim = getProject().getSimulator();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:      final var val = e.getValue();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:      final var value = val;
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:      final var model = simLimit.getModel();
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:      for (var i = 0; i < model.getSize(); i++) {
src/main/java/com/cburch/logisim/gui/opts/SimulateOptions.java:        final var opt = (Integer) model.getElementAt(i);
src/main/java/com/cburch/logisim/gui/opts/ToolbarList.java:      final var gfxNew = g.create();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var middleLayout = new TableLayout(1);
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var middle = new JPanel(middleLayout);
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var gridbag = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var explorerPane =
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:    final var listPane =
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var index = list.getSelectedIndex();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var oldIndex = list.getSelectedIndex();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var newIndex = oldIndex + delta;
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var data = getOptions().getToolbarData();
src/main/java/com/cburch/logisim/gui/opts/ToolbarOptions.java:      final var target = event.getTarget();
src/main/java/com/cburch/logisim/gui/prefs/ColorChooserButton.java:    final var but = (JButton) e.getSource();
src/main/java/com/cburch/logisim/gui/prefs/ColorChooserButton.java:      var col = new Color(myMonitor.get());
src/main/java/com/cburch/logisim/gui/prefs/ColorChooserButton.java:      final var newCol = ColorPickerDialog.showDialog(frame, col, false);
src/main/java/com/cburch/logisim/gui/prefs/ExperimentalOptions.java:    final var accelPanel = new JPanel(new BorderLayout());
src/main/java/com/cburch/logisim/gui/prefs/ExperimentalOptions.java:    final var accelPanel2 = new JPanel();
src/main/java/com/cburch/logisim/gui/prefs/IntlOptions.java:    final var localePanel = new Box(BoxLayout.X_AXIS);
src/main/java/com/cburch/logisim/gui/prefs/IntlOptions.java:    final var shapePanel = new JPanel();
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:    for (var i = 0; i < 2; i++) {
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:      final var opts = RadixOption.OPTIONS;
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:      final var items = new PrefOption[opts.length];
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:      for (var j = 0; j < RadixOption.OPTIONS.length; j++) {
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:    final var panel = new JPanel(new TableLayout(2));
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:    for (final var check : checks) {
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:    for (final var check : checks) {
src/main/java/com/cburch/logisim/gui/prefs/LayoutOptions.java:      final var update = evt.getKey().equals(AppPreferences.PinAppearance.getIdentifier());
src/main/java/com/cburch/logisim/gui/prefs/PrefOption.java:    for (var i = combo.getItemCount() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/prefs/PrefOption.java:      final var opt = combo.getItemAt(i);
src/main/java/com/cburch/logisim/gui/prefs/PrefOptionList.java:    for (final var opt : options) {
src/main/java/com/cburch/logisim/gui/prefs/PrefOptionList.java:    final var x = (PrefOption) combo.getSelectedItem();
src/main/java/com/cburch/logisim/gui/prefs/PrefOptionList.java:    final var ret = new JPanel();
src/main/java/com/cburch/logisim/gui/prefs/PrefOptionList.java:    for (var i = combo.getItemCount() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/gui/prefs/PrefOptionList.java:      final var opt = combo.getItemAt(i);
src/main/java/com/cburch/logisim/gui/prefs/PreferencesFrame.java:    for (var index = 0; index < panels.length; index++) {
src/main/java/com/cburch/logisim/gui/prefs/PreferencesFrame.java:      final var panel = panels[index];
src/main/java/com/cburch/logisim/gui/prefs/PreferencesFrame.java:    final var contents = getContentPane();
src/main/java/com/cburch/logisim/gui/prefs/PreferencesFrame.java:    final var frame = MENU_MANAGER.getJFrame(true, null);
src/main/java/com/cburch/logisim/gui/prefs/PreferencesFrame.java:    final var frame = (PreferencesFrame) MENU_MANAGER.getJFrame(true, null);
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:      var update = false;
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:      final var key = evt.getKey();
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:        for (final var proj : Projects.getOpenProjects()) proj.getFrame().repaint();
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:      var seldef = -1;
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:      for (var i = 0; i < choices.length(); i++) {
src/main/java/com/cburch/logisim/gui/prefs/SimOptions.java:        final var me = (JComboBox<Character>) e.getSource();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:    final var bgroup = new ButtonGroup();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:    final var gridbag = new GridBagLayout();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:    final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:    final var strut = new JPanel();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:      final var src = event.getSource();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:        final var chooser = JFileChoosers.create();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:          final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:            final var loader = new Loader(getPreferencesFrame());
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:            final var template = Template.create(reader);
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:        var value = AppPreferences.TEMPLATE_UNKNOWN;
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:      final var prop = event.getPropertyName();
src/main/java/com/cburch/logisim/gui/prefs/TemplateOptions.java:        final var value = AppPreferences.getTemplateType();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    final var listener = new SettingsChangeListener();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    final var panel = new JPanel(new TableLayout(2));
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    final var gridColorsResetButton = new JButton();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    var index = 0;
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    for (final var info : lookAndFeelInfos) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    final var previewLabel = new JLabel(S.get("windowToolbarPreview"));
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    final var but = new JButton();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    for (final var check : checks) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:    for (final var check : checks) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:      final var source = (JSlider) e.getSource();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        final var nowOpen = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        for (final var proj : nowOpen) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        final var nowOpen = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        for (final var proj : nowOpen) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        final var nowOpen = Projects.getOpenProjects();
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        for (final var proj : nowOpen) {
src/main/java/com/cburch/logisim/gui/prefs/WindowOptions.java:        final var tmp = AppPreferences.getAutoScaleFactor();
src/main/java/com/cburch/logisim/gui/start/About.java:      final var prefWidth = PANEL_WIDTH + 2 * PADDING;
src/main/java/com/cburch/logisim/gui/start/About.java:      var prefHeight = LOGO_HEIGHT + 2 * PADDING;
src/main/java/com/cburch/logisim/gui/start/About.java:      final var logo = new JLabel(new ImageIcon(getClass().getClassLoader().getResource(LOGO_IMG)));
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    final var jvm =
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    final var height = getHeight();
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    final var maxOffsetY = lines.totalScrollLinesHeight + height;
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    final var offsetY =
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    final var yPos = offsetY - height;
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:    for (final var line : lines) {
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:      final var y = line.startY - yPos;
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:      final var cls = line.getClass();
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:      for (final var line : lines) {
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:      final var padding = 20;
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:        final var alpha = displayAreaHeight / 4;
src/main/java/com/cburch/logisim/gui/start/AboutCredits.java:        final var derrived = new Color(color.getRed(), color.getGreen(), color.getBlue(), alpha);
src/main/java/com/cburch/logisim/gui/start/MacOsAdapter.java:      final var dt = Desktop.getDesktop();
src/main/java/com/cburch/logisim/gui/start/SplashScreen.java:      final var dim = getToolkit().getScreenSize();
src/main/java/com/cburch/logisim/gui/start/SplashScreen.java:      final var x = (int) (dim.getWidth() - getWidth()) / 2;
src/main/java/com/cburch/logisim/gui/start/SplashScreen.java:      final var y = (int) (dim.getHeight() - getHeight()) / 2;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var positives = List.of("yes", "y", "1", "true", "t");
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var negatives = List.of("no", "n", "0", "false", "f");
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var flag = option.toLowerCase();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var formatter = new HelpFormatter();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var builder = Option.builder(shortKey).longOpt(longKey).desc(S.get(stringBaseKey));
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var argNameKey = LineBuffer.format("{{1}}ArgName", stringBaseKey);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var opts = new Options();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var isTty = false;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var shallClearPreferences = false;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var startup = new Startup(isTty);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var optionIter = cmd.iterator();
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var opt = optionIter.next();
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var optHandlerRc = switch (opt.getLongOpt()) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:    for (final var arg : cmd.getArgs()) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var ttyVal = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fmts = ttyVal.split(",");
src/main/java/com/cburch/logisim/gui/start/Startup.java:      for (final var singleFmt : fmts) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:        final var val = switch (singleFmt.trim()) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fileA = new File(opt.getValues()[0]);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fileB = new File(opt.getValues()[1]);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fileName = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fileName = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var gateShape = opt.getValue().toLowerCase();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var geometry = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var wxh = geometry.split("[xX]");
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var p = wxh[1].indexOf('+', 1);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var x = 0;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var y = 0;
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var xy = loc.split("\\+");
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var w = 0;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var h = 0;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var option = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var file = new File(option);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var optArgs = opt.getValues();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var argsCnt = optArgs.length;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var handlerRc = RC.OK;
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var fileName = opt.getValue();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var optArgs = opt.getValues();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var opts = S.getLocaleOptions();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    for (final var locale : opts) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:    for (final var opt : opts) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var toPrint = ProjectActions.doOpen(null, null, file);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var mainCircuit = proj.getLogisimFile().getCircuit(testCircuitImpName);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var simTickFreq = mainCircuit.getTickFrequency();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var downTickFreq = mainCircuit.getDownloadFrequency();
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var usedFrequency = (testTickFrequency > 0) ? testTickFrequency :
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var templLoader = new Loader(monitor);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    final var count =
src/main/java/com/cburch/logisim/gui/start/Startup.java:      final var proj = ProjectActions.doNew(monitor);
src/main/java/com/cburch/logisim/gui/start/Startup.java:      var numOpened = 0;
src/main/java/com/cburch/logisim/gui/start/Startup.java:      var first = true;
src/main/java/com/cburch/logisim/gui/start/Startup.java:      for (final var fileToOpen : filesToOpen) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:            final var testB = new TestBench(testCircuitPathInput, monitor, substitutions);
src/main/java/com/cburch/logisim/gui/start/Startup.java:    for (final var fileToPrint : filesToPrint) {
src/main/java/com/cburch/logisim/gui/start/Startup.java:    var result = false;
src/main/java/com/cburch/logisim/gui/start/Startup.java:      for (final var comp1 : pane.getComponents()) result |= hasIcon(comp1);
src/main/java/com/cburch/logisim/gui/start/Startup.java:      for (final var comp1 : panel.getComponents()) result |= hasIcon(comp1);
src/main/java/com/cburch/logisim/gui/start/Startup.java:        final var container = containerEvent.getChild();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var hertz = (double) tickCount / elapse * 1000.0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var hertzStr = hertz == (int) hertz ? "" + (int) hertz : "" + hertz;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var stats = FileStatistics.compute(file, circuit);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var total = stats.getTotalWithSubcircuits();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var maxName = 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var count : stats.getCounts()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var nameLength = count.getFactory().getDisplayName().length();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var fmt =
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var fmtNormal = fmt + "%-" + maxName + "s\t%s\n";
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var count : stats.getCounts()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var lib = count.getLibrary();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var libName = lib == null ? "-" : lib.getDisplayName();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var totalWithout = stats.getTotalWithoutSubcircuits();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var shouldPrint = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (var i = 0; i < curOutputs.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var a = prevOutputs.get(i);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var b = curOutputs.get(i);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (var i = 0; i < curOutputs.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var shouldPrint = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (var i = 0; i < curOutputs.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var a = prevOutputs.get(i);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var b = curOutputs.get(i);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      var sep = "";
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        for (var i = 0; i < headers.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        for (var i = 0; i < headers.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (var i = 0; i < curOutputs.size(); i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var found = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var comp : circState.getCircuit().getNonWires()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var ramState = circState.getInstanceState(comp);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var m = ramFactory.getContents(ramState);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var sub : circState.getSubStates()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var found = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var comp : circState.getCircuit().getNonWires()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var ramState = circState.getInstanceState(comp);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var m = ramFactory.getContents(ramState);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var sub : circState.getSubStates()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var found = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var comp : circState.getCircuit().getNonWires()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var ttyState = circState.getInstanceState(comp);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var fileToOpen = args.getFilesToOpen().get(0);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var loader = new Loader(null);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var proj = new Project(file);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var circuitToTest = args.getCircuitToTest();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var circuit = (circuitToTest == null || circuitToTest.length() == 0)
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var format = args.getTtyFormat();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var pinNames = Analyze.getPinLabels(circuit);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var outputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var inputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var entry : pinNames.entrySet()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pinName = entry.getValue();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var loaded = loadRam(circState, args.getLoadFile());
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var ttyFormat = args.getTtyFormat();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var simCode = runSimulation(circState, outputPins, haltPin, ttyFormat);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var saved = saveRam(circState, args.getSaveFile());
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var inputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var inputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var inputNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var outputPins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var outputVars = new ArrayList<Var>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var outputNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var formats = new ArrayList<String>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var entry : pinLabels.entrySet()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var var = new Var(entry.getValue(), width);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        for (final var name : var) inputNames.add(name);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        for (final var name : var) outputNames.add(name);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var headers = new ArrayList<String>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var pinList = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var entry : pinLabels.entrySet()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pinName = entry.getValue();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (final var entry : pinLabels.entrySet()) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pin = entry.getKey();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var pinName = entry.getValue();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var inputCount = inputNames.size();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var rowCount = 1 << inputCount;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var needTableHeader = true;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var valueMap = new HashMap<Instance, Value>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    for (var i = 0; i < rowCount; i++) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var circuitState = new CircuitState(proj, circuit);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      var incol = 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (final var pin : inputPins) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var width = pin.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var v = new Value[width];
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        for (var b = width - 1; b >= 0; b--) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:          final var value = TruthTable.isInputSet(i, incol++, inputCount);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var pinState = circuitState.getInstanceState(pin);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var prop = circuitState.getPropagator();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (final var pin : outputPins) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:          final var width = pin.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:          final var pinState = circuitState.getInstanceState(pin);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:          final var outValue = Pin.FACTORY.getValue(pinState);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var currValues = new ArrayList<Value>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (final var pin : pinList) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var showTable = (format & FORMAT_TABLE) != 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var showSpeed = (format & FORMAT_SPEED) != 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var showTty = (format & FORMAT_TTY) != 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var showHalt = (format & FORMAT_HALT) != 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var ttyFound = prepareForTty(circState, keyboardStates);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var retCode = 0;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var start = System.currentTimeMillis();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    var halted = false;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var prop = circState.getPropagator();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var curOutputs = new ArrayList<Value>();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      for (final var pin : outputPins) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var pinState = circState.getInstanceState(pin);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var val = Pin.FACTORY.getValue(pinState);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:        final var buffer = stdinThread.getBuffer();
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:          for (final var keyState : keyboardStates) {
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:    final var elapse = System.currentTimeMillis() - start;
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var stdin = new InputStreamReader(System.in);
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:      final var buffer = new char[32];
src/main/java/com/cburch/logisim/gui/start/TtyInterface.java:            final var add = new char[nbytes];
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var fileToOpen = new File(path);
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    for (final var outName : outputSignals) {
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var state = new CircuitState(proj, proj.getCurrentCircuit());
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    var j = 0;
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    var pinMatched = 0;
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    for (final var output : outputSignals) {
src/main/java/com/cburch/logisim/gui/test/TestBench.java:      for (final var comp : circuit.getNonWires()) {
src/main/java/com/cburch/logisim/gui/test/TestBench.java:        final var inst = Instance.getInstanceFor(comp);
src/main/java/com/cburch/logisim/gui/test/TestBench.java:        final var pinState = state.getInstanceState(comp);
src/main/java/com/cburch/logisim/gui/test/TestBench.java:        final var label = pinState.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var sim = proj == null ? null : proj.getSimulator();
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var vhdlSim = sim.getCircuitState().getProject().getVhdlSimulator();
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var circuit = (proj.getLogisimFile().getCircuit("logisim_test_verif"));
src/main/java/com/cburch/logisim/gui/test/TestBench.java:    final var val = new Value[outputSignals.length];
src/main/java/com/cburch/logisim/gui/test/TestFrame.java:    var name = data == null ? "???" : data.getCircuit().getName();
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    var numPass = model.getPass();
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    var numFail = model.getFail();
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    final var vec = model.getVector();
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    final var msg = new String[columns];
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    final var altdata = new Value[columns];
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    final var passMsg = S.get("passStatus");
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    final var failMsg = S.get("failStatus");
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:    for (var i = firstRow; i < firstRow + numRows; i++) {
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:      final var row = model.sortedIndex(i);
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:      final var data = vec.data.get(row);
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:      var failed = false;
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:        final var err = results[row];
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:          for (final var e : failEx.getAll()) {
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:            var col = e.getColumn();
src/main/java/com/cburch/logisim/gui/test/TestPanel.java:      for (var col = 0; col < columns; col++) {
src/main/java/com/cburch/logisim/instance/Instance.java:      final var facing = getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/instance/Instance.java:    final var bds = getBounds();
src/main/java/com/cburch/logisim/instance/Instance.java:    var x = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/instance/Instance.java:    var y = bds.getY() + bds.getHeight() / 2;
src/main/java/com/cburch/logisim/instance/Instance.java:    var hAlign = GraphicsUtil.H_CENTER;
src/main/java/com/cburch/logisim/instance/Instance.java:    var vAlign = GraphicsUtil.V_CENTER;
src/main/java/com/cburch/logisim/instance/Instance.java:      var offset = 0;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var ls = listeners;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var attr = e.getAttribute();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var lAttr = (Attribute<String>) e.getAttribute();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var value = (String) e.getSource().getValue(e.getAttribute());
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var oldValue = e.getOldValue() != null ? (String) e.getOldValue() : "";
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var ports = portList;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var esOld = endArray;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var esOldLength = esOld == null ? 0 : esOld.length;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var es = esOld;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:        final var toCopy = Math.min(esOldLength, es.length);
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var toolTipFound = false;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var portIt = ports.iterator();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    for (var i = 0; portIt.hasNext() || i < esOldLength; i++) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var p = portIt.hasNext() ? portIt.next() : null;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var oldEnd = i < esOldLength ? esOld[i] : null;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var newEnd = p == null ? null : p.toEnd(loc, attrs);
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:        final var attr = p.getWidthAttribute();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var oldWidthAttrs = widthAttrs;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var translated = pt.translate(-loc.getX(), -loc.getY());
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var factory = instance.getFactory();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var field = textField;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var painter = context.getInstancePainter();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      final var current = g.getColor();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var field = textField;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:        final var g = context.getGraphics();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:        final var bds = field.getBounds(g);
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:        final var current = g.getColor();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var ends = endArray;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    for (final var end : ends) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var listeners = this.listeners;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var listeners = this.listeners;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var listeners = this.listeners;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:      for (final var listener : listeners) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var ret = bounds;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var i = 0;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    for (final var end : endArray) {
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var defaultTip = factory.getDefaultToolTip();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var portsCopy = ports.clone();
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    var field = textField;
src/main/java/com/cburch/logisim/instance/InstanceComponent.java:    final var label = attrs.getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var as = attrs;
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var ret = new InstanceComponent(this, loc, attrs);
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var painter = context.getInstancePainter();
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var as = attrs;
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:      for (var i = 0; i < as.length; i++) {
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:      var dfltSet = defaultSet;
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var isSub = sup.isAssignableFrom(sub);
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var painter = context.getInstancePainter();
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:      var i = icon;
src/main/java/com/cburch/logisim/instance/InstanceFactory.java:        var n = iconName;
src/main/java/com/cburch/logisim/instance/InstanceLoggerAdapter.java:      final var className = loggerClass.getName();
src/main/java/com/cburch/logisim/instance/InstanceLoggerAdapter.java:      final var msg = t.getMessage();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var as = (comp == null) ? attrs : comp.getAttributeSet();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var circState = context.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var loc = comp.getLocation();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var s = context.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var loc = comp.getEnd(index).getLocation();
src/main/java/com/cburch/logisim/instance/InstancePainter.java:    final var circState = context.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:      final var s0 = state.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:      final var s1 = canvas.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var circState = event.getCircuitState();
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var state = new InstanceStateImpl(circState, comp);
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var e =
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var isAccepted = poker.init(state, e);
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var className = pokerClass.getName();
src/main/java/com/cburch/logisim/instance/InstancePokerAdapter.java:    final var msg = t.getMessage();
src/main/java/com/cburch/logisim/instance/InstanceStateImpl.java:    final var circ = circuitState.getCircuit();
src/main/java/com/cburch/logisim/instance/InstanceStateImpl.java:    final var loc = component.getEnd(index).getLocation();
src/main/java/com/cburch/logisim/instance/InstanceStateImpl.java:    final var end = component.getEnd(portIndex);
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var attr = e.getAttribute();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var font = attrs.getValue(fontAttr);
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:      final var gfx = context.getGraphics().create();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:      final var currentColor = gfx.getColor();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var act = new SetAttributeAction(circuit, S.getter("changeLabelAction"));
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var gfx = canvas.getGraphics();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var text = field.getText();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    var bds = field.getBounds(gfx);
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:      final var loc = comp.getLocation();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var x = event.getX();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var y = event.getY();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var prev = e.getOldText();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var next = e.getText();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var wasReg = shouldRegister();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var shouldReg = shouldRegister();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:    final var text = attrs.getValue(labelAttr);
src/main/java/com/cburch/logisim/instance/InstanceTextField.java:        final var font = attrs.getValue(fontAttr);
src/main/java/com/cburch/logisim/instance/Port.java:    final var pt = loc.translate(dx, dy);
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var loc = LocaleManager.getLocale();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var lang = loc.getLanguage();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:        final var oldValue = templateFile;
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:        final var value = convertFile(prefs.get(TEMPLATE_FILE, null));
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var file = new File(fileName);
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:        try (final var reader = new FileInputStream(toRead)) {
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var ld = Startup.class.getClassLoader();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var in = ld.getResourceAsStream("resources/logisim/default.templ");
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:          final var p = Preferences.userNodeForPackage(Main.class);
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:      final var accel = GRAPHICS_ACCELERATION.get();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:    for (final var component : comp) {
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:    final var iconImage = icon.getImage();
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:    final var radixOptions = RadixOption.OPTIONS;
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:    final var radixStrings = new String[radixOptions.length];
src/main/java/com/cburch/logisim/prefs/AppPreferences.java:    for (var i = 0; i < radixOptions.length; i++) {
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      final var iter = externalBoards.iterator();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      var removed = false;
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:        final var file = iter.next();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:        final var f = new File(file);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      for (final var listener : myListeners) {
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      for (var i = size() - 1; i > 0 && cmp.compareTo(BoardList.getBoardName(get(i - 1))) < 0; i--)
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      final var board = boardNamesList.getSelectedValue();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    for (var i = 0; i < MaxBoards; i++) {
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      final var encoding = prefs.get(ExtBoard + i, null);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var selectedBoard = AppPreferences.SelectedBoard.get();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var f = new File(filename);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var index = extBoardModel.indexOf(filename);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var panel = new JPanel();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var thisLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var size = extBoardModel.nrOfExternalBoards();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    var index = 1;
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    var found = false;
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    for (var i = 0; i < MaxBoards; i++) {
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      final var name = prefs.get(ExtBoard + i, null);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var qualifier = buildInBoards.getBoardFilePath(name);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    for (var i = 0; i < extBoardModel.getSize(); i++) {
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    var boardFileName = getBoardFile();
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    var test = new BoardReaderClass(boardFileName);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var fc = new JFileChooser(AppPreferences.FPGA_Workspace.get());
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var filter = new FileNameExtensionFilter("Board files", "xml", "xml");
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var test = new File(AppPreferences.FPGA_Workspace.get());
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:    final var retval = fc.showOpenDialog(null);
src/main/java/com/cburch/logisim/prefs/FpgaBoards.java:      final var file = fc.getSelectedFile();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBoolean.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBoolean.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBoolean.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBoolean.java:      final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorBoolean.java:      final var newValue = prefs.getBoolean(name, dflt);
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:      final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:      final var newValue = prefs.getBoolean(name, dflt);
src/main/java/com/cburch/logisim/prefs/PrefMonitorBooleanConvert.java:          final var e =
src/main/java/com/cburch/logisim/prefs/PrefMonitorDouble.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/PrefMonitorDouble.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorDouble.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorDouble.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:      final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:      final var newValue = prefs.getInt(name, dflt);
src/main/java/com/cburch/logisim/prefs/PrefMonitorInt.java:    final var newVal = newValue;
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:      final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:      final var newValue = prefs.get(name, dflt);
src/main/java/com/cburch/logisim/prefs/PrefMonitorString.java:    final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:    final var name = getIdentifier();
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:      final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:      final var newValue = prefs.get(name, dflt);
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:        for (final var s : opts) {
src/main/java/com/cburch/logisim/prefs/PrefMonitorStringOpts.java:    final var oldValue = value;
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var prefs = AppPreferences.getPrefs();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    for (var index = 0; index < NUM_RECENT; index++) {
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var encoding = prefs.get(BASE_PROPERTY + index, null);
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:      final var time = Long.parseLong(encoding.substring(0, semi));
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:      final var file = new File(encoding.substring(semi + 1));
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var now = System.currentTimeMillis();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var ages = new long[NUM_RECENT];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var toSort = new long[NUM_RECENT];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    for (var i = 0; i < NUM_RECENT; i++) {
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var ret = new ArrayList<File>();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    for (final var age : toSort) {
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        var index = -1;
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        for (var i = 0; i < NUM_RECENT; i++) {
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    var oldestIndex = 0;
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    var nullIndex = -1;
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    for (var i = 0; i < NUM_RECENT; i++) {
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var prefs = event.getNode();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var prop = event.getKey();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:      final var rest = prop.substring(BASE_PROPERTY.length());
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        final var oldValue = recentFiles[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        final var oldTime = recentTimes[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        final var newValue = recentFiles[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:        final var newTime = recentTimes[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var oldFile = recentFiles[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var oldTime = recentTimes[index];
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    var fileToSave = file;
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var now = System.currentTimeMillis();
src/main/java/com/cburch/logisim/prefs/RecentProjects.java:    final var index = getReplacementIndex(now, fileToSave);
src/main/java/com/cburch/logisim/prefs/Template.java:    final var reader = new InputStreamReader(in);
src/main/java/com/cburch/logisim/prefs/Template.java:    final var buf = new char[4096];
src/main/java/com/cburch/logisim/prefs/Template.java:    final var dest = new StringBuilder();
src/main/java/com/cburch/logisim/prefs/Template.java:    final var circName = S.get("newCircuitName");
src/main/java/com/cburch/logisim/prefs/Template.java:    final var buf =
src/main/java/com/cburch/logisim/proj/Dependencies.java:            var found = false;
src/main/java/com/cburch/logisim/proj/Dependencies.java:            for (final var o : e.getCircuit().getNonWires()) {
src/main/java/com/cburch/logisim/proj/Dependencies.java:            var found = false;
src/main/java/com/cburch/logisim/proj/Dependencies.java:            for (final var o : e.getCircuit().getNonWires()) {
src/main/java/com/cburch/logisim/proj/Dependencies.java:            final var factory = ((AddTool) e.getData()).getFactory();
src/main/java/com/cburch/logisim/proj/Dependencies.java:            final var factory = ((AddTool) e.getData()).getFactory();
src/main/java/com/cburch/logisim/proj/Dependencies.java:              final var circ = circFact.getSubcircuit();
src/main/java/com/cburch/logisim/proj/Dependencies.java:    for (final var comp : circ.getNonWires()) {
src/main/java/com/cburch/logisim/proj/JoinedAction.java:    final var oldLen = todo.length;
src/main/java/com/cburch/logisim/proj/JoinedAction.java:    final var newToDo = new Action[oldLen + 1];
src/main/java/com/cburch/logisim/proj/JoinedAction.java:    for (final var act : todo) {
src/main/java/com/cburch/logisim/proj/JoinedAction.java:    for (final var act : todo) {
src/main/java/com/cburch/logisim/proj/JoinedAction.java:    for (var i = todo.length - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/proj/Project.java:        final var unloaded = (Library) event.getData();
src/main/java/com/cburch/logisim/proj/Project.java:    final var current = getCurrentCircuit();
src/main/java/com/cburch/logisim/proj/Project.java:    final var loader = file.getLoader();
src/main/java/com/cburch/logisim/proj/Project.java:      final var firstData = undoLog.removeLast();
src/main/java/com/cburch/logisim/proj/Project.java:      final var first = firstData.action;
src/main/java/com/cburch/logisim/proj/Project.java:    final var circuit = (name == null ? file.getMainCircuit() : file.getCircuit(name));
src/main/java/com/cburch/logisim/proj/Project.java:    for (final var l : projectListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:      var ret = recentRootState.get(circuit);
src/main/java/com/cburch/logisim/proj/Project.java:    final var old = circuitState;
src/main/java/com/cburch/logisim/proj/Project.java:    final var oldHdl = hdlModel;
src/main/java/com/cburch/logisim/proj/Project.java:    final var oldCircuit = (old == null) ? null : old.getCircuit();
src/main/java/com/cburch/logisim/proj/Project.java:      for (final var l : circuitListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:    final var canvas = frame.getCanvas();
src/main/java/com/cburch/logisim/proj/Project.java:      final var data = redoLog.removeLast();
src/main/java/com/cburch/logisim/proj/Project.java:      final var action = data.action;
src/main/java/com/cburch/logisim/proj/Project.java:    final var current = getCurrentCircuit();
src/main/java/com/cburch/logisim/proj/Project.java:    final var old = circuitState;
src/main/java/com/cburch/logisim/proj/Project.java:    final var oldHdl = hdlModel;
src/main/java/com/cburch/logisim/proj/Project.java:    final var oldCircuit = old == null ? null : old.getCircuit();
src/main/java/com/cburch/logisim/proj/Project.java:    final var newCircuit = value.getCircuit();
src/main/java/com/cburch/logisim/proj/Project.java:      final var canvas = frame == null ? null : frame.getCanvas();
src/main/java/com/cburch/logisim/proj/Project.java:        final var selection = canvas.getSelection();
src/main/java/com/cburch/logisim/proj/Project.java:          final var act = SelectionActions.dropAll(selection);
src/main/java/com/cburch/logisim/proj/Project.java:        for (final var l : circuitListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:        for (final var l : circuitListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:        final var circTickFrequency = newCircuit.getTickFrequency();
src/main/java/com/cburch/logisim/proj/Project.java:        final var simTickFrequency = simulator.getTickFrequency();
src/main/java/com/cburch/logisim/proj/Project.java:    var circState = recentRootState.get(circuit);
src/main/java/com/cburch/logisim/proj/Project.java:    final var oldValue = frame;
src/main/java/com/cburch/logisim/proj/Project.java:    final var old = this.file;
src/main/java/com/cburch/logisim/proj/Project.java:      for (final var l : fileListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:      for (final var l : fileListeners) {
src/main/java/com/cburch/logisim/proj/Project.java:    final var old = tool;
src/main/java/com/cburch/logisim/proj/Project.java:    final var canvas = frame.getCanvas();
src/main/java/com/cburch/logisim/proj/Project.java:    final var selection = canvas.getSelection();
src/main/java/com/cburch/logisim/proj/Project.java:        final var act = SelectionActions.anchorAll(selection);
src/main/java/com/cburch/logisim/proj/Project.java:      final var data = undoLog.removeLast();
src/main/java/com/cburch/logisim/proj/Project.java:      final var action = data.action;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var frame = createFrame(null, proj);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var result = new StringWriter();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var printWriter = new PrintWriter(result);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var isOk = true;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var tempSet = new HashMap<String, Library>();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var forbiddenNames = new HashSet<String>();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var pattern = Pattern.compile("[^a-z\\d_.]", Pattern.CASE_INSENSITIVE);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var matcher = pattern.matcher(filename);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var ret = new Project(file);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var frame = sourceProject.getFrame();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var newFrame = new Frame(newProject);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var parent = (baseProject == null) ? null : baseProject.getFrame();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = new Loader(parent);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var templReader = AppPreferences.getTemplate().createStream();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var file = createNewFile(baseProject);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var newProj = new Project(file);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var frame = createFrame(baseProject, newProj);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = new Loader(monitor);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var templReader = AppPreferences.getTemplate().createStream();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var oldLoader = baseProject.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var selected = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = new Loader(baseProject == null ? parent : baseProject.getFrame());
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    for (final var circ : lib.getCircuits()) {
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    for (final var libs : lib.getLibraries()) {
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var oldLoader = baseProject.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var returnVal = chooser.showOpenDialog(parent);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var selected = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var proj = Projects.findProjectFor(f);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var lib = loader.openLogisimFile(f);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var frame = proj.getFrame();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = new Loader(monitor);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var file = loader.openLogisimFile(source, substitutions);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = new Loader(monitor);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var file = loader.openLogisimFile(source);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var ret = new Project(file);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var top = Projects.getTopFrame();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var f = loader.getMainFile();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var oldTool = proj.getTool();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    final var ret = loader.save(proj.getLogisimFile(), f);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var ret = proj.isFileDirty() ? doSave(proj) : true;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var oldTool = proj.getTool();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      final var chooser = loader.createChooser();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      var isCorrectDirectory = false;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      var exportRootDir = "";
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var exportHome = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var exportRoot = loader.getMainFile().getName().replace(".circ", "");
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var exportLibDir = String.format("%s%s%s", exportRootDir, File.separator, Loader.LOGISIM_LIBRARY_DIR);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        final var exportCircDir = String.format("%s%s%s", exportRootDir, File.separator, Loader.LOGISIM_CIRCUIT_DIR);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:          final var path = Paths.get(exportRootDir);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var chooser = loader.createChooser();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var validFilename = false;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var errors = new HashMap<String, String>();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        var message = "\"" + chooser.getSelectedFile() + "\":\n";
src/main/java/com/cburch/logisim/proj/ProjectActions.java:    var selectedFile = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      var old = selectedFile.getName();
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        var ext = old.substring(ext0);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        var ttl = S.get("replaceExtensionTitle");
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        var msg = S.get("replaceExtensionMessage", ext);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:        var dlog = new JOptionPane(msg);
src/main/java/com/cburch/logisim/proj/ProjectActions.java:          var name = old.substring(0, ext0) + Loader.LOGISIM_EXTENSION;
src/main/java/com/cburch/logisim/proj/ProjectActions.java:      var confirm =
src/main/java/com/cburch/logisim/proj/Projects.java:      final var frame = (Frame) event.getSource();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var frame = (Frame) event.getSource();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var frame = (Frame) event.getSource();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var proj = frame.getProject();
src/main/java/com/cburch/logisim/proj/Projects.java:    for (final var proj : openProjects) {
src/main/java/com/cburch/logisim/proj/Projects.java:      final var loader = proj.getLogisimFile().getLoader();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var f = loader.getMainFile();
src/main/java/com/cburch/logisim/proj/Projects.java:    var x = 0;
src/main/java/com/cburch/logisim/proj/Projects.java:    var y = 0;
src/main/java/com/cburch/logisim/proj/Projects.java:    final var topFrame = getTopFrame();
src/main/java/com/cburch/logisim/proj/Projects.java:    var ret = mostRecentFrame;
src/main/java/com/cburch/logisim/proj/Projects.java:      for (final var proj : openProjects) {
src/main/java/com/cburch/logisim/proj/Projects.java:        final var frame = proj.getFrame();
src/main/java/com/cburch/logisim/proj/Projects.java:    for (final var p : openProjects) {
src/main/java/com/cburch/logisim/proj/Projects.java:      final var f = p.getFrame();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var loc = p.getFrame().getLocation();
src/main/java/com/cburch/logisim/proj/Projects.java:      final var sz = frame.getToolkit().getScreenSize();
src/main/java/com/cburch/logisim/proj/Projects.java:    for (final var proj : openProjects) {
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:    final var d = (SocBusAttributes) dest;
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:        final var date = new Date();
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:        final var names = this.toString().split("@");
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:      final var v = (BitWidth) value;
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:      final var v = (String) value;
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:      final var f = (Font) value;
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:      final var v = (Boolean) value;
src/main/java/com/cburch/logisim/soc/bus/SocBusAttributes.java:      final var v = (Boolean) value;
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      final var instInfo = new InstanceInformation(inst, this);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:    final var source = e.getSource();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      final var inst = info.getInstance();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var function = info.getFunction();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      var instanceName = instance.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var loc = instance.getLocation();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      var name = (circuitState != null) ? (instanceName + ": ") : "";
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      final var memMap = new InstanceMenuItem(instance, name, SHOW_MEMORY_MAP);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var cstate = proj.getCircuitState();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var istate = instance.getData(cstate);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var traceWin = new InstanceMenuItem(instance, name, SHOW_TRACES, data, hierarchy);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var busInfo =
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var gui = new BusTransactionInsertionGui(busInfo, id, circuitState);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      final var frame = myInsertionFrames.get(state);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      var fstate = frame.getExtendedState();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var table = new JTable(traceModel) {
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:                    final var point = e.getPoint();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:                    final var index = columnModel.getColumnIndexAtX(point.x);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:                    final var realIndex = columnModel.getColumn(index).getModelIndex();
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var scroll = new JScrollPane(table);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var scaledWidth = AppPreferences.getScaled(SocBusStateInfo.BLOCK_WIDTH);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:        final var scaledHeight = AppPreferences.getScaled(320);
src/main/java/com/cburch/logisim/soc/bus/SocBusMenuProvider.java:      var fstate = myTraceFrame.getExtendedState();
src/main/java/com/cburch/logisim/soc/data/SocBusInfo.java:    final var ident = socManager == null ? null : socManager.getSocBusDisplayString(busId);
src/main/java/com/cburch/logisim/soc/data/SocBusInfo.java:    final var color = (ident == null) ? Color.RED : Color.GREEN;
src/main/java/com/cburch/logisim/soc/data/SocBusStateInfo.java:    var name = myComp.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/soc/data/SocBusStateInfo.java:      final var loc = myComp.getLocation();
src/main/java/com/cburch/logisim/soc/data/SocBusStateInfo.java:    final var slaves = memMap.getSlaves();
src/main/java/com/cburch/logisim/soc/data/SocBusStateInfo.java:      final var data = getRegPropagateState();
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var gfx = (Graphics2D) g2.create();
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var title = isRequest
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    var addrStr = String.format("0x%08X", getAddress());
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:      final var format = switch (getAccessType()) {
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var realWidth = getRealBlockWidth(g2, false);
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var gfx = (Graphics2D) g2.create();
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var boxInfo = new BoxInfo();
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:      final var fntMetrics = gfx.getFontMetrics();
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var realWidth = getRealBlockWidth(g2, true);
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    final var usedWidth = Math.max(realWidth.blockWidth, width);
src/main/java/com/cburch/logisim/soc/data/SocBusTransaction.java:    var bds = getScaled(usedWidth / 2, (SocBusStateInfo.TRACE_HEIGHT - 2) / 4, usedWidth, SocBusStateInfo.TRACE_HEIGHT >> 1, true);
src/main/java/com/cburch/logisim/soc/data/SocMemMapModel.java:      final var row = table.rowAtPoint(e.getPoint());
src/main/java/com/cburch/logisim/soc/data/SocMemMapModel.java:        final var comp = slaveMap.getSlave(row).getComponent();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var id = socMan.getGuiBusId();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:        final var oldId = myValue.getBusId();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:        final var comp = myValue.getComponent();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:          final var newId = new SocBusInfo(id);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var bus = socBusses.get(id);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var comp = bus.getComponent();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:        final var loc = comp.getLocation();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var fact = (SocInstanceFactory) c.getFactory();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var id = c.getAttributeSet().getValue(SocBusAttributes.SOC_BUS_ID);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:        final var iter = toBeChecked.iterator();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:          final var comp = iter.next();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:            final var id = comp.getAttributeSet().getValue(SOC_BUS_SELECT).getBusId();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:              final var binfo = socBusses.get(id);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:              final var factory = (SocInstanceFactory) comp.getFactory();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var fact = (SocInstanceFactory) c.getFactory();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var info = socBusses.get(c.getAttributeSet().getValue(SocBusAttributes.SOC_BUS_ID).getBusId());
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var binfo = c.getAttributeSet().getValue(SOC_BUS_SELECT);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    var result = 0;
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    for (final var s : socBusses.keySet()) {
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var busses = new HashMap<String, String>();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    for (final var id : socBusses.keySet()) {
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var res = (String) OptionPane.showInputDialog(
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var fact = (SocInstanceFactory) comp.getFactory();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var binfo = socBusses.get(oldId);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var busInfo = socBusses.get(newId);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var info = socBusses.get(busId);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:    final var iter = toBeChecked.iterator();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:      final var comp = iter.next();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:        final var id = comp.getAttributeSet().getValue(SOC_BUS_SELECT).getBusId();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:          final var binfo = socBusses.get(id);
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:          final var fact = (SocInstanceFactory) comp.getFactory();
src/main/java/com/cburch/logisim/soc/data/SocSimulationManager.java:          final var binfo = comp.getAttributeSet().getValue(SOC_BUS_SELECT);
src/main/java/com/cburch/logisim/soc/data/SocSupport.java:    var name = comp.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/soc/data/SocSupport.java:      final var loc = comp.getLocation();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      var instName = instance.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:        final var loc = instance.getLocation();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      var name = circuitState != null ? instName + " : " + S.get("SocUpMenuAsmWindow") : S.get("SocUpMenuAsmWindow");
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var state = circuitState == null ? proj.getCircuitState() : circuitState;
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var asm = new InstanceMenuItem(instance, name, SHOW_ASM, instance.getData(state), state, hinfo);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var readElf = new InstanceMenuItem(instance, name, LOAD_ELF_FUNCTION, state);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:        final var showState = new InstanceMenuItem(instance,
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          final var showProg = new InstanceMenuItem(instance, name, SHOW_PROGRAM, instance.getData(state), state, hinfo);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var fc = new JFileChooser();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var data = (SocUpStateInterface) circuitState.getData(instance.getComponent());
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var reader = new ProcessorReadElf(fc.getSelectedFile(), instance, data.getElfType(), true);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          final var frame = myStates.get(data);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          var state = frame.getExtendedState();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var frame = new ListeningFrame(data.getProcessorType(), S.getter("SocUpMenuCpuStateWindowTitle"), csh);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var statePanel = data.getStatePanel();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          final var frame = myPrograms.get(data);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          var frameState = frame.getExtendedState();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var frame = new ListeningFrame(data.getProcessorType(), S.getter("SocUpMenuCpuProgramWindowTitle"), csh);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var pan = data.getAsmWindow();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          final var frame = myAsmWindows.get(data);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:          var fstate = frame.getExtendedState();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var frame = new ListeningFrame(data.getProcessorType(), S.getter("SocUpMenuCpuAsmWindowTitle"), csh);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var assembler = data.getAssembler();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var pan = new AssemblerPanel(frame, assembler.getHighlightStringIdentifier(), assembler, data.getProcessorInterface(), state);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var instInfo = new InstanceInformation(inst, this);
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:    final var source = e.getSource();
src/main/java/com/cburch/logisim/soc/data/SocUpMenuProvider.java:      final var inst = info.getInstance();
src/main/java/com/cburch/logisim/soc/file/SymbolTable.java:    var index = offset;
src/main/java/com/cburch/logisim/soc/gui/AssemblerPanel.java:    final var carretPos = asmWindow.getCaretPosition();
src/main/java/com/cburch/logisim/soc/gui/AssemblerPanel.java:    final var errorPositions = assembler.getErrorPositions();
src/main/java/com/cburch/logisim/soc/gui/AssemblerPanel.java:    final var source = e.getSource();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      for (var i = 0; i < getColumnCount(); i++) {
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var height = 2 * SocBusStateInfo.TRACE_HEIGHT + SocBusStateInfo.TRACE_HEIGHT / 2;
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    var max = 1;
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    for (final var i : myTraceList.keySet()) {
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    var cols = 0;
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    for (final var i : myTraceList.keySet()) {
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    final var info = getInfoAtColumn(columnIndex);
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    final var stateInfo = info.getEntry(rowIndex, this);
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var trans = stateInfo.getTransaction();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var master = trans.getTransactionInitiator();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    final var sortedList = new ArrayList<SocBusStateInfo.SocBusState>();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:    for (final var info : myTraceList.keySet())
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:          var inserted = false;
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:          for (var j = 0; j < sortedList.size(); j++) {
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:            final var sortedKey = myTraceList.get(sortedList.get(j)).getName();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var point = e.getPoint();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var index = table.getColumnModel().getColumnIndexAtX(point.x);
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var realIndex = table.getColumnModel().getColumn(index).getModelIndex();
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var info = getInfoAtColumn(realIndex);
src/main/java/com/cburch/logisim/soc/gui/TraceWindowTableModel.java:      final var label = new JLabel(getColumnHeader(column));
src/main/java/com/cburch/logisim/soc/jtaguart/JtagUartState.java:    var name = "BUG: Unknown";
src/main/java/com/cburch/logisim/soc/jtaguart/JtagUartState.java:        final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var previousAddress = getStartAddress() - 4;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:          final var index = (address - startAddress) >> 2;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var index = (address - startAddress) >> 2;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      for (final var info : memInfo)
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      final var adders = new ArrayList<SocMemoryInfoBlock>();
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      for (final var info : memInfo) {
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      final var addBefore = adders.get(0).canAddBefore(address)
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      final var addAfter = adders.get(0).canAddAfter(address)
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      for (var i = addBefore.getStartAddress(); i < addBefore.getEndAddress(); i += 4) {
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var addr = (address >> 2) << 2;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var size = (int) Math.pow(2, i.getWidth());
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    var name = label;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var addr = SocSupport.convUnsignedInt(trans.getAddress());
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var start = SocSupport.convUnsignedInt(startAddress);
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var end = start + sizeInBytes;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var value = (data == null) ? rand.nextInt() : data.getWord((address >> 2) << 2);
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    final var adbit1 = (address >> 1) & 1;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var adbit1_0 = address & 3;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:      var oldData = performReadAction(address, SocBusTransaction.WORD_ACCESS);
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var bit1 = (address >> 1) & 1;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        var mdata = data & 0xFFFF;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var byte0 = oldData & 0xFF;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var byte1 = ((oldData >> 8) & 0xFF) << 8;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var byte2 = ((oldData >> 16) & 0xFF) << 16;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var byte3 = ((oldData >> 24) & 0xFF) << 24;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var mdata = data & 0xFF;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:        final var bit10 = address & 3;
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    for (final var listener : listeners) {
src/main/java/com/cburch/logisim/soc/memory/SocMemoryState.java:    for (final var listener : listeners) {
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      for (var i = 0; i < 31; i++) registers_valid[i] = false;
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var nextPc = SocSupport.convUnsignedInt(pc) + 4L;
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var instruction = trans.getReadData();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var exe = ASSEMBLER.getExeUnit();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var trace = new TraceInfo(pc, instruction, exe.getAsmInstruction(), false);
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:        final var s = new StringBuilder();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    final var regName = name.toLowerCase();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    for (var i = 0; i < registerABINames.length; i++) {
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    final var regName = name.toLowerCase();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    var name = label;
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    final var gfx = (Graphics2D) g2.create();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:    final var state = (ProcessorState) pstate;
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var comp = (InstanceComponent) attachedBus.getComponent();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:        final var pstate = (ProcessorState) comp.getInstance().getData(state);
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var comp = (InstanceComponent) attachedBus.getComponent();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var state = comp.getInstanceStateImpl();
src/main/java/com/cburch/logisim/soc/nios2/Nios2State.java:      final var comp = (InstanceComponent) attachedBus.getComponent();
src/main/java/com/cburch/logisim/soc/pio/PioState.java:    var name = "BUG: Unknown";
src/main/java/com/cburch/logisim/soc/pio/PioState.java:        final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var nrBits = instance.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    var nrOfPorts = nrBits;
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var dir = instance.getAttributeValue(PioAttributes.PIO_DIRECTION);
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var hasIrq = hasIrqPin(instance.getAttributeSet());
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    var index = hasIrq ? 2 : 1;
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var ps = new Port[nrOfPorts];
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:      for (var b = 0; b < nrBits; b++) {
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:      final var portType = (dir == PioAttributes.PORT_BIDIR) ? Port.INOUT : Port.OUTPUT;
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:      for (var b = 0; b < nrBits; b++) {
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var dir = painter.getAttributeValue(PioAttributes.PIO_DIRECTION);
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:        final var name =
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var myState = state.getAttributeValue(PioAttributes.PIO_STATE);
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var g2 = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/soc/pio/SocPio.java:    final var f = g2.getFont();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var atmf = (AbstractTokenMakerFactory) TokenMakerFactory.getDefaultInstance();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var breakPoints = bPanel.getBreakPoints();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var trans =
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var exe = ASSEMBLER.getExeUnit();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var trace = new TraceInfo(pc, instruction, exe.getAsmInstruction(), false);
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:        final var s = new StringBuilder();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:    final var regName = name.toLowerCase();
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:    var name = label;
src/main/java/com/cburch/logisim/soc/rv32im/RV32imState.java:      final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imMemoryOrderingInstructions.java:    final var s = new StringBuilder();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var ps = new Port[nrOfIrqs + 2];
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var g2 = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var f = g2.getFont();
src/main/java/com/cburch/logisim/soc/rv32im/Rv32imRiscV.java:    final var state = painter.getAttributeValue(RV32imAttributes.RV32IM_STATE);
src/main/java/com/cburch/logisim/soc/util/AbstractAssembler.java:    var maxSize = 0;
src/main/java/com/cburch/logisim/soc/util/AbstractAssembler.java:    for (final var st : sh.getSymbols()) {
src/main/java/com/cburch/logisim/soc/util/AbstractAssembler.java:      var stName = st.getName();
src/main/java/com/cburch/logisim/soc/util/AbstractAssembler.java:        var addr = st.getValue(SymbolTable.ST_VALUE);
src/main/java/com/cburch/logisim/soc/util/AbstractAssembler.java:    final var lines = new StringBuilder();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var positions = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var info : errorMarkers.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:      final var pos = info.getMarkedOffset();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        var found = false;
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var assemblerTokens = new LinkedList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var text = pane.getTextArea();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (var i = 0; i < text.getLineCount(); i++) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var labels = new HashMap<String, Long>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var labelToken = new HashMap<String, AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var asm : assemblerTokens) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var asm : assemblerTokens) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var toBeRemoved = new ArrayList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (var i = 0; i < assemblerTokens.size(); i++) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:      final var asm = assemblerTokens.get(i);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        var before = (i == 0) ? null : assemblerTokens.get(i - 1);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var after = assemblerTokens.get(i + 1);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var beforeValue = before == null ? 0 : before.getNumberValue();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var second = assemblerTokens.get(i + 1);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var third = assemblerTokens.get(i + 2);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var error : assemblerInfo.getErrors().keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    var errors = false;
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var iter = assemblerTokens.iterator();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var macros = new HashMap<String, AssemblerMacro>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:      final var asm = iter.next();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var name = iter.next();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var nrParameters = iter.next();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var macro = new AssemblerMacro(name.getValue(), nrParameters.getNumberValue());
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        var endOfMacro = false;
src/main/java/com/cburch/logisim/soc/util/Assembler.java:          final var macroAsm = iter.next();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:          final var markers = new HashMap<AssemblerToken, StringGetter>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:            for (final var marker : markers.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var asm : assemblerTokens)
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var markers = new HashMap<AssemblerToken, StringGetter>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var name : macros.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var name : macros.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:      for (final var marker : markers.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var error : assemblerInfo.getErrors().keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var knownError : known) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var lineTokens = new LinkedList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var text = (RSyntaxTextArea) pane.getTextArea();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    var first = text.getTokenListForLine(lineNumber);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var lineErrorMarkers = new HashSet<GutterIconInfo>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var error : errorMarkers.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var name = first.getLexeme();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var type = first.getType();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var offset = first.getOffset();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var toBeRemoved = new ArrayList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (var i = 0; i < lineTokens.size(); i++) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:      final var asm = lineTokens.get(i);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:          final var before = lineTokens.get(i - 1);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var del : toBeRemoved) lineTokens.remove(del);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var olderr : lineErrorMarkers) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var oldSet = new HashMap<>(errorMarkers);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var error : oldSet.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var result = new DefaultParseResult(this);
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    final var offsets = new HashMap<Integer, String>();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var gutterIconInfo : errorMarkers.keySet()) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:    for (final var token : doc) {
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var len = token.length();
src/main/java/com/cburch/logisim/soc/util/Assembler.java:        final var line = doc.getDefaultRootElement().getElementIndex(offs);
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:    for (final var parameter : parameters) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:      for (final var assemblerToken : parameter) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:          final var name = assemblerToken.getValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:    for (final var parameter : parameters) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:      for (final var assemblerToken : parameter) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:          final var name = assemblerToken.getValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:    for (var idx = 0; idx < parameters.size(); idx++) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:      final var parameter = parameters.get(idx);
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:      var found = false;
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:      for (final var assemblerToken : parameter) {
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:        final var toBeRemoved = new HashSet<Integer>();
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:            var beforeValue = -1L;
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:              final var afterValue = parameter[i + 1].getLongValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:        final var newNrOfParameters = parameter.length - toBeRemoved.size();
src/main/java/com/cburch/logisim/soc/util/AssemblerAsmInstruction.java:        final var newParameter = new AssemblerToken[newNrOfParameters];
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      var result = -1L;
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (final var x : instructions.keySet()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (var i = 0; i < str.length(); i++) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      var hasError = false;
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (final var addr : instructions.keySet())
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var addr = labels.get(label);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:          final var st = new SymbolTable(label, SocSupport.convUnsignedLong(addr));
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      var errorsFound = false;
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (final var addr : instructions.keySet()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var errors = new HashMap<AssemblerToken, StringGetter>();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var asm = instructions.get(addr);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (var i = sectionStart; i < sectionEnd; i++) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var datab = data.containsKey(i) ? data.get(i) : 0;
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var trans =
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var ret = new ArrayList<AssemblerSectionInfo>();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      for (final var hdr : super.getHeaders()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var defines = new HashMap<String, Integer>();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (var i = 0; i < tokens.size(); i++) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var asm = tokens.get(i);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var label : labels.keySet()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var section = sections.get(i);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var check = sections.get(j);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll())
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var sentry = section.getEntryPoint();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var macro = macros.get(current.getValue());
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var acceptedParameters = assembler.getAcceptedParameterTypes();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var params = new ArrayList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:            final var set = new AssemblerToken[params.size()];
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var set = new AssemblerToken[params.size()];
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var macroTokens = macro.getMacroTokens();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var asm = macroTokens.get(i);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var instruction = new AssemblerAsmInstruction(current, assembler.getInstructionSize(current.getValue()));
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    final var acceptedParameters = assembler.getAcceptedParameterTypes();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var params = new ArrayList<AssemblerToken>();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:            final var set = new AssemblerToken[params.size()];
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var set = new AssemblerToken[params.size()];
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var next = tokens.get(index + 1);
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var maxRange = AssemblerHighlighter.BYTES.contains(current.getValue()) ? 8 :
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        var value = next.getLongValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:        final var nrOfBytes = (maxRange < 0) ? 8 : maxRange >> 3;
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var label = tokens.get(index + 1).getValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var value = tokens.get(index + 2).getNumberValue();
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:    for (final var section : sections.getAll()) {
src/main/java/com/cburch/logisim/soc/util/AssemblerInfo.java:      final var si = new AssemblerSectionInfo(start, name, identifier);
src/main/java/com/cburch/logisim/soc/vga/VgaAttributes.java:    final var d = (VgaAttributes) dest;
src/main/java/com/cburch/logisim/soc/vga/VgaAttributes.java:      final var b = (Boolean) value;
src/main/java/com/cburch/logisim/soc/vga/VgaState.java:    var name = label;
src/main/java/com/cburch/logisim/soc/vga/VgaState.java:      final var loc = attachedBus.getComponent().getLocation();
src/main/java/com/cburch/logisim/std/arith/Adder.java:    final var w = width.getWidth();
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var ax = valueA.toLongValue();
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var bx = valueB.toLongValue();
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var cx = cIn.toLongValue();
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var mask = ~(1L << 63);
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var aLast = (ax < 0);
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var bLast = (bx < 0);
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var cInLast = (((ax & mask) + (bx & mask) + cx) < 0);
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var cOut = (aLast && bLast) || (aLast && cInLast) || (bLast && cInLast);
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var sum = valueA.toLongValue() + valueB.toLongValue() + cIn.toLongValue();
src/main/java/com/cburch/logisim/std/arith/Adder.java:        final var sum = valueA.toLongValue() + valueB.toLongValue() + cIn.toLongValue();
src/main/java/com/cburch/logisim/std/arith/Adder.java:      final var bits = new Value[w];
src/main/java/com/cburch/logisim/std/arith/Adder.java:      var carry = cIn;
src/main/java/com/cburch/logisim/std/arith/Adder.java:    final var ps = new Port[5];
src/main/java/com/cburch/logisim/std/arith/Adder.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/arith/AdderHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/arith/AdderHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/arith/Comparator.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/arith/ComparatorHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer().pair("twosComplement", TWOS_COMPLEMENT_STRING);
src/main/java/com/cburch/logisim/std/arith/ComparatorHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/arith/DividerHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var b_val = dataWidth.getWidth() == 64 ? b.toDoubleValue() : b.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var out_val = a_val + b_val;
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/FpAdder.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var ps = new Port[6];
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var b_val = dataWidth.getWidth() == 64 ? b.toDoubleValue() : b.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpComparator.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var b_val = dataWidth.getWidth() == 64 ? b.toDoubleValue() : b.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var out_val = a_val / b_val;
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/FpDivider.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var b_val = dataWidth.getWidth() == 64 ? b.toDoubleValue() : b.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var out_val = a_val * b_val;
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/FpMultiplier.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var ps = new Port[3];
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var a = state.getPortValue(IN);
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var out_val = a_val * -1;
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/FpNegator.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var dataWidth = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var a_val = dataWidth.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var b_val = dataWidth.getWidth() == 64 ? b.toDoubleValue() : b.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var out_val = a_val - b_val;
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/FpSubtractor.java:    final var delay = (dataWidth.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var ps = new Port[3];
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var dataWidthIn = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var dataWidthOut = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var roundMode = state.getAttributeValue(MODE_ATTRIBUTE);
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var a = state.getPortValue(IN);
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var a_val = dataWidthIn.getWidth() == 64 ? a.toDoubleValue() : a.toFloatValue();
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var out = Value.createKnown(dataWidthOut, out_val);
src/main/java/com/cburch/logisim/std/arith/FpToInt.java:    final var delay = (dataWidthOut.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var ps = new Port[3];
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var dataWidthIn = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var dataWidthOut = state.getAttributeValue(StdAttr.FP_WIDTH);
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var unsigned =
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var a = state.getPortValue(IN);
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var a_val = extend(dataWidthIn.getWidth(), a.toLongValue(), unsigned);
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var out_val = a.isFullyDefined() ? a_val.doubleValue() : Double.NaN;
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var out =
src/main/java/com/cburch/logisim/std/arith/IntToFp.java:    final var delay = (dataWidthIn.getWidth() + 2) * PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/MultiplierHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/arith/NegatorHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    for (var stage = 0; stage < attrs.getValue(Shifter.SHIFT_BITS_ATTR); stage++)
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var nrOfShiftBits = attrs.getValue(Shifter.SHIFT_BITS_ATTR);
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:        for (var stage = 0; stage < nrOfShiftBits; stage++)
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:        for (var stage = 0; stage < nrOfShiftBits; stage++) {
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var nrOfBitsToShift = (1 << stageNumber);
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var nrOfBitsToShift = (1 << stageNumber);
src/main/java/com/cburch/logisim/std/arith/ShifterHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var ps = new Port[5];
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var fullName = new StringBuilder();
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var a = state.getPortValue(IN0);
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var b = state.getPortValue(IN1);
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    var bIn = state.getPortValue(B_IN);
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var outs = Adder.computeSum(data, a, b.not(), bIn.not());
src/main/java/com/cburch/logisim/std/arith/Subtractor.java:    final var delay = (data.getWidth() + 4) * Adder.PER_DELAY;
src/main/java/com/cburch/logisim/std/arith/SubtractorHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/arith/SubtractorHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/base/BaseLibrary.java:    final var t = super.getTool(name);
src/main/java/com/cburch/logisim/std/base/Text.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/base/Text.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/base/Text.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/base/Text.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    final var ps = new Port[8];
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    final var myBounds = painter.getBounds();
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    for (var i = 0; i < 7; i++) {
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    final var mask = 0b00000001;
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    for (var idx = SEGMENT_A; idx <= SEGMENT_G; idx++) {
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:      final var value = (portValues & mask) == 0 ? 0 : 1;
src/main/java/com/cburch/logisim/std/bfh/BcdToSevenSegmentDisplay.java:    for (var idx = SEGMENT_A; idx <= SEGMENT_G; idx++) {
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfBits = painter.getAttributeValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfPorts = (int) (Math.log10(Math.pow(2.0, nrOfBits.getWidth())) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    for (var i = nrOfPorts; i > 0; i--)
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfBits = attrs.getValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfPorts = (int) (Math.log10(1 << nrOfBits.getWidth()) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfBits = state.getAttributeValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfPorts = (int) (Math.log10(Math.pow(2.0, nrOfBits.getWidth())) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    for (var i = nrOfPorts; i > 0; i--) {
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:      final var value = (int) (Math.pow(10, i - 1));
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:      final var number = binValue / value;
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfbits = instance.getAttributeValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfPorts = (int) (Math.log10(1 << nrOfbits.getWidth()) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var ps = new Port[nrOfPorts + 1];
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:      final var value = (int) Math.pow(10.0, i - 1);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrofbits = attrs.getValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcd.java:    final var nrOfPorts = (int) (Math.log10(1 << nrofbits.getWidth()) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfPorts = (int) (Math.log10(1 << nrOfBits.getWidth()) + 1.0);
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfSignalBits = switch (nrOfPorts) {
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfSignals = switch (nrOfPorts) {
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    for (var signal = 0; signal < nrOfSignals; signal++)
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    for (var i = 1; i <= nrOfPorts; i++)
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(BinToBcd.ATTR_BinBits);
src/main/java/com/cburch/logisim/std/bfh/BinToBcdHdlGeneratorFactory.java:    final var nrOfPorts = (int) (Math.log10(1 << nrOfBits.getWidth()) + 1.0);
src/main/java/com/cburch/logisim/std/gates/AbstractBufferHdlGenerator.java:    final var nrOfBits =
src/main/java/com/cburch/logisim/std/gates/AbstractBufferHdlGenerator.java:    final var dest =
src/main/java/com/cburch/logisim/std/gates/AbstractBufferHdlGenerator.java:    final var source =
src/main/java/com/cburch/logisim/std/gates/AbstractBufferHdlGenerator.java:    var supported = true;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:      final var v = value.getAll();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:        for (var i = 0; i < v.length; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:        for (var i = 0; i < v.length; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var baseWidth = (Integer) attrs.size.getValue();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var axis = baseWidth / 2 + (negateOutput ? 10 : 0);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var perp = 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var loc = instance.getLocation();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var ports = new Port[inputs + 1];
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:      final var offs = getInputOffset(attrs, i);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) attrsBase;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:        final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:        final var bds = getOffsetBounds(attrsBase);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:          for (var i = 1; i <= inputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var myAttrs = (GateAttributes) attrs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var width = myAttrs.getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var inputCount = myAttrs.getValue(GateAttributes.ATTR_INPUTS);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var size = (Integer) attrs.size.getValue();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var axisLength = size + bonusWidth + (negateOutput ? 10 : 0);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:            final var attrs = (GateAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:            final var inputCount = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:            final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:            final var width = attrs.width.getWidth();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:            for (var b = 0; b < width; b++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:              final var inputs = new Expression[inputCount];
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:              var numInputs = 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:              for (var i = 1; i <= inputCount; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:                  final var negatedBit = (int) (negated >> (i - 1)) & 1;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) attrsBase;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var size = (Integer) attrs.size.getValue();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var width = size + bonusWidth + (negateOutput ? 10 : 0);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var height = Math.max(10 * inputs, size);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var bds = painter.getOffsetBounds();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var width = bds.getWidth();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var height = bds.getHeight();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var baseColor = g.getColor();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var rotate = 0.0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var g = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var border = AppPreferences.getIconBorder();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var iconBorder = AppPreferences.getIconBorder();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var iconSize = AppPreferences.getIconSize() - (iconBorder << 1);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negateDiameter = AppPreferences.getScaled(4);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var yoffset = singleInput ? (int) (iconSize / 6.0) : 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var ysize = singleInput ? iconSize - (yoffset << 1) : iconSize;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var af = g.getTransform();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var iconFont = g.getFont().deriveFont(((float) iconSize) / 2).deriveFont(Font.BOLD);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:      final var txt = new TextLayout(label, iconFont, g.getFontRenderContext());
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:      var txt = new TextLayout(label.substring(0, 2), iconFont, g.getFontRenderContext());
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var borderSize = AppPreferences.getIconBorder();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var iconSize = AppPreferences.getIconSize() - (borderSize << 1);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negateSize = AppPreferences.getScaled(4);
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var af = gfx.getTransform();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var ystart = negateSize >> 1;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var yend = iconSize - ystart;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var xstart = 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var xend = iconSize - negateSize;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var xpos = new int[] {xstart, xend, xstart, xstart};
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var ypos = new int[] {ystart, iconSize >> 1, yend, ystart};
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var don = negateOutput ? 10 : 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var attrs = (GateAttributes) state.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var inputCount = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var opts = state.getProject().getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var errorIfUndefined =
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var inputs = new Value[inputCount];
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var numInputs = 0;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    var error = false;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    for (var i = 1; i <= inputCount; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:        final var negatedBit = (int) (negated >> (i - 1)) & 1;
src/main/java/com/cburch/logisim/std/gates/AbstractGate.java:    final var out = (numInputs == 0 || error)
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var nrOfInputs = attrs.getValue(GateAttributes.ATTR_INPUTS);
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var bitWidth = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    for (var input = 1; input <= nrOfInputs; input++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:      final var floatingToZero =
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var bitWidth = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var nrOfInputs =
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:      for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var onehot = false;
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var lines = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var spaces = "";
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var indexString = "";
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:        lines.add("genvar n;");
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var spacesLen = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    for (var termloop = 0; termloop < nrOfInputs; termloop++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:      for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var lines = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var spaces = "   ";
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var indexString = "";
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:        lines.add("genvar n;");
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    final var spacesLen = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AbstractGateHdlGenerator.java:    var supported = true;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:      final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/AndGate.java:      var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/AndGate.java:      final var tabWidth = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/AndGate.java:      var first = true;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    for (var i = 1; i < numInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var ystart = negateSize >> 1;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var yend = iconSize - ystart;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var rad = (yend - ystart) >> 1;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var xstart = 0;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var xend = iconSize - negateSize - rad;
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var xp = new int[] {xend, xstart, xstart, xend};
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var yp = new int[] {ystart, ystart, yend, yend};
src/main/java/com/cburch/logisim/std/gates/AndGate.java:    final var af = g.getTransform();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var opts = state.getProject().getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var errorIfUndefined = onUndefined.equals(Options.GATE_UNDEFINED_ERROR);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var vw = v.getWidth();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var w = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var ww = w.getWidth();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var vs = new Value[w.getWidth()];
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      for (var i = 0; i < vs.length; i++) {
src/main/java/com/cburch/logisim/std/gates/Buffer.java:        final var ini = i < vw ? v.get(i) : Value.ERROR;
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var ports = new Port[2];
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var out = Location.create(0, 0, true).translate(facing, -20);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var width = attrs.getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:        final var width = instance.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:        for (var b = 0; b < width; b++) {
src/main/java/com/cburch/logisim/std/gates/Buffer.java:          final var e = expressionMap.get(instance.getPortLocation(1), b);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    var rotate = 0.0d;
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var shape = painter.getGateShape();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var xp = new int[4];
src/main/java/com/cburch/logisim/std/gates/Buffer.java:      final var yp = new int[4];
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var in = Buffer.repair(state, state.getPortValue(1));
src/main/java/com/cburch/logisim/std/gates/Buffer.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      var cur = spineX + SPINE_DISTANCE;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var hasOne = !inputs.get("1").ys.isEmpty();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var hasZero = !inputs.get("0").ys.isEmpty();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inp = invertedInputs.get(name);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var data = (inverted) ? invertedInputs.get(input) : inputs.get(input);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var data = (inverted) ? invertedInputs.get(input) : inputs.get(input);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var result = new CircuitMutation(destCirc);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var layouts = new Layout[model.getOutputs().bits.size()];
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var maxWidth = 0;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    for (var i = 0; i < layouts.length; i++) {
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var output = model.getOutputs().bits.get(i);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var expr = model.getOutputExpressions().getExpression(output);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var det = CircuitDetermination.create(expr);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var inputData = computeInputData(model);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var outputData = new InputData();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var x = inputData.getStartX();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var y = inputData.getStartY() + inputData.getInverterHeight();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var outputX = x + maxWidth + 20;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    for (var i = 0; i < layouts.length; i++) {
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var outputName = model.getOutputs().bits.get(i);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var layout = layouts[i];
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var ret = new InputData();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var inputs = model.getInputs();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var nameLength = 1;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var busLength = 1;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var nrOfBusses = 0;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inp = inputs.vars.get(i);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var name = inputs.bits.get(cnt++);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var name = inputs.bits.get(cnt++);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var factory = Constant.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var bds = factory.getOffsetBounds(attrs);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var gate = (CircuitDetermination.Gate) det;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var factory = gate.getFactory();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var inputs = gate.getInputs();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var subDet = inputs.get(0);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var bds = factory.getOffsetBounds(attrs);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var betweenWidth = 40;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var width = sub[0].width + betweenWidth + bds.getWidth();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var outputY = sub[0].y + sub[0].outputY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var height = sub[0].height;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var minOutputY = roundUp(-bds.getY());
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var dy = minOutputY - outputY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var minHeight = outputY + bds.getY() + bds.getHeight();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var sub = new Layout[inputs.size()];
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var subWidth = 0; // maximum width of sublayouts
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var subHeight = 0; // total height of sublayouts
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    for (var i = 0; i < sub.length; i++) {
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var bds = factory.getOffsetBounds(attrs);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var betweenWidth = 40 + 10 * (sub.length / 2 - 1);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var width = subWidth + betweenWidth + bds.getWidth();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      for (final var layout : sub)
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inputX = inputData.getSpineX(layout.inputName, layout.inverted);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var input = Location.create(inputX, output.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var compOutput = Location.create(x + layout.width, output.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var parent = layout.factory.createComponent(compOutput, layout.attrs);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var sub = layout.subLayouts[0];
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var input0 = parent.getEnd(1).getLocation();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var input1 = parent.getEnd(2).getLocation();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var subOutput = Location.create(midX, output.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var midInput0 = Location.create(midX, input0.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var midInput1 = Location.create(midX, input1.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var subX = x + layout.subX - sub.width;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var index = layout.subLayouts.length / 2 + 1;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var factory = parent.getFactory();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var val = gate.getIdentity();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var valLong = val.toLongValue();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var loc = parent.getEnd(index).getLocation();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var attrs = Constant.FACTORY.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    for (var i = 0; i < layout.subLayouts.length; i++) {
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var sub = layout.subLayouts[i];
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inputIndex = i + 1;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      var subOutputY = y + sub.y + sub.outputY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var destY = subDest.getY();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var numSubs = layout.subLayouts.length;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var mid = Location.create(subOutputX, subDest.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var subX = x + layout.subX - sub.width;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var subY = y + sub.y;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var invPosY = inputData.getStartY() + GATE_HEIGHT / 2;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inputName = inputData.getInputName(i);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var fact = NandGate.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var attrs = fact.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          var ipLoc1 = Location.create(inputData.getSpineX("1", false), invPosY - 10, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var Ploc = Location.create(inputData.getInverterXLoc(), invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          var ipLoc2 = Location.create(inputData.getInverterXLoc() - NAND_WIDTH, invPosY - 10, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var IPloc3 = Location.create(inputData.getSpineX(inputName, true), invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var fact = NotGate.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var attrs = fact.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var Ploc = Location.create(inputData.getInverterXLoc(), invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var IPloc1 = Location.create(inputData.getSpineX(inputName, false), invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var IPloc2 = Location.create(inputData.getInverterXLoc() - INVERTER_WIDTH, invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var IPloc3 = Location.create(inputData.getSpineX(inputName, true), invPosY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var fact = Constant.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var attrs = fact.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var loc = Location.create(inputData.getSpineX("0", false), inputData.startY - 10, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var attrs = fact.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var loc = Location.create(inputData.getSpineX("1", false), inputData.startY - 10, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var forbiddenYs = new ArrayList<Location>();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var compareYs = new CompareYs();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var inp = inputs.vars.get(nr);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var name = inputData.getInputName(idx++);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var singleInput = inputData.getInputLocs(name, false);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var spineLoc = Location.create(spineX, curY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var spine = singleInput.ys;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var name = inp.name;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var ploc = Location.create(curX, curY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var msbName = inputData.getInputName(idx);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        var singleInput = inputData.getInputLocs(msbName, false);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var sloc = Location.create(spineX - 10, busY - SPLITTER_HEIGHT, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var BI1 = Location.create(ploc.getX() + 10 + busNr * SPINE_DISTANCE, ploc.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var BI2 = Location.create(BI1.getX(), sloc.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var spine = singleInput.ys;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:            final var bloc = Location.create(spineX, busY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    var prev = spine.get(0);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var cur = spine.get(k);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var factory = Pin.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var factory = SplitterFactory.instance;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var outputs = model.getOutputs();
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var name = outputData.getInputName(idx);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var outp = outputs.vars.get(idx);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:      final var name = outputData.getInputName(cnt);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var pointP = Location.create(pinX, pinY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var singleOutput = outputData.getInputLocs(name, false);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var pointC = Location.create(singleOutput.spineX, singleOutput.spineY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var pointI1 = Location.create(xOffset, pointC.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var pointI2 = Location.create(xOffset, pointP.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var pointP = Location.create(pinX, pinY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var pointS =
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var pointI1 = Location.create(busX - busID * SPINE_DISTANCE, pointS.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:        final var pointI2 = Location.create(pointI1.getX(), pointP.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var pointSe = Location.create(sStartX + bit * SPINE_DISTANCE, pointS.getY() + 20, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var tName = outputData.getInputName(cnt + bit);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:          final var singleOutput = outputData.getInputLocs(tName, false);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:            final var pointC = Location.create(singleOutput.spineX, singleOutput.spineY, true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:              final var pointI = Location.create(pointSe.getX(), pointC.getY(), true);
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var factory = Pin.FACTORY;
src/main/java/com/cburch/logisim/std/gates/CircuitBuilder.java:    final var attrs = factory.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:      final var ret = new Gate(factory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:      final var aret = aBase.visit(this);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:      final var ret = new Gate(NotGate.FACTORY);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        for (final var a : inputs) {
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var a = convertToTwoInputsSub(0, split, subFactory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var b = convertToTwoInputsSub(split, inputs.size(), subFactory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var a = inputs.get(start);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var a = convertToTwoInputsSub(start, split, subFactory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var b = convertToTwoInputsSub(split, stop, subFactory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var old = inputs.get(i);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:          final var now = new Gate(NandGate.FACTORY);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:      final var sub = new Gate(NandGate.FACTORY);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:        final var oldInputs = inputs;
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:          final var sub = new Gate(subFactory);
src/main/java/com/cburch/logisim/std/gates/CircuitDetermination.java:      for (final var sub : inputs) {
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var bds = getOffsetBounds(instance.getAttributeSet());
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var loc0 = Location.create(0, 0, true);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var loc1 = loc0.translate(facing.reverse(), 20 + d);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var ports = new Port[3];
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:            final var port2 = instance.getPortLocation(2);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    var w = 20;
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var face = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var pt0 = painter.getInstance().getPortLocation(2);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    var rotate = 0.0;
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:      final var d = isInverter ? 10 : 0;
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:      final var xp = new int[] {-d, -19 - d, -19 - d, -d};
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:      final var yp = new int[] {0, -7, 7, 0};
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var control = state.getPortValue(2);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:    final var width = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:      final var in = state.getPortValue(1);
src/main/java/com/cburch/logisim/std/gates/ControlledBuffer.java:        final var opts = state.getProject().getOptions().getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    final var triName = Hdl.getNetName(componentInfo, 2, true, nets);
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    var inpName = "";
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    var outpName = "";
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    var triState = "";
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:    final var nrBits =
src/main/java/com/cburch/logisim/std/gates/ControlledBufferHdlGenerator.java:      final var invert =
src/main/java/com/cburch/logisim/std/gates/EvenParityGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/EvenParityGate.java:    for (var i = 1; i < numInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/GateAttributeList.java:    final var len = BASE_ATTRIBUTES.length;
src/main/java/com/cburch/logisim/std/gates/GateAttributeList.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/GateAttributeList.java:    final var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/GateAttributeList.java:    var ret = BASE_ATTRIBUTES.length;
src/main/java/com/cburch/logisim/std/gates/GateAttributes.java:      final var index = negAttr.index;
src/main/java/com/cburch/logisim/std/gates/GateAttributes.java:      final var bit = (int) (negated >> index) & 1;
src/main/java/com/cburch/logisim/std/gates/GateAttributes.java:      final var index = negAttr.index;
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    final var width = inputs[0].getWidth();
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    final var ret = new Value[width];
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    for (var i = 0; i < width; i++) {
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:      var count = 0;
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:      for (var j = 0; j < numInputs; j++) {
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:        final var v = inputs[j].get(i);
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/GateFunctions.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/NandGate.java:      final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/NandGate.java:      final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/NandGate.java:      final var tabWidth = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/NandGate.java:      var first = true;
src/main/java/com/cburch/logisim/std/gates/NandGate.java:      for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/NandGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/NorGate.java:      final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/NorGate.java:      final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/NorGate.java:      final var tabWidth = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/NorGate.java:      var first = true;
src/main/java/com/cburch/logisim/std/gates/NorGate.java:      for (var i = 0; i < nrOfInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/NorGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var ports = new Port[2];
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var CompleteName = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var width = attrs.getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:            for (var b = 0; b < width; b++) {
src/main/java/com/cburch/logisim/std/gates/NotGate.java:              final var e = expressionMap.get(instance.getPortLocation(1), b);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:      final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    var rotate = 0.0;
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    final var in = state.getPortValue(1);
src/main/java/com/cburch/logisim/std/gates/NotGate.java:    var out = in.not();
src/main/java/com/cburch/logisim/std/gates/OddParityGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/OrGate.java:      final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/gates/OrGate.java:      final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/OrGate.java:      final var tabWidth = oneLine.length();
src/main/java/com/cburch/logisim/std/gates/OrGate.java:      var first = true;
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    var ret = inputs[0];
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    for (var i = 1; i < numInputs; i++) {
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var ystart = negateSize >> 1;
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var yend = iconSize - ystart;
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var xstart = 0;
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var xend = iconSize - negateSize;
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var shape = new GeneralPath();
src/main/java/com/cburch/logisim/std/gates/OrGate.java:    final var af = g.getTransform();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    var xMid = -width;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var y0 = -height / 2;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var diam = Math.min(height, 2 * width);
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:        final var exMid = ex0 + elen / 2;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var x0 = xMid - diam / 2;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var oldColor = g.getColor();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      final var val = painter.getPortValue(0);
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      final var x1 = x0 + diam;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      final var yy0 = -(height - diam) / 2;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      final var yy1 = (height - diam) / 2;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var baseAttrs = (GateAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var inputs = baseAttrs.inputs;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var attrs = (GateAttributes) OrGate.FACTORY.createAttributeSet();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var r = Math.min(height / 2, width);
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var hash = r << 4 | inputs;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    var lens = orLenArrays.get(hash);
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      final var yCurveStart = height / 2 - r;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:      for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:        var y = OrGate.FACTORY.getInputOffset(attrs, i).getY();
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var factory = hasBubble ? NorGate.FACTORY : OrGate.FACTORY;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    final var printView = painter.isPrintView() && painter.getInstance() != null;
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:    for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/gates/PainterDin.java:        final var loc = factory.getInputOffset(attrs, i);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      final var path = new GeneralPath();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var mainHeight = (Integer) attrs.size.getValue();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var lengths = new int[inputs];
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var loc0 = OrGate.FACTORY.getInputOffset(attrs, 0);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var locn = OrGate.FACTORY.getInputOffset(attrs, inputs - 1);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var path = computeShield(mainHeight, totalHeight);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      final var loci = OrGate.FACTORY.getInputOffset(attrs, i);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      final var p = new Point2D.Float(loci.getX() + 1, loci.getY());
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var printView = painter.isPrintView();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var attrs = (GateAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var facing = attrs.facing;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var inputs = attrs.inputs;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var negated = attrs.negated;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var lengths = getInputLineLengths(attrs, factory);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:        final var iNegated = ((negated >> i) & 1) == 1;
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:          final var offs = factory.getInputOffset(attrs, i);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:          final var loci = loc.translate(offs.getX(), offs.getY());
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:          final var cent = loci.translate(facing, lengths[i] + 5);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:      final var baseColor = g.getColor();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:        final var offs = factory.getInputOffset(attrs, i);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:        final var src = loc.translate(offs.getX(), offs.getY());
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:        final var len = lengths[i];
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:            final var val = painter.getPortValue(i + 1);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:          final var dst = src.translate(facing, len);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:          final var cent = src.translate(facing, lengths[i] + 5);
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/PainterShaped.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var attributes = (PLAAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var dir = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var outWidth = state.getAttributeValue(ATTR_OUT_WIDTH);
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var tt = state.getAttributeValue(ATTR_TABLE);
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var input = state.getPortValue(IN_PORT);
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/gates/Pla.java:    final var name = CorrectLabel.getCorrectLabel(attrs.getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    final var s = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    for (final var c : b) s.insert(0, ((c == '0' || c == '1') ? c : '-'));
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    final var s = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer().addVhdlKeywords().empty();
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    final var tt = attrs.getValue(Pla.ATTR_TABLE);
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:    final var outSz = attrs.getValue(Pla.ATTR_OUT_WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/gates/PlaHdlGeneratorFactory.java:      var leader = "result <= ";
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var r = addTableRow();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    final var r = new Row(inSize, outSize);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (final var r : rows) ret.append(r.toStandardString()).append("\n");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (final var line : str.split("\n")) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    final var jj = line.indexOf("#");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    final var ii = line.indexOf(" ");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    final var r = tt.addTableRow();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (var i = 0; i < andBits.length(); i++) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var s = andBits.charAt(i);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (var i = 0; i < orBits.length(); i++) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var s = orBits.charAt(i);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      var line = in.readLine();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      for (var i = 0; i < inSize; i++) inBits[i] = ZERO;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      for (var i = 0; i < outSize; i++) outBits[i] = ZERO;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var a = new char[n];
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      for (var i = 0; i < n && i < b.length; i++) a[i] = b[i];
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      for (var i = b.length; i < n; i++) a[i] = ZERO;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var i = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var o = new StringBuilder();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      var ret = i + " " + o;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      for (final var bit : inBits) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (final var row : rows) if (row.matches(input)) return row.getOutput();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:    for (final var row : rows) if (row.matches(input)) return row.comment;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var cPane = super.getContentPane();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var header =
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:                  final var jbutton = new JButton();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var table =
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var d = hdrPanel.getPreferredSize();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var w = (int) d.getWidth() + 50;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var h = (int) d.getHeight() + 20 * newTable.rows.size() + 140;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var ww = Math.max(Math.min(w, 800), 300);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var hh = Math.max(Math.min(h, 500), 200);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var chooser = JFileChoosers.create();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var choice = chooser.showOpenDialog(null);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var loaded = parse(f);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var chooser = JFileChoosers.create();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:      final var choice = chooser.showSaveDialog(null);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var write = new JButton("Export");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var read = new JButton("Import");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var ok = new JButton("OK");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var cancel = new JButton("Cancel");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        for (final var r : newTable.rows) add(new RowPanel(r));
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var prevSize = EditorDialog.this.getSize();
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var rm = new JButton("Remove");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var layout = new GridLayout(1, 1 + inSz + 1 + Math.max(outSz, 2) + 1);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var bitPanel = new JPanel(layout);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          for (var i = inSz - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:            final var ii = i;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          for (var i = outSz; i < 2; i++) bitPanel.add(new Box(BoxLayout.X_AXIS));
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          for (var i = outSz - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:            final var ii = i;
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var txt = new JTextField(null, row.comment, 10);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var more = new JButton("Add Row");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var dim = new Dimension(AppPreferences.getScaled(BS), AppPreferences.getScaled(15));
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        for (var i = inSz - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var l = new JLabel("" + i, SwingConstants.CENTER);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        for (var i = outSz; i < 2; i++) add(Box.createRigidArea(dim));
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        for (var i = outSz - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:          final var l = new JLabel("" + i, SwingConstants.CENTER);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var c = new JLabel("comments");
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var i = new JLabel("input", SwingConstants.RIGHT);
src/main/java/com/cburch/logisim/std/gates/PlaTable.java:        final var o = new JLabel("output", SwingConstants.RIGHT);
src/main/java/com/cburch/logisim/std/hdl/HdlContent.java:    final var ret = (HdlContent) super.clone();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:        final var chooser = JFileChoosers.createAt(getDefaultImportFile(null));
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:          final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:        final var chooser = JFileChoosers.createSelected(getDefaultExportFile(null));
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:          final var f = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var n =
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var buttonsPanel = new JPanel();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var sp = new RTextScrollPane(editor);
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var size = getSize();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var screen = getToolkit().getScreenSize();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var projectFile = project.getLogisimFile().getLoader().getMainFile();
src/main/java/com/cburch/logisim/std/hdl/HdlContentEditor.java:    final var projectFile = project.getLogisimFile().getLoader().getMainFile();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    final var parser = new VhdlParser(content);
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    final var inputsDesc = parser.getInputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    final var outputsDesc = parser.getOutputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    for (var i = 0; i < inputsDesc.size(); i++) {
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:      final var desc = inputsDesc.get(i);
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:      final var desc = outputsDesc.get(i);
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    final var title = new StringBuilder();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:    final var result = new StringBuilder();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:        final var message = new JTextArea();
src/main/java/com/cburch/logisim/std/hdl/VhdlContentComponent.java:        final var sp = new JScrollPane(message);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityAttributes.java:    final var attr = (VhdlEntityAttributes) dest;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityAttributes.java:      final var newContent = (VhdlContentComponent) value;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityAttributes.java:      final var oldlabel = label;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityAttributes.java:      final var newVis = (Boolean) value;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityAttributes.java:      final var name = (String) value;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:      final var proj = (source instanceof Frame frame) ? frame.getProject() : null;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var atrs = (VhdlEntityAttributes) attrs;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var label = (!attrs.getValue(StdAttr.LABEL).equals("")) ? getHDLTopName(attrs) : SName;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var atrs = (VhdlEntityAttributes) attrs;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var content = instance.getAttributeValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var listener = new VhdlEntityListener(instance);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    var label = "";
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var content = attrs.getValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var nbInputs = content.getInputsNumber();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var nbOutputs = content.getOutputsNumber();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var content = painter.getAttributeValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    var metric = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var x0 = bds.getX() + (bds.getWidth() / 2);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var y0 = bds.getY() + metric.getHeight() + 12;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var glbLabel = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:      final var font = g.getFont();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var inputs = content.getInputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    final var outputs = content.getOutputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    for (var i = 0; i < inputs.length; i++)
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:    for (var i = 0; i < outputs.length; i++)
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:      for (final var p : state.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        final var index = state.getPortIndex(p);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        final var val = state.getPortValue(index);
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        final var parameters = server_response.split(":");
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        final var busValue = parameters[1];
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        final var vector_values = new Value[busValue.length()];
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        var k = busValue.length() - 1;
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:        for (final var bit : busValue.toCharArray()) {
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:      for (final var p : state.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:          final var vector_values = new Value[p.getFixedBitWidth().getWidth()];
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:          for (var k = 0; k < p.getFixedBitWidth().getWidth(); k++) {
src/main/java/com/cburch/logisim/std/hdl/VhdlEntityComponent.java:      var content = attrs.getValue(CONTENT_ATTR).getContent()
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    final var contents = attrs.getValue(VhdlEntityComponent.CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    final var inputs = contents.getInputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    final var outputs = contents.getOutputs();
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    var portId = 0;
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    for (final var input : inputs)
src/main/java/com/cburch/logisim/std/hdl/VhdlHdlGeneratorFactory.java:    for (final var output : outputs)
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var input = removeComments();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var pattern = Pattern.compile(ENTITY_PATTERN, Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var parts = pattern.split(input);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var matcher = pattern.matcher(input);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var matcher =
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var result = new StringBuilder();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var library = Pattern.compile(LIBRARY_PATTERN, Pattern.CASE_INSENSITIVE).matcher(input);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var using = Pattern.compile(USING_PATTERN, Pattern.CASE_INSENSITIVE).matcher(input);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var index = line.indexOf(':');
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    var local = new Scanner(line.substring(0, index));
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var names = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var type = new StringBuilder();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    for (final var name : names) {
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var local = new Scanner(line);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var name = local.match().group().trim();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var type = new StringBuilder();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var matcher =
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var ports = matcher.group(1);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var scanner = new Scanner(ports);
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:      final var statement = scanner.next();
src/main/java/com/cburch/logisim/std/hdl/VhdlParser.java:    final var result = scanner.match();
src/main/java/com/cburch/logisim/std/io/AbstractSimpleIoHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/AbstractSimpleIoHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/AbstractSimpleIoHdlGeneratorFactory.java:        final var pressPassive =
src/main/java/com/cburch/logisim/std/io/AbstractSimpleIoHdlGeneratorFactory.java:        final var destination = Hdl.getNetName(componentInfo, i, true, nets);
src/main/java/com/cburch/logisim/std/io/AbstractSimpleIoHdlGeneratorFactory.java:        final var source =
src/main/java/com/cburch/logisim/std/io/Button.java:      final var defaultButtonState =
src/main/java/com/cburch/logisim/std/io/Button.java:      final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/Button.java:      final var instanceImplementation = instance.getComponent().getInstanceStateImpl();
src/main/java/com/cburch/logisim/std/io/Button.java:      final var circuitState = instanceImplementation.getCircuitState();
src/main/java/com/cburch/logisim/std/io/Button.java:      final var state = circuitState.getInstanceState(instance.getComponent());
src/main/java/com/cburch/logisim/std/io/Button.java:      final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/Button.java:    final var defaultButtonState =
src/main/java/com/cburch/logisim/std/io/Button.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Button.java:    var x = bds.getX();
src/main/java/com/cburch/logisim/std/io/Button.java:    var y = bds.getY();
src/main/java/com/cburch/logisim/std/io/Button.java:    final var w = bds.getWidth();
src/main/java/com/cburch/logisim/std/io/Button.java:    final var h = bds.getHeight();
src/main/java/com/cburch/logisim/std/io/Button.java:      final var data = (InstanceDataSingleton) painter.getData();
src/main/java/com/cburch/logisim/std/io/Button.java:    var color = painter.getAttributeValue(IoLibrary.ATTR_COLOR);
src/main/java/com/cburch/logisim/std/io/Button.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Button.java:        final var p = painter.getLocation();
src/main/java/com/cburch/logisim/std/io/Button.java:    final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/Button.java:    final var defaultButtonState =
src/main/java/com/cburch/logisim/std/io/Button.java:    final var val = data == null ? defaultButtonState : (Value) data.getValue();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var val = (State) state.getData();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var facing = state.getInstance().getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var n = state.getInstance().getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var labelNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    for (var i = 0; i < size; i++) {
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var dipSize = 8;
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var n = instance.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var ps = new Port[n];
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    for (var i = 0; i < ps.length; i++) {
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var n = attrs.getValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var segmentWidth = 10;
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var state = (State) painter.getData();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var val = (state == null) ? 0 : state.Value;
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var x = loc.getX();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var y = loc.getY();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var rotate = 0.0;
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:      final var s = Integer.toString(i + 1);
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    var pins = (State) state.getData();
src/main/java/com/cburch/logisim/std/io/DipSwitch.java:    for (var i = 0; i < pins.size; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var ret = (State) super.clone();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var index = row * cols + col;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      var ret = grid[index];
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      var gridloc = (rows - 1) * cols + index;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var stride = -cols;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var vals = colVector.getAll();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < vals.length; i++, gridloc += stride) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var val = vals[i];
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      var gridloc = (index + 1) * cols - 1;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var stride = -1;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var vals = rowVector.getAll();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < vals.length; i++, gridloc += stride) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var val = vals[i];
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var rowVals = rowVector.getAll();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      final var colVals = colVector.getAll();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      var gridloc = 0;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = rowVals.length - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        var wholeRow = rowVals[i];
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:          for (var j = colVals.length - 1; j >= 0; j--, gridloc++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:            final var val = colVals[colVals.length - 1 - j];
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    for (var r = 0; r < rows; r++) for (int c = 0; c < cols; c++) result.add("Row" + r + "Col" + c);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var cols = attrs.getValue(getAttributeColumns()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var rows = attrs.getValue(getAttributeRows()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var rows = state.getAttributeValue(getAttributeRows()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var cols = state.getAttributeValue(getAttributeColumns()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var clock = state.getTickCount();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    var data = (State) state.getData();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var rows = instance.getAttributeValue(getAttributeRows()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var cols = instance.getAttributeValue(getAttributeColumns()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var paddingY = 2;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var paddingX = 2;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var onColor = painter.getAttributeValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var offColor = painter.getAttributeValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var shape = painter.getAttributeValue(getAttributeShape());
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var data = getState(painter);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var ticks = painter.getTickCount();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var bounds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var showState = painter.getShowState();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var rows = data.rows;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var cols = data.cols;
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    for (var j = 0; j < rows; j++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < cols; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var val = data.get(j, i, ticks);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var rows = state.getAttributeValue(getAttributeRows()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var cols = state.getAttributeValue(getAttributeColumns()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var data = getState(state);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < cols; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var rows = instance.getAttributeValue(getAttributeRows()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var cols = instance.getAttributeValue(getAttributeColumns()).getWidth();
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:    final var selectLoc = instance.getAttributeValue(StdAttr.SELECT_LOC);
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < cols; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:      for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixBase.java:        final var dx = selectLoc == StdAttr.SELECT_BOTTOM_LEFT ? 0 : cols * 10;
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var colBased =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var rowBased =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var rows =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var cols =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:      for (var dotMatrixRow = 0; dotMatrixRow < rows; dotMatrixRow++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:        final var ledMatrixRow = rows - dotMatrixRow - 1;
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:        for (var ledMatrixCol = 0; ledMatrixCol < cols; ledMatrixCol++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var wire =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var idx =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:      for (var ledMatrixRow = 0; ledMatrixRow < rows; ledMatrixRow++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:        for (var dotMatrixCol = 0; dotMatrixCol < cols; dotMatrixCol++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var ledMatrixCol = cols - dotMatrixCol - 1;
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var wire =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var idx =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:      for (var dotMatrixRow = 0; dotMatrixRow < rows; dotMatrixRow++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:        final var ledMatrixRow = rows - dotMatrixRow - 1;
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:        for (var ledMatrixCol = 0; ledMatrixCol < cols; ledMatrixCol++) {
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var rowWire =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var colWire =
src/main/java/com/cburch/logisim/std/io/DotMatrixHdlGeneratorFactory.java:          final var idx =
src/main/java/com/cburch/logisim/std/io/HexDigit.java:    var summary = 0;
src/main/java/com/cburch/logisim/std/io/HexDigit.java:    var baseVal = state.getPortValue(HEX);
src/main/java/com/cburch/logisim/std/io/HexDigit.java:      final var dpVal = state.getPortValue(DP);
src/main/java/com/cburch/logisim/std/io/HexDigit.java:    final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/HexDigitHdlGeneratorFactory.java:    final var startId = componentInfo.getLocalBubbleOutputStartId();
src/main/java/com/cburch/logisim/std/io/HexDigitHdlGeneratorFactory.java:    final var bubbleBusName = LOCAL_OUTPUT_BUBBLE_BUS_NAME;
src/main/java/com/cburch/logisim/std/io/HexDigitHdlGeneratorFactory.java:    final var signalName =
src/main/java/com/cburch/logisim/std/io/HexDigitHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/std/io/HexDigitHdlGeneratorFactory.java:      final var generator =
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var cx = loc.getX() - 15;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var cy = loc.getY() + 5;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      var state = (State) painter.getData();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var x = loc.getX();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var y = loc.getY();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var dx = state.xPos;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var dy = state.yPos;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var x0 = x - 15 + (dx > 5 ? 1 : dx < -5 ? -1 : 0);
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var y0 = y + 5 + (dy > 5 ? 1 : dy < 0 ? -1 : 0);
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var x1 = x - 15 + dx;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var y1 = y + 5 + dy;
src/main/java/com/cburch/logisim/std/io/Joystick.java:      final var ballColor = painter.getAttributeValue(IoLibrary.ATTR_COLOR);
src/main/java/com/cburch/logisim/std/io/Joystick.java:      var s = (State) state.getData();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var ports = new Port[2];
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var x = loc.getX();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var y = loc.getY();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Joystick.java:    final var bits = state.getAttributeValue(ATTR_WIDTH);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var data = getKeyboardState(painter);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var bds = painter.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var fm = g.getFontMetrics(DEFAULT_FONT);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var asc = fm.getAscent();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      var x = bds.getX() + 8;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var y = bds.getY() + (bds.getHeight() + asc) / 2;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var data = getKeyboardState(state);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      var changed = false;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      var used = true;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var data = getKeyboardState(state);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var ch = e.getKeyChar();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      var changed = false;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var keyboardData = getKeyboardState(state);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var bufLen = getBufferLength(state.getAttributeValue(ATTR_BUFFER));
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    var ret = (KeyboardData) state.getData();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var ps = new Port[5];
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var asc = fm.getAscent();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var x0 = x + 8;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var ys = y + (HEIGHT + asc) / 2;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var dotsWidth = fm.stringWidth("m");
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var sub = str.substring(dispStart, dispEnd);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var sub = str.substring(dispStart, dispEnd);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    var r = width / 10;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var d = 2 * r;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var px = new int[3];
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var py = new int[3];
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    for (final var special : specials) {
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var code = special;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var pos = code & 0xFF;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var key = code >> 16;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:        final var y1 = ys - asc / 2;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:        final var y1 = ys - 3;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var showState = painter.getShowState();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var specials = new ArrayList<Integer>();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var state = getKeyboardState(painter);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:        for (var i = state.getNextSpecial(0); i >= 0; i = state.getNextSpecial(i + 1)) {
src/main/java/com/cburch/logisim/std/io/Keyboard.java:          final var c = state.getChar(i);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:        final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var len = getBufferLength(painter.getAttributeValue(ATTR_BUFFER));
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var str = S.get("keybDesc", "" + len);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var x = bds.getX() + (WIDTH - fm.stringWidth(str)) / 2;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var y = bds.getY() + (HEIGHT + fm.getAscent()) / 2;
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var state = getKeyboardState(circState);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var clear = circState.getPortValue(CLR);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var clock = circState.getPortValue(CK);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var enable = circState.getPortValue(RE);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:      final var lastClock = state.setLastClock(clock);
src/main/java/com/cburch/logisim/std/io/Keyboard.java:        final var go = (trigger == StdAttr.TRIG_FALLING)
src/main/java/com/cburch/logisim/std/io/Keyboard.java:    final var out = Value.createKnown(BitWidth.create(7), c & 0x7F);
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var ret = (KeyboardData) super.clone();
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var ret = buf[0];
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    var len = str.length();
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    var w = fm.stringWidth(str.substring(i0, i1));
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var newPos = pos + delta;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var ret = lastClock;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var s = str;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var build = new StringBuilder();
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = bufferLength;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var c = buf[i];
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var buf = buffer;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var oldLen = buf.length;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:        final var newBuf = new char[len];
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var pos = cursorPos;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    var i0 = dispStart;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    var i1 = dispEnd;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var str = toString();
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var len = str.length();
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:    final var max = Keyboard.WIDTH - 8 - 4;
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var w0 = fm.stringWidth(str.charAt(0) + "m");
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var w1 = fm.stringWidth("m");
src/main/java/com/cburch/logisim/std/io/KeyboardData.java:      final var w = i0 == 0 ? fm.stringWidth(str) : w0 + fm.stringWidth(str.substring(i0));
src/main/java/com/cburch/logisim/std/io/Led.java:      final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/Led.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Led.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Led.java:    final var data = (InstanceDataSingleton) painter.getData();
src/main/java/com/cburch/logisim/std/io/Led.java:    final var val = data == null ? Value.FALSE : (Value) data.getValue();
src/main/java/com/cburch/logisim/std/io/Led.java:    final var bds = painter.getBounds().expand(-1);
src/main/java/com/cburch/logisim/std/io/Led.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Led.java:      final var onColor = painter.getAttributeValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/Led.java:      final var offColor = painter.getAttributeValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/Led.java:      final var activ = painter.getAttributeValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/Led.java:      final var desired = activ ? Value.TRUE : Value.FALSE;
src/main/java/com/cburch/logisim/std/io/Led.java:    final var val = state.getPortValue(0);
src/main/java/com/cburch/logisim/std/io/Led.java:    final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var nrColAddrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfColumns);
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var scanningReload = (int) (fpgaClockFrequency / 1000);
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var nrOfScanningBitsCount = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(scanningReload);
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var maxNrLeds = ((int) Math.pow(2.0, nrColAddrBits)) * nrOfRows;
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var generics = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/LedArrayColumnScanningHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var typeId = LedArrayDriving.getId(type);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var nrBitsDouble = Math.log(value) / Math.log(2.0);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var nrRowAddressBits = getNrOfBitsRequired(nrOfRows);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var nrColumnAddressBits = getNrOfBitsRequired(nrOfColumns);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var index = pinNr % 3;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var col = pinNr / 3;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var index = (pinNr - nrRowAddressBits) % nrOfColumns;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var col = (pinNr - nrRowAddressBits) / nrOfColumns;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var index = (pinNr - nrColumnAddressBits) % nrOfRows;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var col = (pinNr - nrColumnAddressBits) / nrOfRows;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var externals = new TreeMap<String, Integer>();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var nrRowAddressBits = getNrOfBitsRequired(nrOfRows);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var nrColumnAddressBits = getNrOfBitsRequired(nrOfColumns);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var wires = new TreeMap<String, Integer>();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var componentMap = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var connections = new ArrayList<String>(
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var connections = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    for (var pin = 0; pin < info.getNrOfPins(); pin++) {
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var led = LineBuffer.formatHdl("s_{{1}}{{2}}{{<}}{{3}}{{>}}", LedArrayInputs, id, pin);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var connections =
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    for (var pin = 0; pin < array.getNrOfPins(); pin++) {
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var red = LineBuffer.formatHdl("s_{{1}}{{2}}{{<}}{{3}}{{>}}", LedArrayRedInputs, id, pin);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var green = LineBuffer.formatHdl("s_{{1}}{{2}}{{<}}{{3}}{{>}}", LedArrayGreenInputs, id, pin);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var blue = LineBuffer.formatHdl("s_{{1}}{{2}}{{<}}{{3}}{{>}}", LedArrayBlueInputs, id, pin);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:        final var map = array.getPinMap(pin);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var onColor = map.getAttributeSet().getValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var offColor = map.getAttributeSet().getValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var rOn = onColor.getRed();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var gOn = onColor.getGreen();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var bOn = onColor.getBlue();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var rOff = offColor.getRed();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var gOff = offColor.getGreen();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var bOff = offColor.getBlue();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var pinName = map.getHdlSignalName(array.getMapPin(pin));
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:          final var pinName = map.getHdlSignalName(array.getMapPin(pin));
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var onBit = (onColor > 128);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var offBit = (offColor > 128);
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var result = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    var preamble = Hdl.isVhdl() ? LineBuffer.formatVhdl("{{port}} {{map}} ( ") : "( ";
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    var maxNameLength = 0;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    var first = true;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    var nrOfGenerics = 0;
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    for (final var generic : generics.keySet()) {
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:    for (final var generic : generics.keySet()) {
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var intro = first ? preamble : " ".repeat(preamble.length());
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var map = Hdl.isVhdl() ? LineBuffer.formatHdl("{{1}}{{2}} => {{3}}", generic,
src/main/java/com/cburch/logisim/std/io/LedArrayGenericHdlGeneratorFactory.java:      final var end = (nrOfGenerics == 0) ? isGeneric ? " )" : " );" : ",";
src/main/java/com/cburch/logisim/std/io/LedArrayLedDefaultHdlGeneratorFactory.java:    final var generics = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayLedDefaultHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayLedDefaultHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/LedArrayLedDefaultHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var nrRowAddrBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(nrOfRows);
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var scanningReload = (int) (FpgaClockFrequency / 1000);
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var nrOfScanningBits = LedArrayGenericHdlGeneratorFactory.getNrOfBitsRequired(scanningReload);
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var maxNrLeds = ((int) Math.pow(2.0, nrRowAddrBits)) * nrOfRows;
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var generics = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/LedArrayRowScanningHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:    final var isSingleBus =
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:    final var nrOfSegments =
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:    final var wires = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:    for (var pin = 0; pin < nrOfSegments; pin++) {
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:      final var destPin =
src/main/java/com/cburch/logisim/std/io/LedBarHdlGeneratorFactory.java:      final var sourcePin =
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var x = bounds.getX();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var y = bounds.getY();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var w = bounds.getWidth();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var h = bounds.getHeight();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var qx = loc.getX();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var qy = loc.getY();
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var dx = qx - (x + 0.5 * w);
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var dy = qy - (y + 0.5 * h);
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var sum = (dx * dx) / (w * w) + (dy * dy) / (h * h);
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var offColor = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var onColor = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var x = bounds.getX() + 1;
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var y = bounds.getY() + 1;
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var w = bounds.getWidth() - 2;
src/main/java/com/cburch/logisim/std/io/LedShape.java:    final var h = bounds.getHeight() - 2;
src/main/java/com/cburch/logisim/std/io/LedShape.java:      final var activ = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/LedShape.java:      final var data = (InstanceDataSingleton) getData(state);
src/main/java/com/cburch/logisim/std/io/LedShape.java:      final var val = data == null ? Value.FALSE : (Value) data.getValue();
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:    final var portType = componentInfo.getComponent().getAttributeSet().getValue(PortIo.ATTR_DIR);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:    var nrOfPins =
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      for (var busIndex = 0; nrOfPins > 0; busIndex++) {
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var startIndex =
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var nrOfBitsInThisBus = Math.min(nrOfPins, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var endIndex = startIndex + nrOfBitsInThisBus - 1;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      for (var busIndex = 0; nrOfPins > 0; busIndex++) {
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var startIndex =
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var nrOfBitsInThisBus = Math.min(nrOfPins, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var endIndex = startIndex + nrOfBitsInThisBus - 1;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      var outputIndex = 0;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      for (var busIndex = 0; nrOfPins > 0; busIndex++) {
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var startIndex =
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var nrOfBitsInThisBus = Math.min(nrOfPins, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var endIndex = startIndex + nrOfBitsInThisBus - 1;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var inputIndex = (portType == PortIo.INOUTSE) ? (busIndex + 1) : (busIndex * 2 + 1);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      var enableIndex = 0;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:      for (var busIndex = 0; nrOfPins > 0; busIndex++) {
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var startIndex =
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var nrOfBitsInThisBus = Math.min(nrOfPins, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:        final var endIndex = startIndex + nrOfBitsInThisBus - 1;
src/main/java/com/cburch/logisim/std/io/PortHdlGeneratorFactory.java:          for (var busBitIndex = 0; busBitIndex < nrOfBitsInThisBus; busBitIndex++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:    for (var i = 0; i < size; i++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:      for (var pin = 0; pin < size; pin++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:        for (var newPin = size; newPin < newSize; newPin++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var pokeValue = pokeState.get(pinIndex).get(0);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var newValue = new Value[1];
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var inputValue = inputState.get(pinIndex);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var pokeValue = pokeState.get(pinIndex);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var enableValue = enableState.get(pinIndex);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var resultValue =
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var pinValue = getPinValue(pinIndex, directionAttribute);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var other = new PortState(size);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var cx = e.getX() - loc.getX() - 7 + 2;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var cy = e.getY() - loc.getY() - 25 + 2;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var i = cx / 10;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var j = cy / 10;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var n = 2 * i + j;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var data = getState(state);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var dir = instance.getAttributeValue(ATTR_DIR);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var size = instance.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var nBus = (((size - 1) / BitWidth.MAXWIDTH) + 1);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var nPorts = -1;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var p = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var x = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var y = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var dx = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var dy = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var n = size;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var i = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var e = Math.min(n, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var range = "[" + i + "..." + (i + e - 1) + "]";
src/main/java/com/cburch/logisim/std/io/PortIo.java:      final var e = Math.min(n, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var n = attrs.getValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var nrPins = instance.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        var inputs = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:        var outputs = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:        var ios = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var labels = getLabels(nrPins);
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var stateImpl = instance.getComponent().getInstanceStateImpl();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var circuitState = stateImpl.getCircuitState();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var circuit = circuitState.getCircuit();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var project = circuit.getProject();
src/main/java/com/cburch/logisim/std/io/PortIo.java:        final var simulator = project.getSimulator();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var bds = painter.getBounds().rotate(Direction.EAST, facing, 0, 0);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var w = bds.getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var h = bds.getHeight();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var x = painter.getLocation().getX();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var y = painter.getLocation().getY();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var rotate = 0.0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var size = painter.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var nBus = (((size - 1) / BitWidth.MAXWIDTH) + 1);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      for (var i = 0; i < size; i++) g.fillRect(7 + ((i / 2) * 10), 25 + (i % 2) * 10, 6, 6);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      for (var i = 0; i < size; i++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var px = ((dir == INOUTSE || dir == INOUTME) ? 0 : 10);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var py = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:    for (var p = 0; p < nBus; p++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:    for (var p = 0; p < nBus; p++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var size = state.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var data = (PortState) state.getData();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var portType = state.getAttributeValue(ATTR_DIR);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var nrOfPins = state.getAttributeValue(ATTR_SIZE).getWidth();
src/main/java/com/cburch/logisim/std/io/PortIo.java:    final var stateData = getState(state);
src/main/java/com/cburch/logisim/std/io/PortIo.java:    var currentPortIndex = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var enableValue = state.getPortValue(currentPortIndex);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var inputValue = state.getPortValue(currentPortIndex);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var pinIndexCorrection = -BitWidth.MAXWIDTH;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      for (var pinIndex = 0; pinIndex < nrOfPins; pinIndex++) {
src/main/java/com/cburch/logisim/std/io/PortIo.java:          final var enableIndex = portType.equals(INOUTSE) ? 0 : pinIndex - pinIndexCorrection;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var nrOfRemainingPins = nrOfPins;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var nrOfPinsInCurrentBus = Math.min(nrOfRemainingPins, BitWidth.MAXWIDTH);
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var outputValue = new Value[nrOfPinsInCurrentBus];
src/main/java/com/cburch/logisim/std/io/PortIo.java:      var pinIndexCorrection = 0;
src/main/java/com/cburch/logisim/std/io/PortIo.java:      for (var pinIndex = 0; pinIndex < nrOfPins; pinIndex++) {
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    final var inpLabels = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    final var outpLabels = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    final var ioLabels = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    for (var i = 0; i < 16; i++) {
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    final var ps = new Port[10];
src/main/java/com/cburch/logisim/std/io/ReptarLocalBus.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/ReptarLocalBusHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/io/ReptarLocalBusHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/std/io/RgbArrayColumnScanningHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/RgbArrayColumnScanningHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/RgbArrayColumnScanningHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/RgbArrayLedDefaultHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/RgbArrayLedDefaultHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/RgbArrayLedDefaultHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/RgbArrayRowScanningHdlGeneratorFactory.java:    final var ports = new HashMap<String, String>();
src/main/java/com/cburch/logisim/std/io/RgbArrayRowScanningHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/io/RgbArrayRowScanningHdlGeneratorFactory.java:          genvar i;
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var labelNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    for (var i = 0; i < 3; i++) labelNames.add("");
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var ps = new Port[3];
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var data = (InstanceDataSingleton) painter.getData();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var bds = painter.getBounds().expand(-1);
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var activ = painter.getAttributeValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var mask = activ ? 0 : 7;
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var red = ((sum >> RED) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var green = ((sum >> GREEN) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var blue = ((sum >> BLUE) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var ledColor = new Color(red, green, blue);
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    for (var i = 0; i < 3; i++) {
src/main/java/com/cburch/logisim/std/io/RgbLed.java:      final var val = state.getPortValue(i);
src/main/java/com/cburch/logisim/std/io/RgbLed.java:    final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var activ = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var data = (InstanceDataSingleton) getData(state);
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      var summ = (data == null ? 0 : (Integer) data.getValue());
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var mask = activ ? 0 : 7;
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var red = ((summ >> RgbLed.RED) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var green = ((summ >> RgbLed.GREEN) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/RgbLedShape.java:      final var blue = ((summ >> RgbLed.BLUE) & 1) * 0xFF;
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var data = (InstanceDataSingleton) painter.getData();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var active = painter.getAttributeValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var x = bds.getX() + 5;
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var y = bds.getY();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var onColor = painter.getAttributeValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var offColor = painter.getAttributeValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var bgColor = painter.getAttributeValue(IoLibrary.ATTR_BACKGROUND);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var labelNames = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var hasDp = instance.getAttributeValue(ATTR_DP);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var ps = new Port[hasDp ? 8 : 7];
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    var summary = 0;
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var max = state.getAttributeValue(ATTR_DP) ? 8 : 7;
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    for (var i = 0; i < max; i++) {
src/main/java/com/cburch/logisim/std/io/SevenSegment.java:    final var data = (InstanceDataSingleton) state.getData();
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var offColor = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_OFF_COLOR);
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var onColor = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_ON_COLOR);
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var bgColor = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_BACKGROUND);
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var x = bounds.getX();
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var y = bounds.getY();
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var w = bounds.getWidth();
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    final var h = bounds.getHeight();
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    var summ = 0;
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    var desired = 1;
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:      final var activ = path.leaf().getAttributeSet().getValue(IoLibrary.ATTR_ACTIVE);
src/main/java/com/cburch/logisim/std/io/SevenSegmentShape.java:    for (var i = 0; i <= 7; i++) {
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var rows = getRowCount(attrs.getValue(ATTR_ROWS));
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var cols = getColumnCount(attrs.getValue(ATTR_COLUMNS));
src/main/java/com/cburch/logisim/std/io/Tty.java:    var width = 2 * BORDER + cols * COL_WIDTH;
src/main/java/com/cburch/logisim/std/io/Tty.java:    var height = 2 * BORDER + rows * ROW_HEIGHT;
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var rows = getRowCount(state.getAttributeValue(ATTR_ROWS));
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var cols = getColumnCount(state.getAttributeValue(ATTR_COLUMNS));
src/main/java/com/cburch/logisim/std/io/Tty.java:    var ret = (TtyState) state.getData();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var showState = painter.getShowState();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var rows = getRowCount(painter.getAttributeValue(ATTR_ROWS));
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var cols = getColumnCount(painter.getAttributeValue(ATTR_COLUMNS));
src/main/java/com/cburch/logisim/std/io/Tty.java:      final var rowData = new String[rows];
src/main/java/com/cburch/logisim/std/io/Tty.java:      final var state = getTtyState(painter);
src/main/java/com/cburch/logisim/std/io/Tty.java:        for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/std/io/Tty.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/io/Tty.java:      for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/std/io/Tty.java:          final var x0 = x + fm.stringWidth(rowData[i].substring(0, curCol));
src/main/java/com/cburch/logisim/std/io/Tty.java:      var str = S.get("ttyDesc", "" + rows, "" + cols);
src/main/java/com/cburch/logisim/std/io/Tty.java:      var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var state = getTtyState(circState);
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var clear = circState.getPortValue(CLR);
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var clock = circState.getPortValue(CK);
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var enable = circState.getPortValue(WE);
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var in = circState.getPortValue(IN);
src/main/java/com/cburch/logisim/std/io/Tty.java:      final var lastClock = state.setLastClock(clock);
src/main/java/com/cburch/logisim/std/io/Tty.java:        final var go =
src/main/java/com/cburch/logisim/std/io/Tty.java:    final var tty = getTtyState(state);
src/main/java/com/cburch/logisim/std/io/TtyShape.java:    final var data = state == null ? null : (TtyState) getData(state);
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var rows = data.getNrRows();
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var cols = data.getNrCols();
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      var width = 2 * Tty.BORDER + cols * Tty.COL_WIDTH;
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      var height = 2 * Tty.BORDER + rows * Tty.ROW_HEIGHT;
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var rows = data.getNrRows();
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var rowData = new String[rows];
src/main/java/com/cburch/logisim/std/io/TtyShape.java:        for (var i = 0; i < rows; i++) rowData[i] = data.getRowString(i);
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      final var x = bounds.getX() + Tty.BORDER;
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      var y = bounds.getY() + Tty.BORDER + (Tty.ROW_HEIGHT + fm.getAscent()) / 2;
src/main/java/com/cburch/logisim/std/io/TtyShape.java:      for (var i = 0; i < rows; i++) {
src/main/java/com/cburch/logisim/std/io/TtyState.java:    final var lastLength = lastRow.length();
src/main/java/com/cburch/logisim/std/io/TtyState.java:    final var ret = lastClock;
src/main/java/com/cburch/logisim/std/io/TtyState.java:    final var oldRows = rowData.length + 1;
src/main/java/com/cburch/logisim/std/io/TtyState.java:      final var newData = new String[rows - 1];
src/main/java/com/cburch/logisim/std/io/TtyState.java:    final var oldCols = colCount;
src/main/java/com/cburch/logisim/std/io/TtyState.java:          final var s = rowData[i];
src/main/java/com/cburch/logisim/std/io/Video.java:      final var s = attrs.getValue(SCALE_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:      final var w = attrs.getValue(WIDTH_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:      final var h = attrs.getValue(HEIGHT_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:      final var bw = (Math.max(s * w + 14, 100));
src/main/java/com/cburch/logisim/std/io/Video.java:      final var bh = (Math.max(s * h + 14, 20));
src/main/java/com/cburch/logisim/std/io/Video.java:    final var state = getState(circuitState);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var attrs = getAttributeSet();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var x = addr(circuitState, P_X);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var y = addr(circuitState, P_Y);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var color = addr(circuitState, P_DATA);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var cm = getColorModel(attrs.getValue(COLOR_OPTION));
src/main/java/com/cburch/logisim/std/io/Video.java:    final var w = attrs.getValue(WIDTH_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var h = attrs.getValue(HEIGHT_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:      final var g = state.img.getGraphics();
src/main/java/com/cburch/logisim/std/io/Video.java:      final var g = state.img.getGraphics();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var loc = getLocation();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var s = getState(context.getCircuitState());
src/main/java/com/cburch/logisim/std/io/Video.java:    final var g = context.getGraphics().create();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var attrs = getAttributeSet();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var cm = getColorModel(attrs.getValue(COLOR_OPTION));
src/main/java/com/cburch/logisim/std/io/Video.java:    final var s = attrs.getValue(SCALE_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var w = attrs.getValue(WIDTH_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var h = attrs.getValue(HEIGHT_OPTION);
src/main/java/com/cburch/logisim/std/io/Video.java:    final var bw = (Math.max(s * w + 14, 100));
src/main/java/com/cburch/logisim/std/io/Video.java:    final var bh = (Math.max(s * h + 14, 20));
src/main/java/com/cburch/logisim/std/io/Video.java:    for (var i = 0; i < 6; i++) {
src/main/java/com/cburch/logisim/std/io/Video.java:    var state = (State) circuitState.getData(this);
src/main/java/com/cburch/logisim/std/io/Video.java:      final var g = img.getGraphics();
src/main/java/com/cburch/logisim/std/io/Video.java:    for (var i = getEnds().size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/io/Video.java:    final var attrs = getAttributeSet();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var bpp = getColorModel(attrs.getValue(COLOR_OPTION)).getPixelSize();
src/main/java/com/cburch/logisim/std/io/Video.java:    final var xs = 31 - Integer.numberOfLeadingZeros(attrs.getValue(WIDTH_OPTION));
src/main/java/com/cburch/logisim/std/io/Video.java:    final var ys = 31 - Integer.numberOfLeadingZeros(attrs.getValue(HEIGHT_OPTION));
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var compFact = comp.getFactory();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      final var d = (Data) circState.getData(comp);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      for (final var subComponent :
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var b = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var b = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var x = b.getX();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var y = b.getY();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var height = (byte) b.getHeight();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var width = (byte) b.getWidth();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    var data = (Data) state.getData();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var data = getData(state);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    var active = state.getPortValue(ENABLE) == Value.TRUE;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    var freq = (int) state.getPortValue(FREQ).toLongValue();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      final var vol = (int) state.getPortValue(VOL).toLongValue();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      final var volumeWidth = (byte) state.getAttributeValue(VOLUME_WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var volumeWidth = (byte) instance.getAttributeValue(VOLUME_WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var ports = new Port[4];
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    final var selectLoc = instance.getAttributeValue(StdAttr.SELECT_LOC);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    var xPw = 20;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:    var yPw = 20;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      var oldfreq = -1;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:      var oldpw = -1;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            var cycle = Math.max(1, sampleRate / hz);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            var values = new double[4 * cycle];
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            for (var i = 0; i < values.length; i++) {
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:              var nsig = new double[values.length];
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:              for (var k = 0; k < smoothLevel; k++) {
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:                var sum = 0;
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:                for (var i = 0; i < values.length; i++) {
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            var rvalues = new double[sampleRate];
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            for (var i = 0; i < sampleRate; i += cycle) {
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            var buf = new byte[4 * sampleRate];
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:              var val = (short) Math.round(rvalues[j] * vol);
src/main/java/com/cburch/logisim/std/io/extra/Buzzer.java:            var newAis = new AudioInputStream(new ByteArrayInputStream(buf), af, buf.length);
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    final var datas = str.split(" ");
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    var cnt = 0;
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    for (final var data : datas) {
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:        for (var j = 0; j < Integer.parseInt(tmp[1]); j++) {
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    final var outputValueCopy = new Value[getOutputs()];
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    var dirty = false;
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    var data = new StringBuilder();
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    for (var i = 0; i < size1; i++) {
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:    var thereisadot = false;
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:      final var oldInputAnd = Arrays.copyOf(inputAnd, inputAnd.length);
src/main/java/com/cburch/logisim/std/io/extra/PlaRomData.java:      final var oldAndOutput = Arrays.copyOf(andOutput, andOutput.length);
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:        var data = (SliderValue) state.getData();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:      final var data = (SliderValue) state.getData();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:      final var sliderPosition =
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:      final var bounds = state.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:      final var slider =
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:      final var completeValue =
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var isWestOrientated = instance.getAttributeValue(StdAttr.FACING) == Direction.WEST;
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var bounds = instance.getBounds();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var width = MAXIMUM_SLIDER_POSITION + 20;
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var height = 30;
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var gfx = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var bounds = painter.getBounds();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var data = (SliderValue) painter.getData();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var posX = bounds.getX();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var posY = bounds.getY();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var sliderPosition =
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var data = (SliderValue) state.getData();
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    final var bitWidth = state.getAttributeValue(WIDTH);
src/main/java/com/cburch/logisim/std/io/extra/Slider.java:    var sliderValue = 0;
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var ret = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var s = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:        final var myState = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var val = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var myState = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var myState = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var ps = new Port[numInputs + STD_PORTS];
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var parts = this.getName().split(" ");
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var myState = (StateData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var myState = (StateData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:    final var trigger = painter.getAttributeValue(triggerAttribute);
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var inputs = new Value[n];
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlop.java:      final var newVal = computeValue(inputs, data.curValue);
src/main/java/com/cburch/logisim/std/memory/AbstractFlipFlopHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/memory/ClockState.java:    final var oldClock = lastClock;
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var widthVal = instance.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var ps = new Port[8];
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var symbolWidth = getSymbolWidth(width);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var controlTopx = new int[8];
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var controlTopy = new int[8];
src/main/java/com/cburch/logisim/std/memory/Counter.java:    var isCTRm = (max == painter.getAttributeValue(StdAttr.WIDTH).getMask());
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var label =
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var inverted =
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var xend = (inverted) ? xpos + 12 : xpos + 20;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var len = (width + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var xcenter = getSymbolWidth(width) - 25;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var val = state.value;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      var value = "";
src/main/java/com/cburch/logisim/std/memory/Counter.java:        for (var i = 0; i < StringUtil.toHexString(width, val.toLongValue()).length(); i++)
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var realYpos = ypos + bitNr * 20;
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var first = bitNr == 0;
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var last = bitNr == (nrOfBits - 1);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var LineWidth =
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var val = state.value;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:      var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:      var xcenter = (getSymbolWidth(width) / 2) + 10;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      var value = "";
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var widthVal = attrs.getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var state = (RegisterData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var val = state == null ? 0 : state.value.toLongValue();
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var str = StringUtil.toHexString(width, val);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var Xpos = painter.getLocation().getX();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var Ypos = painter.getLocation().getY();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    for (var bit = 0; bit < width; bit++) {
src/main/java/com/cburch/logisim/std/memory/Counter.java:    var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var max = new BigInteger(Long.toUnsignedString(state.getAttributeValue(ATTR_MAX)));
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var clock = state.getPortValue(CK);
src/main/java/com/cburch/logisim/std/memory/Counter.java:    final var triggered = data.updateClock(clock, triggerType);
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var ld = state.getPortValue(LD) == Value.TRUE;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var en = state.getPortValue(EN) != Value.FALSE;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var UpCount = state.getPortValue(UD) != Value.FALSE;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var oldVal = data.value;
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var oldValue = new BigInteger(Long.toUnsignedString(oldVal.toLongValue()));
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var loadValue =
src/main/java/com/cburch/logisim/std/memory/Counter.java:      final var compVal = (UpCount) ? max : BigInteger.ZERO;
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var oldWidth = (BitWidth) oldValue;
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var newWidth = (BitWidth) newValue;
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var mask = newWidth.getMask();
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var oldMax = base.getValue(Counter.ATTR_MAX);
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var newMax = (newWidth.getWidth() < oldWidth.getWidth()) ? (mask & oldMax) : mask;
src/main/java/com/cburch/logisim/std/memory/CounterAttributes.java:      final var width = base.getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/CounterHdlGeneratorFactory.java:    final var result = new TreeMap<String, String>(super.getPortMap(nets, mapInfo));
src/main/java/com/cburch/logisim/std/memory/CounterHdlGeneratorFactory.java:      final var nrOfBits = compInfo.getComponent().getAttributeSet().getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/memory/CounterHdlGeneratorFactory.java:        final var mappedInputData = result.get(LOAD_DATA_INPUT);
src/main/java/com/cburch/logisim/std/memory/CounterHdlGeneratorFactory.java:        final var mappedOutputData = result.get(COUNT_DATA_OUTPUT);
src/main/java/com/cburch/logisim/std/memory/CounterHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/memory/CounterPoker.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/CounterPoker.java:    final var dataWidth = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/CounterPoker.java:    final var width = dataWidth == null ? 8 : dataWidth.getWidth();
src/main/java/com/cburch/logisim/std/memory/CounterPoker.java:    final var len = (width + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/CounterPoker.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/JKFlipFlop.java:      final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/memory/JKFlipFlop.java:      final var preamble = LineBuffer.formatHdl("{{assign}}s_nextState{{=}}");
src/main/java/com/cburch/logisim/std/memory/Mem.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/memory/Mem.java:    final var x = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/std/memory/Mem.java:    final var y = bds.getY() - 2;
src/main/java/com/cburch/logisim/std/memory/Mem.java:    final var halign = GraphicsUtil.H_CENTER;
src/main/java/com/cburch/logisim/std/memory/Mem.java:    final var valign = GraphicsUtil.V_BOTTOM;
src/main/java/com/cburch/logisim/std/memory/Mem.java:    var pass = 0;
src/main/java/com/cburch/logisim/std/memory/Mem.java:    var addrBits = NrAddressBits;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    for (var i = 0; i < pages.length; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < pages.length; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var page = pages[index];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var oldValues = new long[page.getLength()];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var changed = false;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    for (var j = 0; j < oldValues.length; j++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var ret = (MemContents) super.clone();
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < ret.pages.length; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var pageStart = (int) (start >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var startOffs = (int) (start & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var pageEnd = (int) ((start + len - 1) >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var endOffs = (int) ((start + len - 1) & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var vals = new long[(int) len];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var page = pages[pageStart];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var oldValues = page.get(startOffs, (int) len);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var vals = new long[PAGE_SIZE - startOffs];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var page = pages[pageStart];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:            final var oldValues = page.get(startOffs, vals.length);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        for (var i = pageStart + 1; i < pageEnd; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var vals = new long[PAGE_SIZE];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        for (var i = pageStart + 1; i < pageEnd; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var page = pages[i];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:            final var oldValues = page.get(0, PAGE_SIZE);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var page = pages[pageEnd];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var vals = new long[endOffs + 1];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:            final var oldValues = page.get(0, endOffs + 1);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var found = false;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var found = false;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    for (final var page : pages) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        for (var j = page.getLength() - 1; j >= 0; j--) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var page = (int) (addr >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var pageStart = (int) (start >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var startOffs = (int) (start & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var pageEnd = (int) ((start + values.length - 1) >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var endOffs = (int) ((start + values.length - 1) & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var page = pages[pageStart];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var oldValues = page.get(startOffs, values.length);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var vals = new long[PAGE_SIZE - startOffs];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var page = pages[pageStart];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var oldValues = page.get(startOffs, vals.length);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      var vals = new long[PAGE_SIZE];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = pageStart + 1; i < pageEnd; i++, offs += PAGE_SIZE) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        var page = pages[i];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          var allZeroes = true;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          for (var j = 0; j < PAGE_SIZE; j++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:            final var oldValues = page.get(0, PAGE_SIZE);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var page = pages[pageEnd];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var oldValues = page.get(0, endOffs + 1);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var dp = (int) (start >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var di = (int) (start & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var sp = (int) (offs >>> PAGE_SIZE_BITS);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    var si = (int) (offs & PAGE_MASK);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      var dstPage = pages[dp];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var srcPage = src.pages[sp];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var n = Math.min(count, Math.min(PAGE_SIZE - si, PAGE_SIZE - di));
src/main/java/com/cburch/logisim/std/memory/MemContents.java:        final var vals = srcPage.get(si, n);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:    final var oldPages = pages;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var n = Math.min(oldPages.length, pages.length);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          final var m = Math.min(oldPages[i].getLength(), pageLength);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:          for (var j = 0; j < m; j++) {
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var pageLength = (addrBits < PAGE_SIZE_BITS) ? 1 << addrBits : PAGE_SIZE;
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < pages.length; i++)
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      final var ret = new long[len];
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < ret.length; i++) ret[i] = get(start + i);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < val.length; i++) set(start + i, val[i]);
src/main/java/com/cburch/logisim/std/memory/MemContents.java:      for (var i = 0; i < values.length; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var generator = new Random();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        for (var i = 0; i < size; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var ret = (BytePage) super.clone();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var n = Math.min(values.length, data.length - (int) start);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var oldValue = data[(int) addr];
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var generator = new Random();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        for (var i = 0; i < size; i++) data[i] = (int) (generator.nextInt() & mask);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var ret = (IntPage) super.clone();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var n = Math.min(values.length, data.length - (int) start);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var generator = new Random();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        for (var i = 0; i < size; i++) data[i] = (short) (generator.nextInt(1 << 16) & mask);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var ret = (ShortPage) super.clone();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var n = Math.min(values.length, data.length - (int) start);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      for (var i = (int) start; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var oldValue = data[(int) addr];
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var generator = new Random();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        for (var i = 0; i < size; i++) data[i] = (int) generator.nextLong() & mask;
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var ret = (LongPage) super.clone();
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      final var n = Math.min(values.length, data.length - (int) start);
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/memory/MemContentsSub.java:        final var oldValue = data[(int) addr];
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    var enabled = circState != null;
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var ret = new JMenuItem(label);
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var s = factory.getState(instance, circState);
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var isAllZero = s.getContents().isClear();
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var frame = factory.getHexFrame(proj, instance, circState);
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var m = factory.getState(instance, circState).getContents();
src/main/java/com/cburch/logisim/std/memory/MemMenu.java:    final var m = factory.getState(instance, circState).getContents();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) painter.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var c = e.getKeyChar();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var val = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var bds = getBounds(painter);
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:        final var proj = state.getProject();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) painter.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var inBounds = painter.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var c = e.getKeyChar();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var val = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var bds = getBounds(painter);
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:      final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:    final var bds = state.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/memory/MemPoker.java:    final var data = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var addrBits = getAddrBits();
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var dataBits = contents.getWidth();
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var fm = g.getFontMetrics(font);
src/main/java/com/cburch/logisim/std/memory/MemState.java:    var totalShowableEntries = nrDataSymbolsEachLine * NrOfLines;
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var totalNrOfEntries = (1 << addrBits);
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var totalWidth = addrBlockSize + dataBlockSize;
src/main/java/com/cburch/logisim/std/memory/MemState.java:    var curAddr = (int) curScroll;
src/main/java/com/cburch/logisim/std/memory/MemState.java:    for (var row = 0; row < NrOfLines; row++) {
src/main/java/com/cburch/logisim/std/memory/MemState.java:      for (var column = 0; column < nrDataSymbolsEachLine; column++) {
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var blockHeight = NrOfLines * (CharHeight + 2);
src/main/java/com/cburch/logisim/std/memory/MemState.java:    final var totalNrOfEntries = (1 << getAddrBits());
src/main/java/com/cburch/logisim/std/memory/MemState.java:    for (var i = 0; i < NrOfLines; i++) {
src/main/java/com/cburch/logisim/std/memory/MemState.java:      for (var j = 0; j < nrDataSymbolsEachLine; j++) {
src/main/java/com/cburch/logisim/std/memory/MemState.java:            final var dataBounds = getDataBound(leftX, topY, i, j);
src/main/java/com/cburch/logisim/std/memory/Ram.java:      var label = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/Ram.java:        final var disp = S.get("ramComponent");
src/main/java/com/cburch/logisim/std/memory/Ram.java:        final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/memory/Ram.java:      var addrBits = state.getAttributeValue(ADDR_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/Ram.java:        var ret = logOptions[addrBits];
src/main/java/com/cburch/logisim/std/memory/Ram.java:          for (var i = 0; i < ret.length; i++) {
src/main/java/com/cburch/logisim/std/memory/Ram.java:        final var memState = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var label = CorrectLabel.getCorrectLabel(attrs.getValue(StdAttr.LABEL));
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var contents =
src/main/java/com/cburch/logisim/std/memory/Ram.java:      var ret = windowRegistry.get(value);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var contents = state.getContents();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var ret = (RamState) instance.getData(circState);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var ret = (RamState) instance.getData(state);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var contents = ret.getContents();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    var ret = (RamState) state.getData();
src/main/java/com/cburch/logisim/std/memory/Ram.java:      final var instance = state.getInstance();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var attrs = state.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var myState = (RamState) getState(state);
src/main/java/com/cburch/logisim/std/memory/Ram.java:      final var clearValue = state.getPortValue(RamAppearance.getClrIndex(0, attrs));
src/main/java/com/cburch/logisim/std/memory/Ram.java:        final var dataBits = state.getAttributeValue(DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/Ram.java:        for (var i = 0; i < RamAppearance.getNrDataOutPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/Ram.java:          final var portVal = isSeparate(attrs)
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var addrValue = state.getPortValue(RamAppearance.getAddrIndex(0, attrs));
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var goodAddr = addrValue.isFullyDefined() && addr >= 0;
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var attrs = state.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var myState = (RamState) getState(state);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var separate = isSeparate(attrs);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var dataLines = Math.max(1, RamAppearance.getNrLEPorts(attrs));
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var misaligned = addr % dataLines != 0;
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var misalignError = misaligned && !state.getAttributeValue(ALLOW_MISALIGNED);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var triggered = myState.setClock(state.getPortValue(RamAppearance.getClkIndex(0, attrs)), trigger);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var writeEnabled = triggered && (state.getPortValue(RamAppearance.getWEIndex(0, attrs)) == Value.TRUE);
src/main/java/com/cburch/logisim/std/memory/Ram.java:      for (var i = 0; i < dataLines; i++) {
src/main/java/com/cburch/logisim/std/memory/Ram.java:          final var le = state.getPortValue(RamAppearance.getLEIndex(i, attrs));
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var width = state.getAttributeValue(DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var outputEnabled = separate || !state.getPortValue(RamAppearance.getOEIndex(0, attrs)).equals(Value.FALSE);
src/main/java/com/cburch/logisim/std/memory/Ram.java:      for (var i = 0; i < dataLines; i++) {
src/main/java/com/cburch/logisim/std/memory/Ram.java:      for (var i = 0; i < dataLines; i++)
src/main/java/com/cburch/logisim/std/memory/Ram.java:      for (var i = 0; i < dataLines; i++)
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var attrs = state.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var myState = (RamState) getState(state);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var separate = isSeparate(attrs);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var weValue = state.getPortValue(RamAppearance.getWEIndex(0, attrs));
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var async = trigger.equals(StdAttr.TRIG_HIGH) || trigger.equals(StdAttr.TRIG_LOW);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var edge =
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var weAsync =
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var weTriggered = (async && weAsync) || (edge && weValue.equals(Value.TRUE));
src/main/java/com/cburch/logisim/std/memory/Ram.java:        for (var i = 0; i < RamAppearance.getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var dataBits = state.getAttributeValue(DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var outputNotEnabled = state.getPortValue(RamAppearance.getOEIndex(0, attrs)).equals(Value.FALSE);
src/main/java/com/cburch/logisim/std/memory/Ram.java:    final var asyncRead = async || attrs.getValue(Mem.ASYNC_READ);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var async = !synchronous(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var nrBits = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var attrs = instance.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var ps = new Port[getNrOfPorts(attrs)];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrAddrPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrDataInPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrDataOutPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrOEPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrWEPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClkPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrLEPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrBEPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClrPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var attrs = painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var inst = painter.getInstance();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var Label = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var type = inst.getFactory() instanceof Ram ? "RAM " : "ROM ";  // FIXME: hardcoded string
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var attrs = painter.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var inst = painter.getInstance();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var Label = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var type = inst.getFactory() instanceof Ram ? "RAM " : "ROM ";  // FIXME hardcoded string
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var state = (MemState) inst.getData(painter.getCircuitState());
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var result = 60;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var async = !synchronous(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, 10, Port.INPUT, attrs.getValue(Mem.ADDR_ATTR));
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrDins = getNrDataInPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = getControlHeight(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var classic = classicAppearance(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var bits = attrs.getValue(Mem.DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, bits);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrDouts = getNrDataOutPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = getControlHeight(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var xpos = Mem.SymbolWidth + 40;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var portType = Port.OUTPUT;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var classic = classicAppearance(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var bits = attrs.getValue(Mem.DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(xpos, ypos, portType, bits);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrOEs = getNrOEPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = 60;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrWEs = getNrWEPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = 50;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrClks = getNrClkPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = 70;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrLEs = getNrLEPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var ypos = 70;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrBEs = getNrBEPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var ypos = 70 + (nrBEs - portIndex - 1) * 10;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(0, ypos, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var result = new Port(40, 0, Port.INPUT, 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var g = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrOfBits = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrOfDataPorts = Math.max(getNrDataInPorts(attrs), getNrDataOutPorts(attrs));
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrDataInPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getDataInIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var x = loc.getX();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var y = loc.getY();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var xpos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var ypos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var xpos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var ypos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            for (var j = 0; j < nrOfBits; j++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrDataOutPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var seperate = seperatedBus(attrs) || !attrs.containsAttribute(RamAttributes.ATTR_DBUS);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var x = loc.getX();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var y = loc.getY();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var xpos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var ypos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var xpos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            final var ypos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:            for (var j = 0; j < nrOfBits; j++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrAddrPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var xpos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var ypos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        for (var j = 0; j < 3; j++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrOEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getOEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrWEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getWEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClkPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getClkIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        var xend = 20;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrLEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getLEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClrPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getClrIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var g = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var xpos = new int[8];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var ypos = new int[8];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var x = painter.getBounds().getX();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var y = painter.getBounds().getY();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrAddrPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getAddrIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var cidx = 1;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClkPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getClkIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var label = synchronous(attrs) ? "C" + cidx : "E" + cidx;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrOEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getOEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var label = "M" + cidx + " [Output enable]";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrWEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getWEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var label = "M" + cidx + " [Write enable]";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrLEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getLEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var label = "M" + cidx + " [Line enable " + i + "]";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var idx = getBEIndex(i, attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var loc = inst.getPortLocation(idx);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      final var label = "M" + cidx + " [Byte enable " + i + "]";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var g = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var x = painter.getBounds().getX() + 20;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var y = painter.getBounds().getY() + getControlHeight(attrs);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var width = Mem.SymbolWidth;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var height = 20;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var nrOfBits = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var doutLabel = new StringBuilder();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var dinLabel = new StringBuilder();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    var cidx = 1;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var async = !synchronous(attrs) || (attrs.containsAttribute(Mem.ASYNC_READ) && attrs.getValue(Mem.ASYNC_READ));
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var drawDin = attrs.containsAttribute(RamAttributes.ATTR_DBUS);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var seperate = seperatedBus(attrs) || !drawDin;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrClkPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrOEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrWEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < getNrLEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var appendBE = getNrBEPorts(attrs) > 0;
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var DLabel = seperate ? "" : "D";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    for (var i = 0; i < nrOfBits; i++) {
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var xpos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var ypos = new int[3];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:      var BEIndex = "";
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:        final var beIdx = cidx + (i >> 3);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var xpos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var ypos = new int[4];
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var size = Long.toString((1 << nrAddressBits) - 1);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var fm = g.getFontMetrics(font);
src/main/java/com/cburch/logisim/std/memory/RamAppearance.java:    final var StrSize = fm.stringWidth(size);
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:    final var newList = new ArrayList<Attribute<?>>();
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:    var changes = false;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:    final var d = (RamAttributes) dest;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newAddr = (BitWidth) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newData = (BitWidth) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newLabel = (String) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newTrigger = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newStyle = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newFont = (Font) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var newVis = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      var newBE = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var val = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RamAttributes.java:      final var option = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var be = attrs.getValue(RamAttributes.ATTR_ByteEnables);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var byteEnables = be != null && be.equals(RamAttributes.BUS_WITH_BYTEENABLES);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var byteEnableOffset = RamAppearance.getBEIndex(0, attrs);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var nrBePorts = RamAppearance.getNrBEPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var nrOfaddressLines = attrs.getValue(Mem.ADDR_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var trigger = attrs.getValue(StdAttr.TRIGGER);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var async = StdAttr.TRIG_HIGH.equals(trigger) || StdAttr.TRIG_LOW.equals(trigger);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var ramEntries = (1 << nrOfaddressLines);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var truncated = (nrOfBits % 8) != 0;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:      for (var idx = 0; idx < nrBePorts; idx++) {
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:      var nrOfMems = nrBePorts;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:      for (var mem = 0; mem < nrOfMems; mem++)
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var be = attrs.getValue(RamAttributes.ATTR_ByteEnables);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var byteEnables = be != null && be.equals(RamAttributes.BUS_WITH_BYTEENABLES);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:        for (var i = 0; i < RamAppearance.getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:        for (var i = 0; i < RamAppearance.getNrBEPorts(attrs); i++)
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:        final var truncated = (attrs.getValue(Mem.DATA_ATTR).getWidth() % 8) != 0;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:        for (var i = 0; i < RamAppearance.getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:          final var startIndex = i * 8;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:          final var endIndex =
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:          final var memName =
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:        for (var i = 0; i < RamAppearance.getNrBEPorts(attrs); i++) {
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:          final var startIndex = i * 8;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:          final var endIndex =
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var separate = busVal != null && busVal.equals(RamAttributes.BUS_SEP);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var asynch = trigger == null || trigger.equals(StdAttr.TRIG_HIGH) || trigger.equals(StdAttr.TRIG_LOW);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var byteEnabled = RamAppearance.getNrLEPorts(attrs) == 0;
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var syncRead = !attrs.containsAttribute(Mem.ASYNC_READ) || !attrs.getValue(Mem.ASYNC_READ);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var clearPin = attrs.getValue(RamAttributes.CLEAR_PIN) == null ? false : attrs.getValue(RamAttributes.CLEAR_PIN);
src/main/java/com/cburch/logisim/std/memory/RamHdlGeneratorFactory.java:    final var readAfterWrite = !attrs.containsAttribute(Mem.READ_ATTR) || attrs.getValue(Mem.READ_ATTR).equals(Mem.READAFTERWRITE);
src/main/java/com/cburch/logisim/std/memory/Random.java:      final var ret = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/Random.java:      var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Random.java:      final var data = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var ps = new Port[4];
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var Name = "RNG" + nrOfBits;
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Random.java:      final var str = StringUtil.toHexString(nrOfBits, value);
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var state = (StateData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Random.java:      final var str = StringUtil.toHexString(width, val);
src/main/java/com/cburch/logisim/std/memory/Random.java:        final var split = str.length() - 4;
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var x = bds.getX();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var y = bds.getY();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var state = (StateData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var val = state == null ? 0 : state.value;
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Random.java:    var data = (StateData) state.getData();
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Random.java:    final var triggered = data.updateClock(state.getPortValue(CK), triggerType);
src/main/java/com/cburch/logisim/std/memory/RandomHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>(super.getPortMap(Nets, MapInfo));
src/main/java/com/cburch/logisim/std/memory/RandomHdlGeneratorFactory.java:      final var nrOfBits = comp.getComponent().getAttributeSet().getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/memory/RandomHdlGeneratorFactory.java:        final var outMap = map.get("q");
src/main/java/com/cburch/logisim/std/memory/RandomHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var dq_widtdqWidth = (nrOfBits == 1) ? 2 : 5;
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var len = (nrOfBits + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var wid = 8 * len + 2;
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var xoff = (60 - wid) / 2;
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/Register.java:      var str = "";
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var str = StringUtil.toHexString(width, val);
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var ps = new Port[5];
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var CompleteName = new StringBuilder();
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var state = (RegisterData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var widthVal = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var width = widthVal == null ? 8 : widthVal.getWidth();
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var IsLatch = Trigger.equals(StdAttr.TRIG_HIGH) || Trigger.equals(StdAttr.TRIG_LOW);
src/main/java/com/cburch/logisim/std/memory/Register.java:      final var NegActive =
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/Register.java:    var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/Register.java:    final var triggered = data.updateClock(state.getPortValue(CK), triggerType);
src/main/java/com/cburch/logisim/std/memory/RegisterHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>(super.getPortMap(Nets, MapInfo));
src/main/java/com/cburch/logisim/std/memory/RegisterHdlGeneratorFactory.java:      final var nrOfBits = comp.getComponent().getAttributeSet().getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/memory/RegisterHdlGeneratorFactory.java:        final var inMap = map.get("d");
src/main/java/com/cburch/logisim/std/memory/RegisterHdlGeneratorFactory.java:        final var outMap = map.get("q");
src/main/java/com/cburch/logisim/std/memory/RegisterHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/memory/RegisterLogger.java:    final var ret = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/RegisterLogger.java:    var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterLogger.java:    final var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var val = Character.digit(e.getKeyChar(), 16);
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:      final var maxVal = dataWidth.getMask();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:        final var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:        final var data = (RegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var dataWidth = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var width = dataWidth == null ? 8 : dataWidth.getWidth();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var len = (width + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/RegisterPoker.java:    final var wid = 8 * len + 2;
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:    final var widthVal = path.leaf().getAttributeSet().getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:    final var zeros = StringUtil.toHexString(width, 0);
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:      final var widthVal = path.leaf().getAttributeSet().getValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:      final var width = (widthVal == null ? 8 : widthVal.getWidth());
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:      final var data = (RegisterData) getData(state);
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:      final var val = data == null ? 0 : data.value.toLongValue();
src/main/java/com/cburch/logisim/std/memory/RegisterShape.java:    final var font = label.getFont();
src/main/java/com/cburch/logisim/std/memory/Rom.java:        final var proj = frame.getProject();
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var ret = new ContentsCell(source, value);
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var lineBreak = value.indexOf('\n');
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var first = lineBreak < 0 ? value : value.substring(0, lineBreak);
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var rest = lineBreak < 0 ? "" : value.substring(lineBreak + 1);
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var toks = new StringTokenizer(first);
src/main/java/com/cburch/logisim/std/memory/Rom.java:        final var header = toks.nextToken();
src/main/java/com/cburch/logisim/std/memory/Rom.java:        final var addr = Integer.parseInt(toks.nextToken());
src/main/java/com/cburch/logisim/std/memory/Rom.java:        final var data = Integer.parseInt(toks.nextToken());
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var addr = state.getLogLength();
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var data = state.getWidth();
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var contents = HexFile.saveToString(state);
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var proj = (source instanceof Frame frame) ? frame.getProject() : null;
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var frame = RomAttributes.getHexFrame(contents, proj, null);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var contents = getMemContents(instance);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var listener = new MemListener(instance);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var inst = ((InstanceComponent) c).getInstance();
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var len = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/Rom.java:    var ret = (MemState) instance.getData(state);
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var contents = getMemContents(instance);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    var ret = (MemState) state.getData();
src/main/java/com/cburch/logisim/std/memory/Rom.java:      final var contents = getMemContents(state.getInstance());
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var myState = getState(state);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var dataBits = state.getAttributeValue(DATA_ATTR);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var attrs = state.getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var addrValue = state.getPortValue(RamAppearance.getAddrIndex(0, attrs));
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var nrDataLines = RamAppearance.getNrDataOutPorts(attrs);
src/main/java/com/cburch/logisim/std/memory/Rom.java:    final var addr = addrValue.toLongValue();
src/main/java/com/cburch/logisim/std/memory/Rom.java:      for (var i = 0; i < nrDataLines; i++)
src/main/java/com/cburch/logisim/std/memory/Rom.java:      for (var i = 0; i < nrDataLines; i++)
src/main/java/com/cburch/logisim/std/memory/Rom.java:    for (var i = 0; i < nrDataLines; i++) {
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:    final var l = new RomContentsListener(proj);
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newAddr = (BitWidth) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newData = (BitWidth) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var val = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var val = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newContents = (MemContents) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newLabel = (String) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newFont = (Font) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newVis = (Boolean) value;
src/main/java/com/cburch/logisim/std/memory/RomAttributes.java:      final var newAppearance = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:        final var oEnd = o.start + o.newValues.length;
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:        final var end = start + newValues.length;
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:          final var nStart = Math.min(start, o.start);
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:          final var nEnd = Math.max(end, oEnd);
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:          final var nOld = new long[(int) (nEnd - nStart)];
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:          final var nNew = new long[(int) (nEnd - nStart)];
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:        final var oEnd = o.start + o.newValues.length;
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:        final var end = start + newValues.length;
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:      final var newValues = new long[oldValues.length];
src/main/java/com/cburch/logisim/std/memory/RomContentsListener.java:      for (var i = 0; i < newValues.length; i++) {
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:    final var addressWidth = attrs.getValue(Mem.ADDR_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:    final var dataWidth = attrs.getValue(Mem.DATA_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:    final var romContents = attrs.getValue(Rom.CONTENTS_ATTR);
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:    final var generator =
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:    for (var addr = 0L; addr < (1L << addressWidth); addr++) {
src/main/java/com/cburch/logisim/std/memory/RomHdlGeneratorFactory.java:      final var romValue = romContents.get(addr);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var widthObj = instance.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var width = widthObj.getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var parallelObj = instance.getAttributeValue(ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lenObj = instance.getAttributeValue(ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var len = lenObj == null ? 8 : lenObj;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var blockwidth = symbolWidth;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var Identifier = "SRG" + nr_of_stages;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var cntrl = "1\u2192/C3";
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    var realYpos = ypos + 70 + currentStage * 20;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var realXpos = xpos + 10;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var dataWidth = (nrOfBits == 1) ? 2 : 5;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lineFix = (nrOfBits == 1) ? 1 : 2;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lastBlock = (currentStage == (nrOfStages - 1));
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var blockWidth = symbolWidth;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var yoff = (currentStage == 0) ? 10 : 0;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var len = (nrOfBits + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var boxXpos = ((blockWidth - 30) / 2 + 30) - (len * 4);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var width = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lenObj = state.getAttributeValue(ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var length = lenObj == null ? 8 : lenObj;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var comp = instance.getComponent().getInstanceStateImpl();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var circuitState = comp.getCircuitState();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var state = circuitState.getInstanceState(instance);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lenObj = state.getAttributeValue(ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var xpos = painter.getLocation().getX();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var ypos = painter.getLocation().getY();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var wid = painter.getAttributeValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var lenObj = painter.getAttributeValue(ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var len = lenObj == null ? 8 : lenObj;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var parallelObj = painter.getAttributeValue(ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var negEdge =
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var data = (ShiftRegisterData) painter.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      for (var stage = 0; stage < len; stage++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      for (var stage = 0; stage < len; stage++)
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var widObj = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var wid = widObj.getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var lenObj = painter.getAttributeValue(ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      final var len = lenObj == null ? 8 : lenObj;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          final var data = getData(painter);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          var x = bds.getX() + 20;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          var y = bds.getY();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:              final var s = data.get(len - 1 - i).toHexString();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        final var x = bds.getX() + bds.getWidth() / 2;
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        final var y = bds.getY();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        final var h = bds.getHeight();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:          final var a = S.get("shiftRegisterLabel1");
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:        var b = S.get("shiftRegisterLabel2", "" + len, "" + wid);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var ports = painter.getInstance().getPorts().size();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    for (var i = 0; i < ports; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var parallel = state.getAttributeValue(ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var len = data.getLength();
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:    final var triggered = data.updateClock(state.getPortValue(CK), triggerType);
src/main/java/com/cburch/logisim/std/memory/ShiftRegister.java:      for (var i = 0; i < len - 1; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var ret = (ShiftRegisterData) super.clone();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    var i = vsPos + index;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var v = vs;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var pos = vsPos;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    var i = vsPos + index;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var v = vs;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    var v = vs;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var oldWidth = width;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var oldW = oldWidth.getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:    final var newW = newWidth.getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:      final var newV = new Value[newLength];
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:      var j = vsPos;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:      final var copy = Math.min(newLength, v.length);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:      for (var i = 0; i < copy; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:      for (var i = 0; i < v.length; i++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterData.java:        final var vi = v[i];
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:    final var hasParallelLoad = attrs.getValue(ShiftRegister.ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>(super.getPortMap(nets, mapInfo));
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:      final var attrs = comp.getComponent().getAttributeSet();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:      final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:      final var nrOfStages = attrs.getValue(ShiftRegister.ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:      final var hasParallelLoad = attrs.getValue(ShiftRegister.ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:      final var vector = new StringBuilder();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:        final var shiftMap = map.get("shiftIn");
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:        final var outMap = map.get("shiftOut");
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var stage = 0; stage < nrOfStages; stage++)
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            final var nrOfOutStages = attrs.getValue(StdAttr.APPEARANCE) == StdAttr.APPEAR_CLASSIC
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var stage = 0; stage < nrOfOutStages; stage++)
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var stage = nrOfStages - 1; stage >= 0; stage--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var stage = nrOfStages - 2; stage >= 0; stage--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:              for (var stage = 0; stage < nrOfStages; stage++) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:                final var index = (bit * nrOfStages) + stage;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:                final var id = 6 + (2 * stage);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var bit = nrOfBits - 1; bit >= 0; bit--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:              for (var stage = nrOfStages - 1; stage >= 0; stage--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:            for (var bit = nrOfBits - 1; bit >= 0; bit--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:              for (var stage = nrOfStages - 2; stage >= 0; stage--) {
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterHdlGeneratorFactory.java:          genvar n;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterLogger.java:    var inName = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterLogger.java:    final var stages = state.getAttributeValue(ShiftRegister.ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterLogger.java:    final var ret = new Object[stages];
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterLogger.java:    var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterLogger.java:    final var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var widObj = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var bds = state.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var lenObj = state.getAttributeValue(ShiftRegister.ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var loadObj = state.getAttributeValue(ShiftRegister.ATTR_LOAD);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      var y = bds.getY();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var label = state.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var x = e.getX() - (bds.getX() + 15);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var len = (widObj.getWidth() + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var boxXpos = ((ShiftRegister.symbolWidth - 30) / 2 + 30) - (len * 4);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var boxXend = boxXpos + 2 + len * 8;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var y = e.getY() - bds.getY() - 80;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var x = e.getX() - bds.getX() - 10;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var loc = this.loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var c = e.getKeyChar();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var lenObj = state.getAttributeValue(ShiftRegister.ATTR_LENGTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var val = Integer.parseInt("" + e.getKeyChar(), 16);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var widObj = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var i = data.getLength() - 1 - loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        var value = data.get(i).toLongValue();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var valObj = Value.createKnown(widObj, value);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var loc = this.loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    var dataWidth = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var i = data.getLength() - 1 - loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    var curValue = data.get(i).toLongValue();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var maxVal = dataWidth.getMask();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var oldLoc = loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var widObj = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var newLoc = computeStage(state, e);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        final var i = data.getLength() - 1 - loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:        var v = data.get(i);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var loc = this.loc;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var widObj = painter.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:    final var bds = painter.getInstance().getBounds();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var x = bds.getX() + 15 + loc * 10;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      var y = bds.getY();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var label = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var len = (widObj.getWidth() + 3) / 4;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var boxXpos = ((ShiftRegister.symbolWidth - 30) / 2 + 30) - (len * 4) + bds.getX() + 10;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var y = bds.getY() + 82 + loc * 20;
src/main/java/com/cburch/logisim/std/memory/ShiftRegisterPoker.java:      final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var base = Bounds.create(-30, -15, 30, 30);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var data = state.getPortValue(1);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var select = state.getPortValue(2);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var groupBits = state.getAttributeValue(GROUP_ATTR);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var selectLoc = instance.getAttributeValue(StdAttr.SELECT_LOC);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var data = instance.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var group = instance.getAttributeValue(GROUP_ATTR);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    var groups = (data.getWidth() + group.getWidth() - 1) / group.getWidth() - 1;
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    var selectBits = 1;
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var select = BitWidth.create(selectBits);
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var maxGroups = (int) Math.pow(2d, select.getWidth());
src/main/java/com/cburch/logisim/std/plexers/BitSelector.java:    final var ps = new Port[3];
src/main/java/com/cburch/logisim/std/plexers/BitSelectorHdlGeneratorFactory.java:    final var contents =
src/main/java/com/cburch/logisim/std/plexers/BitSelectorHdlGeneratorFactory.java:    final var outputBits = attrs.getValue(BitSelector.GROUP_ATTR).getWidth();
src/main/java/com/cburch/logisim/std/plexers/BitSelectorHdlGeneratorFactory.java:        for (var i = 15; i > 0; i--) {
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var selectLoc = attrs.getValue(StdAttr.SELECT_LOC);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var select = attrs.getValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    var reversed = facing == Direction.WEST || facing == Direction.NORTH;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var vertical = facing == Direction.NORTH || facing == Direction.SOUTH;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var dx = vertical ? selMult : 0;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var dy = vertical ? 0 : -selMult;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:      final var pt = painter.getInstance().getPortLocation(outputs);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:      final var en = painter.getInstance().getPortLocation(outputs + 1);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var data = BitWidth.ONE;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var select = state.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var threeState = state.getAttributeValue(PlexersLibrary.ATTR_TRISTATE);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var enable = state.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    var outIndex = -1; // the special output
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var en = enable ? state.getPortValue(outputs + 1) : Value.TRUE;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:      final var base = opt == PlexersLibrary.DISABLED_ZERO ? Value.FALSE : Value.UNKNOWN;
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:      final var sel = state.getPortValue(outputs);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var select = instance.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var enable = instance.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var ps = new Port[outputs + (enable ? 2 : 1)];
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:      for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    final var en = Location.create(0, 0, true).translate(facing, -10);
src/main/java/com/cburch/logisim/std/plexers/Decoder.java:    for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    final var nrOfselectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    final var selectInputIndex = (1 << nrOfselectBits);
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    for (var outp = 0; outp < selectInputIndex; outp++) {
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    final var nrOfselectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    final var numOutputs = (1 << nrOfselectBits);
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    var space = " ";
src/main/java/com/cburch/logisim/std/plexers/DecoderHdlGeneratorFactory.java:    for (var i = 0; i < numOutputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var facing = attrs.getValue(StdAttr.FACING).reverse();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var select = attrs.getValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var bds =
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var enable = painter.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var vertical = facing == Direction.NORTH || facing == Direction.SOUTH;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var selMult = selectLoc == StdAttr.SELECT_BOTTOM_LEFT ? 1 : -1;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var dx = vertical ? selMult : 0;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var dy = vertical ? 0 : -selMult;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      final var sel = painter.getInstance().getPortLocation(outputs);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      final var en = painter.getInstance().getPortLocation(outputs + 1);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      final var sel = state.getPortValue(outputs);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var facing = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var data = instance.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var select = instance.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var enable = instance.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    var outputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var ps = new Port[outputs + (enable ? 3 : 2)];
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      var ddx = 10;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      var dy = dx;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      var ddy = 10;
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:      for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    final var en = sel.translate(facing, -10);
src/main/java/com/cburch/logisim/std/plexers/Demultiplexer.java:    for (var i = 0; i < outputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var nrOfSelectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth() == 1 ? 1 : NR_OF_BITS_ID;
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var selectInputIndex = (1 << nrOfSelectBits);
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var hasenable = attrs.getValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    for (var outp = 0; outp < selectInputIndex; outp++) {
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    var space = "  ";
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    final var nrOfSelectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    var numOutputs = (1 << nrOfSelectBits);
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:    for (var i = 0; i < numOutputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/DemultiplexerHdlGeneratorFactory.java:      final var binValue = Hdl.getConstantVector(i, nrOfSelectBits);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var locDelta = Math.max(bds.getHeight(), bds.getWidth()) <= 50 ? 8 : 6;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var completeName = new StringBuilder();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var wide = size == PlexersLibrary.SIZE_WIDE;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var select = attrs.getValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var inputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var w = (wide ? 30 : 20);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var w = (wide ? 40 : 20);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var lengthAdjust = (wide ? 0 : -5);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      var offs = -(inputs / 2) * 10 - 10;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var length = inputs * 10 + 20 + lengthAdjust;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var lean =
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var wide = size == PlexersLibrary.SIZE_WIDE;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var select = painter.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var enable = painter.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var vertical = facing != Direction.NORTH && facing != Direction.SOUTH;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var selMult = selectLoc == StdAttr.SELECT_BOTTOM_LEFT ? 1 : -1;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var oddside = (vertical == (selMult < 0));
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var pt = painter.getInstance().getPortLocation(inputs);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var len = (wide ? 2 : 1);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var en = painter.getInstance().getPortLocation(inputs + 1);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var len = (inputs == 2) ? 3 : wide ? 2 : oddside ? 4 : 2;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var lean =
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var data = state.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var select = state.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var enable = state.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var inputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var en = enable ? state.getPortValue(inputs + 1) : Value.TRUE;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var base = opt == PlexersLibrary.DISABLED_ZERO ? Value.FALSE : Value.UNKNOWN;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      final var sel = state.getPortValue(inputs);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var wide = size == PlexersLibrary.SIZE_WIDE;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var dir = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var vertical = dir != Direction.NORTH && dir != Direction.SOUTH;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var selectLoc = instance.getAttributeValue(StdAttr.SELECT_LOC);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var botLeft = selectLoc == StdAttr.SELECT_BOTTOM_LEFT;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var selMult = botLeft ? 1 : -1;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var data = instance.getAttributeValue(StdAttr.WIDTH);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var select = instance.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var enable = instance.getAttributeValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var inputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var ps = new Port[inputs + (enable ? 3 : 2)];
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      var dx = -(inputs / 2) * 10;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      var ddx = 10;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      var dy = -(inputs / 2) * 10;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      var ddy = 10;
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:      for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    final var en = sel.translate(dir, 10);
src/main/java/com/cburch/logisim/std/plexers/Multiplexer.java:    for (var i = 0; i < inputs; i++) {
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var nrOfSelectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var selectInputIndex = (1 << nrOfSelectBits);
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var hasenable = attrs.getValue(PlexersLibrary.ATTR_ENABLE);
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    for (var inp = 0; inp < selectInputIndex; inp++)
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var nrOfSelectBits = attrs.getValue(PlexersLibrary.ATTR_SELECT).getWidth();
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:    final var nrOfBits = attrs.getValue(StdAttr.WIDTH).getWidth();
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:      for (var i = 0; i < (1 << nrOfSelectBits); i++)
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:      for (var i = 0; i < (1 << nrOfSelectBits) - 1; i++)
src/main/java/com/cburch/logisim/std/plexers/MultiplexerHdlGeneratorFactory.java:      for (var i = 0; i < (1 << nrOfSelectBits) - 1; i++) {
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var select = attrs.getValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var inputs = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var offs = -5 * inputs;
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var len = 10 * inputs + 10;
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var facing = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var select = state.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    var n = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var enabled = state.getPortValue(n + EN_IN) != Value.FALSE;
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var select = instance.getAttributeValue(PlexersLibrary.ATTR_SELECT);
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    var n = 1 << select.getWidth();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    final var ps = new Port[n + 4];
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoder.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoderHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoderHdlGeneratorFactory.java:    final var nrOfBits = comp.nrOfEnds() - 4;
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoderHdlGeneratorFactory.java:    final var vectorList = new StringBuilder();
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoderHdlGeneratorFactory.java:    for (var i = nrOfBits - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/std/plexers/PriorityEncoderHdlGeneratorFactory.java:    final var contents = LineBuffer.getBuffer()
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    var metric = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var x0 = bds.getX() + (bds.getWidth() / 2);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var y0 = bds.getY() + metric.getHeight() + 12;
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var glbLabel = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:    final var tclComponentData = TclComponentData.get(state);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      for (final var p : state.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:        final var index = state.getPortIndex(p);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:        final var val = state.getPortValue(index);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:        final var message = p.getType() + ":" + p.getToolTip() + ":" + val.toBinaryString() + ":" + index;
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      final var parameters = serverResponse.split(":");
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      var busValue = parameters[1];
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      final var portId = Integer.parseInt(parameters[2]);
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      final var width = state.getFactory().getPorts().get(portId).getFixedBitWidth().getWidth();
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      final var vectorValues = new Value[width];
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      for (var i = width - 1; i >= busValue.length(); i--) {
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      var idx = busValue.length() - 1;
src/main/java/com/cburch/logisim/std/tcl/TclComponent.java:      for (final var bit : busValue.toCharArray()) {
src/main/java/com/cburch/logisim/std/tcl/TclComponentAttributes.java:    final var attr = (TclComponentAttributes) dest;
src/main/java/com/cburch/logisim/std/tcl/TclComponentAttributes.java:      final var newFile = (File) value;
src/main/java/com/cburch/logisim/std/tcl/TclComponentAttributes.java:      final var newLabel = (String) value;
src/main/java/com/cburch/logisim/std/tcl/TclComponentAttributes.java:      final var newFont = (Font) value;
src/main/java/com/cburch/logisim/std/tcl/TclComponentData.java:    var newTick = false;
src/main/java/com/cburch/logisim/std/tcl/TclComponentData.java:    var found = false;
src/main/java/com/cburch/logisim/std/tcl/TclComponentData.java:    for (final var p : instanceState.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/std/tcl/TclComponentData.java:        final var val = instanceState.getPortValue(instanceState.getPortIndex(p));
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:    final var inputs = new Port[inputsDesc.size()];
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:    final var outputs = new Port[outputsDesc.size()];
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:    for (var i = 0; i < inputsDesc.size(); i++) {
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:      final var desc = inputsDesc.get(i);
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:    for (var i = 0; i < outputsDesc.size(); i++) {
src/main/java/com/cburch/logisim/std/tcl/TclConsoleReds.java:      final var desc = outputsDesc.get(i);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:      final var proj =
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:      final var content = VhdlContentComponent.create();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var content = instance.getAttributeValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var listener = new TclGenericListener(instance);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var content = attrs.getValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var nbInputs = content.getInputsNumber();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var nbOutputs = content.getOutputsNumber();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var content = painter.getAttributeValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    var metric = g.getFontMetrics();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var x0 = bds.getX() + (bds.getWidth() / 2);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var y0 = bds.getY() + metric.getHeight() + 12;
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var glbLabel = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:      final var font = g.getFont();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var inputs = content.getInputs();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var outputs = content.getOutputs();
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    for (var i = 0; i < inputs.length; i++)
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    for (var i = 0; i < outputs.length; i++)
src/main/java/com/cburch/logisim/std/tcl/TclGeneric.java:    final var content = instance.getAttributeValue(CONTENT_ATTR);
src/main/java/com/cburch/logisim/std/tcl/TclGenericAttributes.java:      var ret = windowRegistry.get(value);
src/main/java/com/cburch/logisim/std/tcl/TclGenericAttributes.java:    final var attr = (TclGenericAttributes) dest;
src/main/java/com/cburch/logisim/std/tcl/TclGenericAttributes.java:      final var newContent = (VhdlContentComponent) value;
src/main/java/com/cburch/logisim/std/tcl/TclVhdlEntityContent.java:    final var input = VhdlContentComponent.class.getResourceAsStream(RESOURCE);
src/main/java/com/cburch/logisim/std/tcl/TclVhdlEntityContent.java:    final var in = new BufferedReader(new InputStreamReader(input));
src/main/java/com/cburch/logisim/std/tcl/TclVhdlEntityContent.java:    final var tmp = new StringBuilder();
src/main/java/com/cburch/logisim/std/tcl/TclWrapper.java:    final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/tcl/TclWrapper.java:              final var reader =
src/main/java/com/cburch/logisim/std/tcl/TclWrapper.java:                final var errorMessage = new StringBuilder();
src/main/java/com/cburch/logisim/std/tcl/TclWrapper.java:                final var userInfoBox =
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:    final var nrOfGates = (isInverter) ? 6 : 4;
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:    for (var gate = 0; gate < nrOfGates; gate++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:      var inindex1 = (gate < 2) ? gate * 3 : gate * 3 + 1;
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:      final var inindex2 = inindex1 + 1;
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:      var outindex = (gate < 2) ? gate * 3 + 2 : gate * 3;
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:    final var contents = LineBuffer.getBuffer();
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:    final var nrOfGates = isInverter ? 6 : 4;
src/main/java/com/cburch/logisim/std/ttl/AbstractGateHdlGenerator.java:    for (var i = 0; i < nrOfGates; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalBuffers.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var dx = p.x - (95 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var dy = p.y - 40;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var dx = p.x - (95 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var dy = p.y - 40;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:        final var values = myState.getValue().getAll();
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    final var dincr = new int[] {20, 60, 20, 0};
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var dpos1 = 50;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var dpos2 = 150;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    final var qincr = new int[] {60, 20, 60, 0};
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var qpos1 = 30;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var qpos2 = 170;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var data = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var changed = false;
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    final var triggered = data.updateClock(state.getPortValue(9));
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    var values = data.getValue().getAll();
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlops.java:    for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/AbstractOctalFlopsHdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    for (final var notUsedPin : notUsedPins) unusedPins.add(notUsedPin);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var x = 0;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var y = 0;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var loc = state.getInstance().getLocation();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var height = state.getInstance().getBounds().getHeight();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var width = state.getInstance().getBounds().getWidth();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = state.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var x = bds.getX();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var y = bds.getY();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var xp = x;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var yp = y;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var width = bds.getWidth();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var height = bds.getHeight();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var dir = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var x = bds.getX();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var y = bds.getY();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      var xp = x;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      var yp = y;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var width = bds.getWidth();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      final var height = bds.getHeight();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var x = bds.getX();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var y = bds.getY();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var width = bds.getWidth();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var height = bds.getHeight();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var NrOfUnusedPins = unusedPins.size();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:      var port = 0;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var bds = instance.getBounds();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var dir = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var dx = 0;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var dy = 0;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var width = bds.getWidth();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var height = bds.getHeight();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var isoutput = false;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var hasvccgnd = instance.getAttributeValue(TtlLibrary.VCC_GND);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    var skip = false;
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var NrOfUnusedPins = unusedPins.size();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var ps =
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var g = (Graphics2D) painter.getGraphics().create();
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var wh1 = AppPreferences.getScaled(3);
src/main/java/com/cburch/logisim/std/ttl/AbstractTtlGate.java:    final var wh2 = AppPreferences.getScaled(2);
src/main/java/com/cburch/logisim/std/ttl/ClockState.java:    final var oldClock = lastClock;
src/main/java/com/cburch/logisim/std/ttl/ClockState.java:    final var oldClock = lastClock;
src/main/java/com/cburch/logisim/std/ttl/ClockState.java:    var values = lastClock.getAll();
src/main/java/com/cburch/logisim/std/ttl/ClockState.java:      final var nvalue = (Value.createKnown(BitWidth.create(which + 1), 0)).getAll();
src/main/java/com/cburch/logisim/std/ttl/ClockState.java:    final var oldClock = values[which];
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var dir = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var len = 80; // lenght
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var offs = -len / 2; // to get y=0 in middle height
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var dir = painter.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var multibit = painter.getAttributeValue(MULTI_BIT);
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var multibit = state.getAttributeValue(MULTI_BIT);
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var dir = instance.getAttributeValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var multibit = instance.getAttributeValue(MULTI_BIT) == Boolean.TRUE;
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:    final var ps = new Port[in + out + 4];
src/main/java/com/cburch/logisim/std/ttl/DisplayDecoder.java:      final var x = dir == Direction.EAST ? -40 : 40;
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:      final var xp = new int[] {x - width / 2, x - width, x - width, x - width / 2};
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:      final var yp = new int[] {y - width / 2, y - width / 2, y + width / 2, y + width / 2};
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var xp = new int[4];
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var yp = new int[4];
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    var xPoints =
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    var yPoints =
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:      final var xp = new int[4];
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:      final var yp = new int[4];
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var offset = rightToLeft ? -4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var xPoints = new int[] {xoutput, xpin, xpin};
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var yPoints =
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var portsPerRow = portNames.length / 2;
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    for (var i = 0; i < 2; i++) {
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:      for (var j = 0; j < portsPerRow; j++) {
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var xPoints = new int[] {xpin, xpin, xinput};
src/main/java/com/cburch/logisim/std/ttl/Drawgates.java:    final var yPoints =
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:    var v = vs;
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:    final var oldWidth = width;
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:    final var oldW = oldWidth.getWidth();
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:    final var newW = newWidth.getWidth();
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:      final var newV = new Value[newLength];
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:      var j = vsPos;
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:      final var copy = Math.min(newLength, v.length);
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:      for (var i = 0; i < copy; i++) {
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:      for (var i = 0; i < v.length; i++) {
src/main/java/com/cburch/logisim/std/ttl/ShiftRegisterData.java:        final var vi = v[i];
src/main/java/com/cburch/logisim/std/ttl/Ttl7400.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7400.java:    final var portwidth = 19;
src/main/java/com/cburch/logisim/std/ttl/Ttl7400.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7400.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7402.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7402.java:    final var portwidth = 18;
src/main/java/com/cburch/logisim/std/ttl/Ttl7402.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7402.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7404.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7404.java:    final var portwidth = 12;
src/main/java/com/cburch/logisim/std/ttl/Ttl7404.java:    final var portheight = 6;
src/main/java/com/cburch/logisim/std/ttl/Ttl7404.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7408.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7408.java:    final var portwidth = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7408.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7408.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    final var LineOffset =
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    final var offset = inverted ? 0 : -4;
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    var xpos = new int[] {x + 49 + offset, x + 50, x + 50};
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    var ypos = new int[] {y + 20, y + 20, y + AbstractTtlGate.PIN_HEIGHT};
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    for (var i = 0; i < 3; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7410.java:    var val =
src/main/java/com/cburch/logisim/std/ttl/Ttl7410HdlGenerator.java:    final var Inv = Inverted ? Hdl.notOperator() : "";
src/main/java/com/cburch/logisim/std/ttl/Ttl7410HdlGenerator.java:    final var Func = andgate ? Hdl.andOperator() : Hdl.orOperator();
src/main/java/com/cburch/logisim/std/ttl/Ttl74125.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74125.java:    final var portwidth = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl74125.java:    final var portheight = 8;
src/main/java/com/cburch/logisim/std/ttl/Ttl74125.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7413.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7413.java:    final var offset = inverted ? 0 : -4;
src/main/java/com/cburch/logisim/std/ttl/Ttl7413.java:    for (var i = 0; i < 5; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7413.java:    var val =
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var label_len_max = 4;
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var names = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    for (final var name : portNames) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:      final var tmp = name.split("\\s+");
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var enabled =
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var A = state.getPortValue(mapPort(inA)) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var B = state.getPortValue(mapPort(inB)) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    final var C = state.getPortValue(mapPort(inC)) == Value.TRUE ? (byte) 4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:    for (var i = 0; i < 8; i++) { // Active LOW
src/main/java/com/cburch/logisim/std/ttl/Ttl74138.java:      final var val = enabled ? (outputPortStates[A + B + C][i] == 0 ? Value.TRUE : Value.FALSE) : Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    final var label_len_max = 4;
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    final var names = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    for (final var name : portNames) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:      final var tmp = name.split("\\s+");
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    final var enabled = state.getPortValue(mapPort(inEn)) == Value.FALSE; // Active LOW
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    final var A = state.getPortValue(mapPort(inA)) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    final var B = state.getPortValue(mapPort(inB)) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:    for (var i = 0; i < 4; i++) { // Active LOW
src/main/java/com/cburch/logisim/std/ttl/Ttl74139.java:      final var val =
src/main/java/com/cburch/logisim/std/ttl/Ttl7413HdlGenerator.java:    final var Inv = inverted ? Hdl.notOperator() : "";
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var maxLabelLength = 4;
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var names = new ArrayList<String>();
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    for (final var name : portNames) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:      final var tmp = name.split("\\s+");
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var strobe = state.getPortValue(mapPort(STROBE)) == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var select = state.getPortValue(mapPort(SELECT)) == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var A = state.getPortValue(mapPort(inA)) == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    final var B = state.getPortValue(mapPort(inB)) == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74157.java:    var Y = strobe ? false : (select ? B : A);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var dx = p.x - (56 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var data = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        var current = data.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var bitValue = 1L << index;
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var gfx = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var value = state.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      final var isSetBitValue = (value & (1 << (3 - i))) != 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    var data = getStateData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var vA = data.getValue().get(0);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var vB = data.getValue().get(1);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var vC = data.getValue().get(2);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var vD = data.getValue().get(3);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    var data = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    var data = getStateData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var triggered = data.updateClock(state.getPortValue(PORT_INDEX_CLK), StdAttr.TRIG_RISING);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    final var nClear = state.getPortValue(PORT_INDEX_nCLR).toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:    var counter = data.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:      final var nLoad = state.getPortValue(PORT_INDEX_nLOAD);
src/main/java/com/cburch/logisim/std/ttl/Ttl74161.java:        final var enpAndEnt =
src/main/java/com/cburch/logisim/std/ttl/Ttl74163.java:    var data = getStateData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74163.java:    final var triggered = data.updateClock(state.getPortValue(PORT_INDEX_CLK), StdAttr.TRIG_RISING);
src/main/java/com/cburch/logisim/std/ttl/Ttl74163.java:    var counter = data.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74163.java:      final var nClear = state.getPortValue(PORT_INDEX_nCLR).toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74163.java:      final var nLoad = state.getPortValue(PORT_INDEX_nLOAD).toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:        final var myState = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:    var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:    final var gfx = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:    for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:    final var data = getData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74164.java:    final var triggered = data.updateClock(state.getPortValue(PORT_INDEX_CLK), StdAttr.TRIG_RISING);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:        final var myState = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:    var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:    for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:    final var data = getData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165.java:    final var triggered = data.updateClock(state.getPortValue(1), StdAttr.TRIG_RISING);
src/main/java/com/cburch/logisim/std/ttl/Ttl74165HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var dx = p.x - (40 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:        final var myState = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:    var data = (ShiftRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:    final var g = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:      for (var i = 0; i < 8; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:    final var data = getData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74166.java:    final var triggered = data.updateClock(state.getPortValue(6), StdAttr.TRIG_RISING);
src/main/java/com/cburch/logisim/std/ttl/Ttl74175.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74175.java:    var data = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74175.java:    var triggered = data.updateClock(state.getPortValue(7));
src/main/java/com/cburch/logisim/std/ttl/Ttl74175HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      var inside = false;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        final var dx = p.x - (56 + i * 10);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        final var dy = p.y - 30;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        final var data = (UpDownCounterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        var current = data.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:        final var bitValue = 1L << index;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var gfx = (Graphics2D) painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    var value = state.getValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      final var bitValue = value.get(3 - i);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var data = getStateData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vA = data.getValue().get(0);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vB = data.getValue().get(1);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vC = data.getValue().get(2);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vD = data.getValue().get(3);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vCar = data.getCarry();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var vBor = data.getBorrow();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    var data = (UpDownCounterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var data = getStateData(state);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    var carry = Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    var borrow = Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    var counter = data.getValue().toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var downPrev = data.getDownPrev();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var upPrev = data.getUpPrev();
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var downCur = state.getPortValue(PORT_INDEX_DOWN);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var upCur = state.getPortValue(PORT_INDEX_UP);
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var downFalling = downPrev == Value.TRUE && downCur == Value.FALSE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var downRising = downPrev == Value.FALSE && downCur == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var upFalling = upPrev == Value.TRUE && upCur == Value.FALSE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var upRising = upPrev == Value.FALSE && upCur == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var downUnchangedHigh = downPrev == Value.TRUE && downCur == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:    final var upUnchangedHigh = upPrev == Value.TRUE && upCur == Value.TRUE;
src/main/java/com/cburch/logisim/std/ttl/Ttl74192.java:      var inputValue = state.getPortValue(PORT_INDEX_A).toLongValue();
src/main/java/com/cburch/logisim/std/ttl/Ttl74245.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74266.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl74266.java:    final var portwidth = 18;
src/main/java/com/cburch/logisim/std/ttl/Ttl74266.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl74266.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var A1 = state.getPortValue(4) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var A2 = state.getPortValue(2) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var A3 = state.getPortValue(12) == Value.TRUE ? (byte) 4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var A4 = state.getPortValue(10) == Value.TRUE ? (byte) 8 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var B1 = state.getPortValue(5) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var B2 = state.getPortValue(1) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var B3 = state.getPortValue(13) == Value.TRUE ? (byte) 4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var B4 = state.getPortValue(9) == Value.TRUE ? (byte) 8 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var CIN = state.getPortValue(6) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var sum = (byte) (A1 + A2 + A3 + A4 + B1 + B2 + B3 + B4 + CIN);
src/main/java/com/cburch/logisim/std/ttl/Ttl74283.java:    final var output = Value.createKnown(BitWidth.create(5), sum);
src/main/java/com/cburch/logisim/std/ttl/Ttl74283HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/ttl/Ttl7430.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7430.java:    var val1 =
src/main/java/com/cburch/logisim/std/ttl/Ttl7432.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7432.java:    final var portwidth = 14;
src/main/java/com/cburch/logisim/std/ttl/Ttl7432.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7432.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7434.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7434.java:    final var portWidth = 16;
src/main/java/com/cburch/logisim/std/ttl/Ttl7434.java:    final var portHeight = 6;
src/main/java/com/cburch/logisim/std/ttl/Ttl7434.java:    final var yOutput = y + (isUpOriented ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7436.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7436.java:    final var portwidth = 18;
src/main/java/com/cburch/logisim/std/ttl/Ttl7436.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7436.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7442.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7442.java:    var mask = 1;
src/main/java/com/cburch/logisim/std/ttl/Ttl7442HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/ttl/Ttl7447HdlGenerator.java:    final var decoder = new WithSelectHdlGenerator("decoder1", "bcd", 4, "segments", 7)
src/main/java/com/cburch/logisim/std/ttl/Ttl7447HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    final var offset =
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    var posX = new int[] {x + 50, x + 53 + offset / 2, x + 53 + offset / 2, x + 56 + offset};
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    var posY = new int[] {y + 24, y + 24, y + 26 + offset / 2, y + 26 + offset / 2};
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    var val1 = state.getPortValue(1).and(state.getPortValue(2));
src/main/java/com/cburch/logisim/std/ttl/Ttl7451.java:    var val2 = state.getPortValue(3).and(state.getPortValue(4));
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var offset =
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    var xpos = new int[] {x + 105, x + 108, x + 108, x + 111 + offset};
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    var ypos = new int[] {y + 20, y + 20, y + 27, y + 27};
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var val1 = state.getPortValue(0).and(state.getPortValue(8));
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var val2 = state.getPortValue(1).and(state.getPortValue(2));
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var val3 = state.getPortValue(3).and(state.getPortValue(4));
src/main/java/com/cburch/logisim/std/ttl/Ttl7454.java:    final var val4 = state.getPortValue(6).and(state.getPortValue(7));
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    final var OrOffset =
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    var posX = new int[] {x + 86, x + 90, x + 90, x + 93 + OrOffset};
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    var posY = new int[] {y + 34, y + 34, y + 36, y + 36};
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    for (var i = 0; i < 3; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    for (var i = 0; i < 5; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    var val1 = state.getPortValue(1).and(state.getPortValue(2));
src/main/java/com/cburch/logisim/std/ttl/Ttl7458.java:    var val2 = state.getPortValue(3).and(state.getPortValue(4));
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var isIEC = AppPreferences.GATE_SHAPE.get().equals(AppPreferences.SHAPE_RECTANGULAR);
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var AndOffset = isIEC ? 10 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    for (var i = 0; i < 4; i++) {
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var val1 = state.getPortValue(1).and(state.getPortValue(2));
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var val2 = state.getPortValue(3).and(state.getPortValue(4).and(state.getPortValue(5)));
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var val3 = state.getPortValue(7).and(state.getPortValue(8));
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var val4 =
src/main/java/com/cburch/logisim/std/ttl/Ttl7464.java:    final var val5 = val1.or(val2.or(val3.or(val4)));
src/main/java/com/cburch/logisim/std/ttl/Ttl747266.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl747266.java:    final var portwidth = 18;
src/main/java/com/cburch/logisim/std/ttl/Ttl747266.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl747266.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      var dx = p.x - 37;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      var dy = p.y - 35;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var d3 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var p = getTranslatedTtlXY(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var dx = p.x - 37;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var dy = p.y - 35;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:      final var d2 = dx * dx + dy * dy;
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:        final var index = getIndex(state, e);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:        final var myState = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:        final var values = myState.getValue().getAll();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    final var state = (TtlRegisterData) painter.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    var data = (TtlRegisterData) state.getData();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    final var triggered1 = data.updateClock(state.getPortValue(2), 0);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    final var triggered2 = data.updateClock(state.getPortValue(9), 1);
src/main/java/com/cburch/logisim/std/ttl/Ttl7474.java:    final var values = data.getValue().getAll();
src/main/java/com/cburch/logisim/std/ttl/Ttl7474HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var A0 = state.getPortValue(8) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var A1 = state.getPortValue(10) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var A2 = state.getPortValue(11) == Value.TRUE ? (byte) 4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var A3 = state.getPortValue(13) == Value.TRUE ? (byte) 8 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var B0 = state.getPortValue(7) == Value.TRUE ? (byte) 1 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var B1 = state.getPortValue(9) == Value.TRUE ? (byte) 2 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var B2 = state.getPortValue(12) == Value.TRUE ? (byte) 4 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var B3 = state.getPortValue(0) == Value.TRUE ? (byte) 8 : 0;
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var A = (byte) (A3 + A2 + A1 + A0);
src/main/java/com/cburch/logisim/std/ttl/Ttl7485.java:    final var B = (byte) (B3 + B2 + B1 + B0);
src/main/java/com/cburch/logisim/std/ttl/Ttl7485HdlGenerator.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/ttl/Ttl7485HdlGenerator.java:    final var decoder = new WithSelectHdlGenerator("dec1", "compIn", 3, "compOut", 3)
src/main/java/com/cburch/logisim/std/ttl/Ttl7486.java:    final var g = painter.getGraphics();
src/main/java/com/cburch/logisim/std/ttl/Ttl7486.java:    final var portwidth = 18;
src/main/java/com/cburch/logisim/std/ttl/Ttl7486.java:    final var portheight = 15;
src/main/java/com/cburch/logisim/std/ttl/Ttl7486.java:    final var youtput = y + (up ? 20 : 40);
src/main/java/com/cburch/logisim/std/wiring/AbstractConstantHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/wiring/AbstractConstantHdlGeneratorFactory.java:      final var constantValue = getConstant(componentInfo.getComponent().getAttributeSet());
src/main/java/com/cburch/logisim/std/wiring/AbstractConstantHdlGeneratorFactory.java:          var mask = 1L;
src/main/java/com/cburch/logisim/std/wiring/AbstractConstantHdlGeneratorFactory.java:          var constValue = Hdl.zeroBit();
src/main/java/com/cburch/logisim/std/wiring/AbstractConstantHdlGeneratorFactory.java:          for (var bit = 0; bit < nrOfBits; bit++) {
src/main/java/com/cburch/logisim/std/wiring/BitExtenderHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer();
src/main/java/com/cburch/logisim/std/wiring/BitExtenderHdlGeneratorFactory.java:      final var connectedNet = componentInfo.getComponent().getEnd(1).getWidth().getWidth() == 1
src/main/java/com/cburch/logisim/std/wiring/BitExtenderHdlGeneratorFactory.java:      final var replacement = new StringBuilder();
src/main/java/com/cburch/logisim/std/wiring/BitExtenderHdlGeneratorFactory.java:      final var type =
src/main/java/com/cburch/logisim/std/wiring/ClockHdlGeneratorFactory.java:    final var map = new TreeMap<String, String>();
src/main/java/com/cburch/logisim/std/wiring/ClockHdlGeneratorFactory.java:    final var contents = new StringBuilder();
src/main/java/com/cburch/logisim/std/wiring/ClockHdlGeneratorFactory.java:    final var contents = LineBuffer.getHdlBuffer()
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      final var value = pinState.intendedValue;
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      final var attrs = (PinAttributes) state.getAttributeSet();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      final var gbc = new GridBagConstraints();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:                  final var s = text.getText();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      final var s = text.getText();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:        final var dialog = new EditFloat(state);
src/main/java/com/cburch/logisim/std/wiring/Pin.java:    final var attrs = (PinAttributes) state.getAttributeSet();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:    final var width = attrs.width;
src/main/java/com/cburch/logisim/std/wiring/Pin.java:    var ret = (PinState) state.getData();
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      var initialValue = attrs.getValue(ATTR_INITIAL);
src/main/java/com/cburch/logisim/std/wiring/Pin.java:      final var newValue = attrs.threeState
src/main/java/com/cburch/logisim/std/wiring/PinAttributes.java:      final var newAppearance = (AttributeOption) value;
src/main/java/com/cburch/logisim/std/wiring/PinAttributes.java:      final var newInitial = (Long) value;
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var value = (Boolean) source.getFeature(ComponentFactory.SHOULD_SNAP, attrs);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var afterAdd = AppPreferences.ADD_AFTER.get();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var base = proj.getLogisimFile().getLibrary(BaseLibrary._ID);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var x = lastX;
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var y = lastY;
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var bds = source.getOffsetBounds(base);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var bds = getBounds();
src/main/java/com/cburch/logisim/tools/AddTool.java:    var ret = attrs;
src/main/java/com/cburch/logisim/tools/AddTool.java:    var ret = bounds;
src/main/java/com/cburch/logisim/tools/AddTool.java:      var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var bds = source.getOffsetBounds(base);
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var mbds = Bounds.create(bds.getX(), bds.getY(), bds.getWidth() * 2, bds.getHeight() * 2);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var desc = description;
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var desc = description;
src/main/java/com/cburch/logisim/tools/AddTool.java:    var ret = factory;
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var value = (Boolean) ret.getFeature(ComponentFactory.SHOULD_SNAP, base);
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var keyEventB = event.getKeyCode();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var component = getFactory().getDisplayName();
src/main/java/com/cburch/logisim/tools/AddTool.java:              final var current = getFacing();
src/main/java/com/cburch/logisim/tools/AddTool.java:              final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/AddTool.java:              final var base = proj.getLogisimFile().getLibrary(BaseLibrary._ID);
src/main/java/com/cburch/logisim/tools/AddTool.java:              final var next = (base == null) ? null : base.getTool(EditTool._ID);
src/main/java/com/cburch/logisim/tools/AddTool.java:                final var act = SelectionActions.dropAll(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var depends = canvas.getProject().getDependencies();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var added = new ArrayList<Component>();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var matrix = new MatrixPlacerInfo(label);
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var bds = source.getOffsetBounds(base).expand(5);
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var dialog = new MatrixPlacerDialog(matrix, source.getName(), autoLabeler.isActive(canvas.getCircuit()));
src/main/java/com/cburch/logisim/tools/AddTool.java:        var okay = false;
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var mutation = new CircuitMutation(circ);
src/main/java/com/cburch/logisim/tools/AddTool.java:        for (var x = 0; x < matrix.getCopiesCountX(); x++) {
src/main/java/com/cburch/logisim/tools/AddTool.java:          for (var y = 0; y < matrix.getCopiesCountY(); y++) {
src/main/java/com/cburch/logisim/tools/AddTool.java:            final var loc = Location.create(event.getX() + (matrix.getDeltaX() * x),
src/main/java/com/cburch/logisim/tools/AddTool.java:            final var attrsCopy = (AttributeSet) attrs.clone();
src/main/java/com/cburch/logisim/tools/AddTool.java:            final var comp = source.createComponent(loc, attrsCopy);
src/main/java/com/cburch/logisim/tools/AddTool.java:            final var bds = comp.getBounds(gfx);
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var action = mutation.toAction(S.getter("addComponentAction", factory.getDisplayGetter()));
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var next = determineNext(proj);
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var act = SelectionActions.dropAll(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var desc = description;
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var icon = desc.getIcon();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:    var handler = keyHandler;
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var baseAttrs = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var baseAttrs = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var e = new KeyConfigurationEvent(type, baseAttrs, event, this);
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var r = handler.keyEventReceived(e);
src/main/java/com/cburch/logisim/tools/AddTool.java:        final var act = ToolAttributeAction.create(r);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/AddTool.java:      final var act = ToolAttributeAction.create(this, attr, facing);
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var source = getFactory();
src/main/java/com/cburch/logisim/tools/AddTool.java:    final var base = getBaseAttributes();
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      for (final var c : components) {
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      for (final var c : components) {
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      final var s = new StringBuilder();
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      for (final var c : components) {
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      final var copy = new HierarchyInfo(mainCircuit);
src/main/java/com/cburch/logisim/tools/CircuitStateHolder.java:      for (final var c : components) copy.addComponent(c);
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var circuit = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var act = new SetAttributeAction(circuit, S.getter("selectionRefaceAction"));
src/main/java/com/cburch/logisim/tools/EditTool.java:    for (final var comp : sel.getComponents()) {
src/main/java/com/cburch/logisim/tools/EditTool.java:        final var attr = getFacingAttribute(comp);
src/main/java/com/cburch/logisim/tools/EditTool.java:        var d = comp.getAttributeSet().getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var circuit = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var act = new SetAttributeAction(circuit, S.getter("selectionRefaceAction"));
src/main/java/com/cburch/logisim/tools/EditTool.java:      for (final var comp : sel.getComponents()) {
src/main/java/com/cburch/logisim/tools/EditTool.java:          final var attr = getFacingAttribute(comp);
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var loc = wireLoc;
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var x = loc.getX();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var y = loc.getY();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var g = context.getGraphics();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var px = pressX;
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var dx = e.getX() - px;
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var dy = e.getY() - pressY;
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var wiring = (modsEx & MouseEvent.ALT_DOWN_MASK) == 0;
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var select = !wiring;
src/main/java/com/cburch/logisim/tools/EditTool.java:        for (final var c : sel) {
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var at = circ.getComponents(loc);
src/main/java/com/cburch/logisim/tools/EditTool.java:    for (final var w : circ.getWires()) {
src/main/java/com/cburch/logisim/tools/EditTool.java:          final var act = SelectionActions.clear(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/EditTool.java:        final var act = SelectionActions.duplicate(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/EditTool.java:    var wire = updateLocation(canvas, e);
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var oldWireLoc = wireLoc;
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var selected = sel.getAnchoredComponents();
src/main/java/com/cburch/logisim/tools/EditTool.java:      for (final var w : circ.getWires()) {
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var click = isClick(e) && current == wiring;
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/EditTool.java:    var snapx = Canvas.snapXToGrid(mx);
src/main/java/com/cburch/logisim/tools/EditTool.java:    var snapy = Canvas.snapYToGrid(my);
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var dx = mx - snapx;
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var dy = my - snapy;
src/main/java/com/cburch/logisim/tools/EditTool.java:    var isEligible = dx * dx + dy * dy < 36;
src/main/java/com/cburch/logisim/tools/EditTool.java:    final var modsSame = lastMods == mods;
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var snap = Location.create(snapx, snapy, false);
src/main/java/com/cburch/logisim/tools/EditTool.java:      final var oldWireLoc = wireLoc;
src/main/java/com/cburch/logisim/tools/FactoryAttributes.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/tools/FactoryAttributes.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/tools/FactoryAttributes.java:    var ret = baseAttrs;
src/main/java/com/cburch/logisim/tools/FactoryAttributes.java:      var fact = factory;
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:    var tools = new Tool[descriptions.length];
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:    for (var i = 0; i < tools.length; i++) {
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:    final var ret = factory;
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:    var errorMsg = "";
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:      final var loader = this.factoryClass.getClassLoader();
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:      final var name = t.getClass().getName();
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:      final var m = t.getMessage();
src/main/java/com/cburch/logisim/tools/FactoryDescription.java:    var ret = icon;
src/main/java/com/cburch/logisim/tools/Library.java:    for (final var tool : getTools()) {
src/main/java/com/cburch/logisim/tools/Library.java:    for (final var lib : getLibraries()) {
src/main/java/com/cburch/logisim/tools/Library.java:    for (final var tool : getTools()) {
src/main/java/com/cburch/logisim/tools/Library.java:    for (final var obj : getTools()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    var message = "";
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    var item = 0;
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var myerror : messages.keySet()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var tool : lib.getTools()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    var ret = true;
src/main/java/com/cburch/logisim/tools/LibraryTools.java:      for (final var tool1 : lib.getTools()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:      for (final var circ : llib.getCircuits()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var libs : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var ret = new ArrayList<String>();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var This : newTools) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var toolIter = lib.getTools().iterator();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var ret = new HashMap<String, String>();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var MyLocation = (location.isEmpty()) ? lib.getName() : location + "->" + lib.getName();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:      final var tool = toolIter.next();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var toolIter = lib.getTools().iterator();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    var hasErrors = false;
src/main/java/com/cburch/logisim/tools/LibraryTools.java:      final var tool = toolIter.next();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    final var toBeRemoved = new HashSet<String>();
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries()) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var remove : toBeRemoved) {
src/main/java/com/cburch/logisim/tools/LibraryTools.java:    for (final var sublib : lib.getLibraries())
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    final var thisLayout = new GridBagLayout();
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    final var c = new GridBagConstraints();
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var x = 4; x < 11; x++)
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:      for (var y = 5; y < 12; y++) {
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:        final var symbol =
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:        final var spacer = " ".repeat(3);
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:        final var compText = new JLabel(spacer + symbol + spacer);
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var i = 1; i < 50; i++) {
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var i = matrixInfo.getMinimalDisplacementX(); i < 100; i++) {
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var y = 5; y < 12; y++) {
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var i = 1; i < 50; i++) copiesY.addItem(i);
src/main/java/com/cburch/logisim/tools/MatrixPlacerDialog.java:    for (var i = matrixInfo.getMinimalDisplacementY(); i < 100; i++) {
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var xn = new CircuitMutation(circ);
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var xn = new CircuitMutation(circ);
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var d = comp.getAttributeSet().getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var circ = proj.getCurrentCircuit();
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var xn = new CircuitMutation(circ);
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var d = comp.getAttributeSet().getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/tools/MenuTool.java:      final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/MenuTool.java:    final var pt = Location.create(x, y, false);
src/main/java/com/cburch/logisim/tools/MenuTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/MenuTool.java:    final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/MenuTool.java:    final var inSel = sel.getComponentsContaining(pt, g);
src/main/java/com/cburch/logisim/tools/MenuTool.java:      final var comp = inSel.iterator().next();
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var extender = (MenuExtender) comp.getFeature(MenuExtender.class);
src/main/java/com/cburch/logisim/tools/MenuTool.java:      final var cl = canvas.getCircuit().getAllContaining(pt, g);
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var comp = cl.iterator().next();
src/main/java/com/cburch/logisim/tools/MenuTool.java:        final var extender = (MenuExtender) comp.getFeature(MenuExtender.class);
src/main/java/com/cburch/logisim/tools/MenuTool.java:    final var g = c.getGraphics();
src/main/java/com/cburch/logisim/tools/MessageBox.java:      var lines = 1;
src/main/java/com/cburch/logisim/tools/MessageBox.java:      for (var pos = description.indexOf('\n');
src/main/java/com/cburch/logisim/tools/MessageBox.java:      final var scrollPane = new JScrollPane(textArea);
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var circ = pokedCircuit;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var v = canvas.getCircuitState().getValue(wire.getEnd0());
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var radix1 = RadixOption.decode(AppPreferences.POKE_WIRE_RADIX1.get());
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var radix2 = RadixOption.decode(AppPreferences.POKE_WIRE_RADIX2.get());
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var vStr = radix1.toString(v);
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var fm = g.getFontMetrics();
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var margin = 2;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var width = fm.stringWidth(vStr) + 2 * margin;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var pad = 0;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      var h = fm.getAscent() + fm.getDescent() + 2 * margin;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var rect = canvas.getViewableRect();
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var dx = Math.max(0, width - (rect.x + rect.width - x));
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var dxx1 = (dx > width / 2) ? -30 : 15;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var dxx2 = (dx > width / 2) ? -15 : 30;
src/main/java/com/cburch/logisim/tools/PokeTool.java:        final var xx = x - dx;
src/main/java/com/cburch/logisim/tools/PokeTool.java:        final var yy = y + 15 + h;
src/main/java/com/cburch/logisim/tools/PokeTool.java:        final var xx = x - dx;
src/main/java/com/cburch/logisim/tools/PokeTool.java:        final var yy = y - 15;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var m = canvas.getMousePosition();
src/main/java/com/cburch/logisim/tools/PokeTool.java:    final var loc = Location.create(x, y, false);
src/main/java/com/cburch/logisim/tools/PokeTool.java:    var dirty = false;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var event = new ComponentUserEvent(canvas, x, y);
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/PokeTool.java:      for (final var c : circ.getAllContaining(loc, g)) {
src/main/java/com/cburch/logisim/tools/PokeTool.java:          final var caret = new WireCaret(canvas, wire, x, y, canvas.getProject().getOptions().getAttributeSet());
src/main/java/com/cburch/logisim/tools/PokeTool.java:          final var p = (Pokable) c.getFeature(Pokable.class);
src/main/java/com/cburch/logisim/tools/PokeTool.java:            final var caret = p.getPokeCaret(event);
src/main/java/com/cburch/logisim/tools/PokeTool.java:            final var attrs = c.getAttributeSet();
src/main/java/com/cburch/logisim/tools/PokeTool.java:              final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/PokeTool.java:    final var g2 = (Graphics2D) c.getGraphics().create();
src/main/java/com/cburch/logisim/tools/PokeTool.java:    final var p = new GeneralPath();
src/main/java/com/cburch/logisim/tools/PokeTool.java:    final var caret = pokeCaret;
src/main/java/com/cburch/logisim/tools/PokeTool.java:      final var circ = pokedCircuit;
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var bds = proj.getSelection().getBounds(g);
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    var dx = curDx;
src/main/java/com/cburch/logisim/tools/SelectTool.java:    var dy = curDy;
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var gesture = moveGesture;
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var result = gesture.findResult(dx, dy);
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var wiresToAdd = result.getWiresToAdd();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var g = context.getGraphics();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          for (final var w : wiresToAdd) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var loc0 = w.getEnd0();
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var loc1 = w.getEnd1();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          for (final var conn : result.getUnconnectedLocations()) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var connX = conn.getX();
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var connY = conn.getY();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var gBase = context.getGraphics();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var bds = Bounds.create(left, top, right - left, bot - top);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var c : circ.getAllWithin(bds)) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var cloc = c.getLocation();
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var gDup = gBase.create();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var sel = canvas.getSelection().getComponents();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var gesture = moveGesture;
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var result = gesture.findResult(dx, dy);
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var ret = new HashSet<>(sel);
src/main/java/com/cburch/logisim/tools/SelectTool.java:    var connect = shouldConnect(modsEx);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      var gesture = moveGesture;
src/main/java/com/cburch/logisim/tools/SelectTool.java:        var queued = gesture.enqueueRequest(dx, dy);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var comps = AutoLabel.sort(canvas.getProject().getSelection().getComponents());
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var keybEvent = e.getKeyCode();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      var keyTaken = false;
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var comp : comps) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var act = new SetAttributeAction(canvas.getCircuit(), S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var act = new SetAttributeAction(canvas.getCircuit(), S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/tools/SelectTool.java:              final var act = SelectionActions.clear(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var inSel = sel.getComponentsContaining(start, g);
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var act = SelectionActions.drop(sel, inSel);
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var circuit = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var clicked = circuit.getAllContaining(start, g);
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var act = SelectionActions.dropAll(sel);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var comp : clicked) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var act = SelectionActions.dropAll(sel);
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var connect = shouldConnect(e.getModifiersEx());
src/main/java/com/cburch/logisim/tools/SelectTool.java:            var gesture = moveGesture;
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var result = gesture.forceRequest(dx, dy);
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var bds = Bounds.create(start).add(start.getX() + curDx, start.getY() + curDy);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var circuit = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var sel = proj.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var inSel = sel.getComponentsWithin(bds, g);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var comp : circuit.getAllWithin(bds, g)) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var act = SelectionActions.drop(sel, inSel);
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var comps = canvas.getProject().getSelection().getComponents();
src/main/java/com/cburch/logisim/tools/SelectTool.java:        for (final var comp : comps) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var OldLabel = comp.getAttributeSet().getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/tools/SelectTool.java:            final var act =
src/main/java/com/cburch/logisim/tools/SelectTool.java:    var handlers = keyHandlers;
src/main/java/com/cburch/logisim/tools/SelectTool.java:      final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var comp : sel.getComponents()) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var factory = comp.getFactory();
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var attrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var base = (KeyConfigurator) handler;
src/main/java/com/cburch/logisim/tools/SelectTool.java:      var consume = false;
src/main/java/com/cburch/logisim/tools/SelectTool.java:      for (final var entry : handlers.entrySet()) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var comp = entry.getKey();
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var handler = entry.getValue();
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var event = new KeyConfigurationEvent(type, comp.getAttributeSet(), e, comp);
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var result = handler.keyEventReceived(event);
src/main/java/com/cburch/logisim/tools/SelectTool.java:        final var act = new SetAttributeAction(canvas.getCircuit(), S.getter("changeComponentAttributesAction"));
src/main/java/com/cburch/logisim/tools/SelectTool.java:        for (final var result : results) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var comp = (Component) result.getEvent().getData();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          final var newValues = result.getAttributeValues();
src/main/java/com/cburch/logisim/tools/SelectTool.java:          for (final var entry : newValues.entrySet()) {
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var sel = canvas.getSelection();
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var shiftReleased = (modsEx & MouseEvent.SHIFT_DOWN_MASK) == 0;
src/main/java/com/cburch/logisim/tools/SelectTool.java:    final var defaultValue = AppPreferences.MOVE_KEEP_CONNECT.getBoolean();
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:    final var xn = new CircuitMutation(circuit);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:    final var len = values.size();
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:    for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var comp = comps.get(i);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var attr = attrs.get(i);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var value = values.get(i);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:        final var compAttrs = comp.getAttributeSet();
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var result = xn.execute();
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:    final var a = (Attribute<Object>) attr;
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:    for (var i = oldValues.size() - 1; i >= 0; i--) {
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var comp = comps.get(i);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var attr = attrs.get(i);
src/main/java/com/cburch/logisim/tools/SetAttributeAction.java:      final var value = oldValues.get(i);
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var action = event.getAction();
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var val = caret.getText();
src/main/java/com/cburch/logisim/tools/TextTool.java:      var isEmpty = StringUtil.isNullOrEmpty(val);
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var proj = caretCanvas.getProject();
src/main/java/com/cburch/logisim/tools/TextTool.java:          final var xn = new CircuitMutation(caretCircuit);
src/main/java/com/cburch/logisim/tools/TextTool.java:          final var xn = new CircuitMutation(caretCircuit);
src/main/java/com/cburch/logisim/tools/TextTool.java:            final var editable = (TextEditable) obj;
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var act = SelectionActions.dropAll(canvas.getSelection());
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var loc = Location.create(x, y, false);
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var event = new ComponentUserEvent(canvas, x, y);
src/main/java/com/cburch/logisim/tools/TextTool.java:    for (final var comp : proj.getSelection().getComponentsContaining(loc, g)) {
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var editable = (TextEditable) comp.getFeature(TextEditable.class);
src/main/java/com/cburch/logisim/tools/TextTool.java:      for (final var comp : circ.getAllContaining(loc, g)) {
src/main/java/com/cburch/logisim/tools/TextTool.java:        final var editable = (TextEditable) comp.getFeature(TextEditable.class);
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var copy = (AttributeSet) attrs.clone();
src/main/java/com/cburch/logisim/tools/TextTool.java:      final var editable = (TextEditable) caretComponent.getFeature(TextEditable.class);
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var proj = canvas.getProject();
src/main/java/com/cburch/logisim/tools/TextTool.java:    final var circ = canvas.getCircuit();
src/main/java/com/cburch/logisim/tools/WiringTool.java:    for (final var comp : canvas.getCircuit().getNonWires(cand)) {
src/main/java/com/cburch/logisim/tools/WiringTool.java:        final var repair = (WireRepair) comp.getFeature(WireRepair.class);
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var start = this.start;
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var g = context.getGraphics();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      var e0 = start;
src/main/java/com/cburch/logisim/tools/WiringTool.java:      var e1 = cur;
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var shortenBefore = willShorten(start, cur);
src/main/java/com/cburch/logisim/tools/WiringTool.java:        final var shorten = getShortenResult(shortenBefore, start, cur);
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var x0 = e0.getX();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var y0 = e0.getY();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var x1 = e1.getX();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var y1 = e1.getY();
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var shorten = willShorten(start, cur);
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var rect = new Rectangle();
src/main/java/com/cburch/logisim/tools/WiringTool.java:        for (final var w : canvas.getCircuit().getWires(start)) {
src/main/java/com/cburch/logisim/tools/WiringTool.java:        for (final var w : canvas.getCircuit().getWires(cur)) {
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var curX = e.getX();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var curY = e.getY();
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var curX = e.getX();
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var curY = e.getY();
src/main/java/com/cburch/logisim/tools/WiringTool.java:      final var wires = new ArrayList<Wire>(2);
src/main/java/com/cburch/logisim/tools/WiringTool.java:        var wire = Wire.create(cur, start);
src/main/java/com/cburch/logisim/tools/WiringTool.java:        var wire0 = Wire.create(start, m);
src/main/java/com/cburch/logisim/tools/WiringTool.java:        var wire1 = Wire.create(m, cur);
src/main/java/com/cburch/logisim/tools/WiringTool.java:        final var mutation = new CircuitMutation(canvas.getCircuit());
src/main/java/com/cburch/logisim/tools/WiringTool.java:        final var desc =
src/main/java/com/cburch/logisim/tools/WiringTool.java:        final var act = mutation.toAction(desc);
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var g2 = (Graphics2D) c.getGraphics().create();
src/main/java/com/cburch/logisim/tools/WiringTool.java:    for (var i = 0; i < points.length - 2; i += 2)
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var wh = AppPreferences.getScaled(5);
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var shorten = willShorten(drag0, drag1);
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var xn = new CircuitMutation(canvas.getCircuit());
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var result = getShortenResult(shorten, drag0, drag1);
src/main/java/com/cburch/logisim/tools/WiringTool.java:    final var shorten = shortening;
src/main/java/com/cburch/logisim/tools/key/DirectionConfigurator.java:      final var e = event.getKeyEvent();
src/main/java/com/cburch/logisim/tools/key/JoinedConfigurator.java:    final var len = this.handlers.length;
src/main/java/com/cburch/logisim/tools/key/JoinedConfigurator.java:    for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/tools/key/JoinedConfigurator.java:    for (final var handler : handlers) {
src/main/java/com/cburch/logisim/tools/key/JoinedConfigurator.java:      final var result = handler.keyEventReceived(event);
src/main/java/com/cburch/logisim/tools/key/KeyConfigurationResult.java:    final var singleMap = new HashMap<Attribute<?>, Object>(1);
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:      final var e = event.getKeyEvent();
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:      final var digit = Character.digit(e.getKeyChar(), radix);
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        final var now = System.currentTimeMillis();
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        final var sinceLast = now - whenTyped;
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        final var attrs = event.getAttributeSet();
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        final var min = getMinimumValue(attrs);
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        final var max = getMaximumValue(attrs);
src/main/java/com/cburch/logisim/tools/key/NumericConfigurator.java:        var val = 0L;
src/main/java/com/cburch/logisim/tools/key/ParallelConfigurator.java:    final var len = this.handlers.length;
src/main/java/com/cburch/logisim/tools/key/ParallelConfigurator.java:    for (var i = 0; i < len; i++) {
src/main/java/com/cburch/logisim/tools/key/ParallelConfigurator.java:    for (final var handler : handlers) {
src/main/java/com/cburch/logisim/tools/key/ParallelConfigurator.java:      final var result = handler.keyEventReceived(event);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var ret = new AvoidanceMap(new HashMap<>());
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    for (final var element : elements) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var avoid = this.avoidanceMap;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var translated = dx != 0 || dy != 0;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var bds = comp.getBounds();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    var x0 = bds.getX() + dx;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    var y0 = bds.getY() + dy;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var x1 = x0 + bds.getWidth();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var y1 = y0 + bds.getHeight();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    for (var x = x0; x <= x1; x += 10) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:      for (var y = y0; y <= y1; y += 10) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:        final var loc = Location.create(x, y, false);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:        final var prev = avoid.put(loc, Connector.ALLOW_NEITHER);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:          final var baseLoc = translated ? loc.translate(-dx, -dy) : loc;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var avoid = this.avoidanceMap;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var translated = dx != 0 || dy != 0;
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    var loc0 = w.getEnd0();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    var loc1 = w.getEnd1();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var x0 = loc0.getX();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var y0 = loc0.getY();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var x1 = loc1.getX();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var y1 = loc1.getY();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:      for (final var loc : Wire.create(loc0, loc1)) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:        final var prev = avoid.put(loc, Connector.ALLOW_HORIZONTAL);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:      for (final var loc : Wire.create(loc0, loc1)) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:        final var prev = avoid.put(loc, Connector.ALLOW_VERTICAL);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var loc0 = w.getEnd0();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var loc1 = w.getEnd1();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var x0 = loc0.getX();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var y0 = loc0.getY();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var x1 = loc1.getX();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:    final var y1 = loc1.getY();
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:      for (final var loc : w) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:          final var prev = avoidanceMap.remove(loc);
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:      for (final var loc : w) {
src/main/java/com/cburch/logisim/tools/move/AvoidanceMap.java:          final var prev = avoidanceMap.remove(loc);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var gesture = req.getMoveGesture();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var dx = req.getDeltaX();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var dy = req.getDeltaY();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var baseConnects = new ArrayList<>(gesture.getConnections());
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var impossible = pruneImpossible(baseConnects, gesture.getFixedAvoidanceMap(), dx, dy);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var selAvoid = AvoidanceMap.create(gesture.getSelected(), dx, dy);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var pathLocs = new HashMap<ConnectionData, Set<Location>>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var initNodes = new HashMap<ConnectionData, List<SearchNode>>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (final var conn : baseConnects) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var connLocs = new HashSet<Location>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var connNodes = new ArrayList<SearchNode>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var tries = switch (baseConnects.size()) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var stopTime = System.currentTimeMillis() + MAX_SECONDS * 1000;
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (var tryNum = 0; tryNum < tries && stopTime - System.currentTimeMillis() > 0; tryNum++) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var connects = new ArrayList<>(baseConnects);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var candidate = tryList(req, gesture, connects, dx, dy, pathLocs, initNodes, stopTime);
src/main/java/com/cburch/logisim/tools/move/Connector.java:        final var unsatisfied1 = bestResult.getUnsatisifiedConnections().size();
src/main/java/com/cburch/logisim/tools/move/Connector.java:        final var unsatisfied2 = candidate.getUnsatisifiedConnections().size();
src/main/java/com/cburch/logisim/tools/move/Connector.java:          final var dist1 = bestResult.getTotalDistance();
src/main/java/com/cburch/logisim/tools/move/Connector.java:          final var dist2 = candidate.getTotalDistance();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    var next = last;
src/main/java/com/cburch/logisim/tools/move/Connector.java:    var prev = last.getPrevious();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var ret = new ArrayList<Location>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var q = new PriorityQueue<>(nodes);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var visited = new HashSet<SearchNode>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    var iters = 0;
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var node = q.remove();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var loc = node.getLocation();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var dir = node.getDirection();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var neighbors = 3;
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var allowed = avoid.get(loc);
src/main/java/com/cburch/logisim/tools/move/Connector.java:        var nextSearchNode = node.next(oDir, allowed != null);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var cur = conn.getLocation();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var dest = cur.translate(dx, dy);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var preferred = conn.getDirection();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (final var wire : conn.getWirePath()) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      for (final var loc : wire) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:          var added = connLocs.add(loc);
src/main/java/com/cburch/logisim/tools/move/Connector.java:                final var y0 = loc.getY();
src/main/java/com/cburch/logisim/tools/move/Connector.java:                final var y1 = wire.getOtherEnd(loc).getY();
src/main/java/com/cburch/logisim/tools/move/Connector.java:                final var x0 = loc.getX();
src/main/java/com/cburch/logisim/tools/move/Connector.java:                final var x1 = wire.getOtherEnd(loc).getX();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var pathIt = path.iterator();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    var loc0 = pathIt.next();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var pathLoc = conn.getWirePathStart();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      var found = loc0.equals(pathLoc);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      for (final var wire : conn.getWirePath()) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:        final var nextLoc = wire.getOtherEnd(pathLoc);
src/main/java/com/cburch/logisim/tools/move/Connector.java:            final var shortenedWire = Wire.create(pathLoc, loc0);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var loc1 = pathIt.next();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var newWire = Wire.create(loc0, loc1);
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var pathWires = new ArrayList<Wire>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (final var conn : connects) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var impossible = new ArrayList<ConnectionData>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (final var it = connects.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var conn = it.next();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var dest = conn.getLocation().translate(dx, dy);
src/main/java/com/cburch/logisim/tools/move/Connector.java:        var isInPath = false;
src/main/java/com/cburch/logisim/tools/move/Connector.java:        for (final var wire : pathWires) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var a = ac.getLocation();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var b = bc.getLocation();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var abx = a.getX() - b.getX();
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var aby = a.getY() - b.getY();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var avoid = gesture.getFixedAvoidanceMap().cloneMap();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var replacements = new ReplacementMap();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    final var unconnected = new ArrayList<ConnectionData>();
src/main/java/com/cburch/logisim/tools/move/Connector.java:    var totalDistance = 0;
src/main/java/com/cburch/logisim/tools/move/Connector.java:    for (final var conn : connects) {
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var connNodes = initNodes.get(conn);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var connPathLocs = pathLocs.get(conn);
src/main/java/com/cburch/logisim/tools/move/Connector.java:      final var node = findShortestPath(connNodes, connPathLocs, avoid);
src/main/java/com/cburch/logisim/tools/move/Connector.java:        final var path = convertToPath(node);
src/main/java/com/cburch/logisim/tools/move/ConnectorThread.java:        final var result = Connector.computeWires(req);
src/main/java/com/cburch/logisim/tools/move/ConnectorThread.java:          final var gesture = req.getMoveGesture();
src/main/java/com/cburch/logisim/tools/move/ConnectorThread.java:          final var result =
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    final var locs = new HashSet<Location>();
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    for (final var comp : selected) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      for (final var end : comp.getEnds()) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    final var conns = new HashSet<ConnectionData>();
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    for (final var loc : locs) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      var found = false;
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      for (final var comp : circuit.getComponents(loc)) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:        final var lastOnPath = findWire(circuit, loc, selected, null);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:          for (var wire = lastOnPath; wire != null; wire = findWire(circuit, cur, selected, wire)) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:          final var other = lastOnPath.getOtherEnd(loc);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:          final var dx = loc.getX() - other.getX();
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:          final var dy = loc.getY() - other.getY();
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    for (final var comp : circ.getComponents(loc)) {
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    final var request = new MoveRequest(this, dx, dy);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      final var result = cachedResults.get(request);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    final var request = new MoveRequest(this, dx, dy);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    final var request = new MoveRequest(this, dx, dy);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      var result = cachedResults.get(request);
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    var ret = connections;
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:    var ret = initAvoid;
src/main/java/com/cburch/logisim/tools/move/MoveGesture.java:      final var comps = new HashSet<>(circuit.getNonWires());
src/main/java/com/cburch/logisim/tools/move/MoveResult.java:    final var unconnected = new ArrayList<Location>();
src/main/java/com/cburch/logisim/tools/move/MoveResult.java:    for (final var conn : unsatisfiedConnections) {
src/main/java/com/cburch/logisim/tools/move/MoveResult.java:    for (final var conn : toAdd) {
src/main/java/com/cburch/logisim/tools/move/SearchNode.java:    var penalizeDoubleTurn = false;
src/main/java/com/cburch/logisim/tools/move/SearchNode.java:    var newDist = dist;
src/main/java/com/cburch/logisim/tools/move/SearchNode.java:    final var connDir = conn.getDirection();
src/main/java/com/cburch/logisim/tools/move/SearchNode.java:    final var nextLoc = loc.translate(moveDir, 10);
src/main/java/com/cburch/logisim/tools/move/SearchNode.java:    final var exWire = extendsWire && moveDir == connDir;
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    final var chunk = new StringBuilder();
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    var c = s.charAt(marker);
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    var thisMarker = 0;
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    var thatMarker = 0;
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    var s1Length = s1.length();
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    var s2Length = s2.length();
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:      final var thisChunk = getChunk(s1, s1Length, thisMarker);
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:      final var thatChunk = getChunk(s2, s2Length, thatMarker);
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:      var result = 0;
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:        var thisChunkLength = thisChunk.length();
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:          for (var i = 0; i < thisChunkLength; i++) {
src/main/java/com/cburch/logisim/util/AlphanumComparator.java:    final var values =
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var namedNodeMap = element.getAttributes();
src/main/java/com/cburch/logisim/util/ArgonXml.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var node = namedNodeMap.item(i);
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var name = node.getNodeName();
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var nodes = element.getChildNodes();
src/main/java/com/cburch/logisim/util/ArgonXml.java:    for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var node = nodes.item(i);
src/main/java/com/cburch/logisim/util/ArgonXml.java:        final var child = new ArgonXml((Element) node);
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var builderFactory = XmlUtil.getHardenedBuilderFactory();
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var builder = builderFactory.newDocumentBuilder();
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var document = builder.parse(inputStream);
src/main/java/com/cburch/logisim/util/ArgonXml.java:      final var rootElement = document.getDocumentElement();
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var children = nameChildren.computeIfAbsent(name, k -> new ArrayList<>());
src/main/java/com/cburch/logisim/util/ArgonXml.java:    for (final var xml : xmls) addChild(xml.name(), xml);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var child = optChild(name);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var children = nameChildren.get(name);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var children = children(name);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var n = children.size();
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var string = optString(name);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var string = optString(name);
src/main/java/com/cburch/logisim/util/ArgonXml.java:    final var value = optString(name);
src/main/java/com/cburch/logisim/util/AutoLabel.java:    for (var x = 0; x < maxX; x++)
src/main/java/com/cburch/logisim/util/AutoLabel.java:      for (var y = 0; y < maxY; y++) {
src/main/java/com/cburch/logisim/util/AutoLabel.java:    final var label = common.concat("_X" + x + "_Y" + y);
src/main/java/com/cburch/logisim/util/AutoLabel.java:    var newLabel = "";
src/main/java/com/cburch/logisim/util/AutoLabel.java:    var curIdx = currentIndex.get(circ);
src/main/java/com/cburch/logisim/util/AutoLabel.java:    final var baseLabel = labelBase.get(circ);
src/main/java/com/cburch/logisim/util/AutoLabel.java:    var index = label.length();
src/main/java/com/cburch/logisim/util/AutoLabel.java:    var correct = false;
src/main/java/com/cburch/logisim/util/AutoLabel.java:    var newLabel = oldLabel;
src/main/java/com/cburch/logisim/util/AutoLabel.java:          final var oldLabel = attrs.getValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/util/AutoLabel.java:          final var newLabel = askAndSetLabel(componentName, oldLabel, circ, comp, compFactory,
src/main/java/com/cburch/logisim/util/Cache.java:    final var ret = data[code];
src/main/java/com/cburch/logisim/util/Dag.java:    final var src = createNode(srcData);
src/main/java/com/cburch/logisim/util/Dag.java:    final var dst = createNode(dstData);
src/main/java/com/cburch/logisim/util/Dag.java:    for (final var n : nodes.values()) {
src/main/java/com/cburch/logisim/util/Dag.java:    final var fringe = new LinkedList<Node>();
src/main/java/com/cburch/logisim/util/Dag.java:      final var n = fringe.removeFirst();
src/main/java/com/cburch/logisim/util/Dag.java:    final var queryNode = findNode(query);
src/main/java/com/cburch/logisim/util/Dag.java:    final var baseNode = findNode(base);
src/main/java/com/cburch/logisim/util/Dag.java:    var ret = findNode(data);
src/main/java/com/cburch/logisim/util/Dag.java:    final var from = findNode(data);
src/main/java/com/cburch/logisim/util/Dag.java:    final var to = findNode(data);
src/main/java/com/cburch/logisim/util/Dag.java:    final var src = findNode(srcData);
src/main/java/com/cburch/logisim/util/Dag.java:    final var dst = findNode(dstData);
src/main/java/com/cburch/logisim/util/Dag.java:    final var n = findNode(data);
src/main/java/com/cburch/logisim/util/Dag.java:    for (final var it = n.succs.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/Dag.java:      final var succ = it.next();
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:    for (final var it = listeners.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:      final var l = it.next().get();
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:    final var ret = new ArrayList<L>(listeners.size());
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:    for (final var it = listeners.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:      final var l = it.next().get();
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:    for (final var it = listeners.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/EventSourceWeakSupport.java:      final var l = it.next().get();
src/main/java/com/cburch/logisim/util/FileUtil.java:    final var tmp = File.createTempFile(prefix, suffix);
src/main/java/com/cburch/logisim/util/FileUtil.java:    try (final var out = new BufferedWriter(new FileWriter(tmp))) {
src/main/java/com/cburch/logisim/util/FileUtil.java:    var size = 1024;
src/main/java/com/cburch/logisim/util/FileUtil.java:      final var bos = new ByteArrayOutputStream();
src/main/java/com/cburch/logisim/util/GifEncoder.java:      var strings = new LZWStringTable();
src/main/java/com/cburch/logisim/util/GifEncoder.java:      final var bitFile = new BitFile(output);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var offs = headAngle * Math.PI / 180.0;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var angle = Math.atan2(y0 - y1, x0 - x1);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var oldColor = g.getColor();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var valueString = radix.toString(value);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var radixIdentifier = radix.getIndexChar();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var fontMetrics = gfx.getFontMetrics();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var valueBounds = fontMetrics.getStringBounds(valueString, gfx);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var radixBounds = fontMetrics.getStringBounds(radixIdentifier, gfx);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var currentColor = gfx.getColor();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var radixXpos = x + (valueBounds.getWidth() / 2) + 1;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var radixYpos = y + valueBounds.getHeight() - (radixBounds.getHeight() / 3);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var r = getTextBounds(g, text, x, y, halign, valign);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var r = getTextBounds(g, text, 0, 0, halign, valign);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    var last = 0;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var font = g.getFont();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var fr = ((Graphics2D) g).getFontRenderContext();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    for (var i = 0; i < text.length(); i++) {
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:      final var cur = (int) font.getStringBounds(text.substring(0, i + 1), fr).getWidth();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var oldfont = g.getFont();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var oldfont = g.getFont();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var bd = getTextBounds(g, text, x, y, halign, valign);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var tm = new TextMetrics(g, text);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var bd = getTextBounds(g, text, x, y, halign, valign);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var tm = new TextMetrics(g, text);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var glyphVector = g2.getFont().createGlyphVector(g2.getFontRenderContext(), text);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var textShape = glyphVector.getOutline();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var transform = g2.getTransform();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var oldfont = g.getFont();
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var ret = getTextBounds(g, text, x, y, halign, valign);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var tm = new TextMetrics(g, text);
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var width = tm.width;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var ascent = tm.ascent;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var height = tm.height;
src/main/java/com/cburch/logisim/util/GraphicsUtil.java:    final var ret = new Rectangle(x, y, width, height);
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:        final var g2 = (Graphics2D) g;
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var in = HorizontalSplitPane.this.getInsets();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var maxWidth = parent.getWidth() - (in.left + in.right);
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var maxHeight = parent.getHeight() - (in.top + in.bottom);
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var d0 = comp0.getMinimumSize();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var d1 = comp1.getMinimumSize();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var d0 = comp0.getPreferredSize();
src/main/java/com/cburch/logisim/util/HorizontalSplitPane.java:      final var d1 = comp1.getPreferredSize();
src/main/java/com/cburch/logisim/util/IconsUtil.java:    final var url = IconsUtil.class.getClassLoader().getResource(PATH + "/" + name);
src/main/java/com/cburch/logisim/util/IconsUtil.java:    final var icon = new ImageIcon(url);
src/main/java/com/cburch/logisim/util/IconsUtil.java:    final var g2 = (Graphics2D) g.create();
src/main/java/com/cburch/logisim/util/IconsUtil.java:    final var cx = x + icon.getIconWidth() / 2.0;
src/main/java/com/cburch/logisim/util/IconsUtil.java:    final var cy = y + icon.getIconHeight() / 2.0;
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    var ret = 0;
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var toks = new StringTokenizer(str);
src/main/java/com/cburch/logisim/util/InputEventUtil.java:      final var s = toks.nextToken();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    var ret = 0;
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var toks = new StringTokenizer(str);
src/main/java/com/cburch/logisim/util/InputEventUtil.java:      final var s = toks.nextToken();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var arr = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var it = arr.iterator();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:      final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var arr = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var it = arr.iterator();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:      final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var arr = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:    final var it = arr.iterator();
src/main/java/com/cburch/logisim/util/InputEventUtil.java:      final var ret = new StringBuilder();
src/main/java/com/cburch/logisim/util/JDialogOk.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/util/JDialogOk.java:    final var listener = new MyListener();
src/main/java/com/cburch/logisim/util/JDialogOk.java:    final var buttons = Box.createHorizontalBox();
src/main/java/com/cburch/logisim/util/JDialogOk.java:    final var pane = super.getContentPane();
src/main/java/com/cburch/logisim/util/JFileChoosers.java:      final var dir = getCurrentDirectory();
src/main/java/com/cburch/logisim/util/JFileChoosers.java:    for (final var prop : PROP_NAMES) {
src/main/java/com/cburch/logisim/util/JFileChoosers.java:          final var dir = new File(dirname);
src/main/java/com/cburch/logisim/util/JFileChoosers.java:        final var u = t.getCause();
src/main/java/com/cburch/logisim/util/JFileChoosers.java:      final var ret = createAt(selected.getParentFile());
src/main/java/com/cburch/logisim/util/LibraryUtil.java:      final var fields = cls.getDeclaredFields();
src/main/java/com/cburch/logisim/util/LibraryUtil.java:      for (final var field : fields) {
src/main/java/com/cburch/logisim/util/LibraryUtil.java:          final var id = (String) field.get(null);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var keyword : Vhdl.getVhdlKeywords()) pair(keyword.toLowerCase(), keyword);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var line = applyPairs(format(fmt, args));
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var line : lines) add(line);
src/main/java/com/cburch/logisim/util/LineBuffer.java:   * Applies search-replace var to provided string.
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var set : pairs.getContainer().entrySet()) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:        final var searchRegExp = String.format("\\{\\{\\s*%s\\s*\\}\\}", set.getKey());
src/main/java/com/cburch/logisim/util/LineBuffer.java:        final var replacement = Matcher.quoteReplacement(set.getValue().toString());
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (var i = 0; i < count; i++) add(line);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var result = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var content : contents) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var lines = content.split("\n");
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var line : lines) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var clone = (Pairs) pairs.clone();
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var maxRemarkLineLength = MAX_LINE_LENGTH - indentSpaces - (2 * Hdl.REMARK_MARKER_LENGTH);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var indent = SPACE.repeat(indentSpaces);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var contents = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var oneLine = new StringBuilder();
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var remarkLines =
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var remarkLine : remarkLines) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var pattern = Pattern.compile("^\\d+$");
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var phKey : placeholders) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var posArgsCnt = positionalPlaceholders.size();
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var posKey : positionalPlaceholders) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var key : pairedPlaceholders) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (final var key : pairedPlaceholders) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var keys = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var regex = "(\\{\\{.+?\\}\\})+";
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    final var matcher = pattern.matcher(fmt);
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var bracketsCharCount = 2;
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (var i = 1; i <= matcher.groupCount(); i++) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:        var keyStr = matcher.group(i);
src/main/java/com/cburch/logisim/util/LineBuffer.java:    for (var i = 0; i < size(); i++) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var thisLine = get().get(i);
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var otherLine = ((LineBuffer) other).get().get(i);
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var map = new Pairs();
src/main/java/com/cburch/logisim/util/LineBuffer.java:      var idx = 1;
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var arg : args) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var pair : pairs.entrySet()) {
src/main/java/com/cburch/logisim/util/LineBuffer.java:      final var clone = new Pairs();
src/main/java/com/cburch/logisim/util/LineBuffer.java:      for (final var pair : pairContainer.entrySet()) {
src/main/java/com/cburch/logisim/util/LocaleManager.java:    for (final var l : listeners) {
src/main/java/com/cburch/logisim/util/LocaleManager.java:    var i = 0;
src/main/java/com/cburch/logisim/util/LocaleManager.java:    var n = src.length();
src/main/java/com/cburch/logisim/util/LocaleManager.java:      final var ci = src.charAt(i);
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var ret = new StringBuilder(src.substring(0, i));
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var cur = getLocale();
src/main/java/com/cburch/logisim/util/LocaleManager.java:      final var opts = S.getLocaleOptions();
src/main/java/com/cburch/logisim/util/LocaleManager.java:      for (final var opt : opts) {
src/main/java/com/cburch/logisim/util/LocaleManager.java:      for (final var man : managers) {
src/main/java/com/cburch/logisim/util/LocaleManager.java:    var locales = getLocaleOptions();
src/main/java/com/cburch/logisim/util/LocaleManager.java:      var cur = getLocale();
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var repl = LocaleManager.repl;
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var retl = new ArrayList<Locale>();
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var toks = new StringTokenizer(locs);
src/main/java/com/cburch/logisim/util/LocaleManager.java:      final var f = toks.nextToken();
src/main/java/com/cburch/logisim/util/LocaleManager.java:        final var loc = new Locale.Builder().setLanguage(language).setRegion(country).build();
src/main/java/com/cburch/logisim/util/LocaleManager.java:    final var bundleName = dirName + "/strings/" + fileStart + "/" + fileStart;
src/main/java/com/cburch/logisim/util/LocaleSelector.java:    final var model = new DefaultListModel<LocaleOption>();
src/main/java/com/cburch/logisim/util/LocaleSelector.java:    for (var i = 0; i < locales.length; i++) {
src/main/java/com/cburch/logisim/util/LocaleSelector.java:    final var current = LocaleManager.getLocale();
src/main/java/com/cburch/logisim/util/LocaleSelector.java:    for (final var item : items) {
src/main/java/com/cburch/logisim/util/LocaleSelector.java:    final var opt = (LocaleOption) getSelectedValue();
src/main/java/com/cburch/logisim/util/OutputStreamEscaper.java:    final var s = new StringWriter();
src/main/java/com/cburch/logisim/util/OutputStreamEscaper.java:    for (var i = 0; i < w.length(); i++) {
src/main/java/com/cburch/logisim/util/OutputStreamEscaper.java:      var b = w.charAt(i);
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:    for (final var it = listeners.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:      final var data = it.next();
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:      final var singleListener = data.listener.get();
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:    for (final var it = listeners.iterator(); it.hasNext(); ) {
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:      final var data = it.next();
src/main/java/com/cburch/logisim/util/PropertyChangeWeakSupport.java:      final var singleListener = data.listener.get();
src/main/java/com/cburch/logisim/util/SmartScroller.java:      final var caret = (DefaultCaret) textComponent.getCaret();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var scrollBar = (JScrollBar) e.getSource();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var listModel = scrollBar.getModel();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    var value = listModel.getValue();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var extent = listModel.getExtent();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var maximum = listModel.getMaximum();
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var valueChanged = previousValue != value;
src/main/java/com/cburch/logisim/util/SmartScroller.java:    final var maximumChanged = previousMaximum != maximum;
src/main/java/com/cburch/logisim/util/Softwares.java:      final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var vlibBuilder = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/util/Softwares.java:      final var vlib = vlibBuilder.start();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var is = vlib.getInputStream();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var isr = new InputStreamReader(is);
src/main/java/com/cburch/logisim/util/Softwares.java:    var prefPath = AppPreferences.QUESTA_PATH.get();
src/main/java/com/cburch/logisim/util/Softwares.java:    final var osname = System.getProperty("os.name");
src/main/java/com/cburch/logisim/util/Softwares.java:      for (var i = 0; i < questaProgs.length; i++) questaProgs[i] += ".exe";
src/main/java/com/cburch/logisim/util/Softwares.java:    final var chooser = JFileChoosers.create();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var file = chooser.getSelectedFile();
src/main/java/com/cburch/logisim/util/Softwares.java:    for (final var program : programs) {
src/main/java/com/cburch/logisim/util/Softwares.java:      final var test = new File(FileUtil.correctPath(path) + program);
src/main/java/com/cburch/logisim/util/Softwares.java:    final var questaPath = getQuestaPath();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var tmpDir = new File(tmp.getParentFile().getCanonicalPath());
src/main/java/com/cburch/logisim/util/Softwares.java:      final var questa = new ProcessBuilder(command);
src/main/java/com/cburch/logisim/util/Softwares.java:      final var is = vcom.getInputStream();
src/main/java/com/cburch/logisim/util/Softwares.java:      final var isr = new InputStreamReader(is);
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var width = metrics.stringWidth(value);
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var width = metrics.stringWidth(value.toString());
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var len = (bits + 3) / 4;
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var ret = String.format("%0" + len + "x", value);
src/main/java/com/cburch/logisim/util/StringUtil.java:    var n = 0;
src/main/java/com/cburch/logisim/util/StringUtil.java:    var c = 0;
src/main/java/com/cburch/logisim/util/StringUtil.java:    var lines = 0;
src/main/java/com/cburch/logisim/util/StringUtil.java:    for (var i = 0; i < text.length(); i++) {
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var size = font.getSize();
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var h = size * lines;
src/main/java/com/cburch/logisim/util/StringUtil.java:    final var w = size * n * 2 / 3; // assume approx monospace 12x8 aspect ratio
src/main/java/com/cburch/logisim/util/SyntaxChecker.java:    final var hdl = CorrectLabel.hdlCorrectLabel(val);
src/main/java/com/cburch/logisim/util/SyntaxChecker.java:    var message = "";
src/main/java/com/cburch/logisim/util/SyntaxChecker.java:    final var message = getErrorMessage(val);
src/main/java/com/cburch/logisim/util/TableLayout.java:    final var rowContents = contents.get(curRow);
src/main/java/com/cburch/logisim/util/TableLayout.java:    final var pref = preferredLayoutSize(parent);
src/main/java/com/cburch/logisim/util/TableLayout.java:    final var size = parent.getSize();
src/main/java/com/cburch/logisim/util/TableLayout.java:    var rowWeightTotal = 0.0;
src/main/java/com/cburch/logisim/util/TableLayout.java:      for (var j = 0; j < row.length; j++) {
src/main/java/com/cburch/logisim/util/TableLayout.java:        final var comp = row[j];
src/main/java/com/cburch/logisim/util/TableLayout.java:      final var prefCol = new int[colCount];
src/main/java/com/cburch/logisim/util/TableLayout.java:      final var prefRow = new int[contents.size()];
src/main/java/com/cburch/logisim/util/TableLayout.java:      var height = 0;
src/main/java/com/cburch/logisim/util/TableLayout.java:      for (var i = 0; i < prefRow.length; i++) {
src/main/java/com/cburch/logisim/util/TableLayout.java:        final var row = contents.get(i);
src/main/java/com/cburch/logisim/util/TableLayout.java:        var rowHeight = 0;
src/main/java/com/cburch/logisim/util/TableLayout.java:        for (var j = 0; j < row.length; j++) {
src/main/java/com/cburch/logisim/util/TableLayout.java:            final var dim = row[j].getPreferredSize();
src/main/java/com/cburch/logisim/util/TableLayout.java:      var width = 0;
src/main/java/com/cburch/logisim/util/TableLayout.java:      for (var j : prefCol) {
src/main/java/com/cburch/logisim/util/TableLayout.java:    for (final var row : contents) {
src/main/java/com/cburch/logisim/util/TableLayout.java:      for (var j = 0; j < row.length; j++) {
src/main/java/com/cburch/logisim/util/TableLayout.java:      final var a = new double[rowIndex + 10];
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var color = c == null ? Color.GRAY : c.getBackground();
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var h = (JTableHeader) e.getSource();
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var columnModel = h.getColumnModel();
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var viewColumn = columnModel.getColumnIndexAtX(e.getX());
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var column = columnModel.getColumn(viewColumn).getModelIndex();
src/main/java/com/cburch/logisim/util/TableSorter.java:        var status = getSortingStatus(column);
src/main/java/com/cburch/logisim/util/TableSorter.java:      for (final var directive : sortingColumns) {
src/main/java/com/cburch/logisim/util/TableSorter.java:        var comparison = 0;
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var c =
src/main/java/com/cburch/logisim/util/TableSorter.java:        final var modelColumn = table.convertColumnIndexToModel(column);
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var column = e.getColumn();
src/main/java/com/cburch/logisim/util/TableSorter.java:    final var directive = getDirective(column);
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var n = getViewToModel().length;
src/main/java/com/cburch/logisim/util/TableSorter.java:      for (var i = 0; i < n; i++) {
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var tableModelRowCount = tableModel.getRowCount();
src/main/java/com/cburch/logisim/util/TableSorter.java:      for (var row = 0; row < tableModelRowCount; row++) {
src/main/java/com/cburch/logisim/util/TableSorter.java:    final var directive = getDirective(column);
src/main/java/com/cburch/logisim/util/TableSorter.java:      final var defaultRenderer = this.tableHeader.getDefaultRenderer();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var root = component.getDocument().getDefaultRootElement();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var lines = root.getElementCount();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var digits = Math.max(String.valueOf(lines).length(), minimumDisplayDigits);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var fontMetrics = getFontMetrics(getFont());
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var width = fontMetrics.charWidth('0') * digits;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var insets = getInsets();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var preferredWidth = insets.left + insets.right + width;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var d = getPreferredSize();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var fontMetrics = component.getFontMetrics(component.getFont());
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var insets = getInsets();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var availableWidth = getSize().width - insets.left - insets.right;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var clip = g.getClipBounds();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    var rowStartOffset = component.viewToModel2D(new Point(0, clip.y));
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var endOffset = component.viewToModel2D(new Point(0, clip.y + clip.height));
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var root = component.getDocument().getDefaultRootElement();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var root = component.getDocument().getDefaultRootElement();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var index = root.getElementIndex(rowStartOffset);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var line = root.getElement(index);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var lineHeight = fontMetrics.getHeight();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var y = r.y + r.height;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    var descent = 0;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var root = component.getDocument().getDefaultRootElement();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var index = root.getElementIndex(rowStartOffset);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      final var line = root.getElement(index);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:      for (var i = 0; i < line.getElementCount(); i++) {
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        final var child = line.getElement(i);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        final var as = child.getAttributes();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        final var fontFamily = (String) as.getAttribute(StyleConstants.FontFamily);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        final var fontSize = (Integer) as.getAttribute(StyleConstants.FontSize);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        final var key = fontFamily + fontSize;
src/main/java/com/cburch/logisim/util/TextLineNumber.java:        var fm = fonts.get(key);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:          final var font = new Font(fontFamily, Font.PLAIN, fontSize);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var caretPosition = component.getCaretPosition();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var root = component.getDocument().getDefaultRootElement();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:    final var currentLine = root.getElementIndex(caretPosition);
src/main/java/com/cburch/logisim/util/TextLineNumber.java:            final var endPos = component.getDocument().getLength();
src/main/java/com/cburch/logisim/util/TextLineNumber.java:            final var rect = component.modelToView2D(endPos).getBounds();
src/main/java/com/cburch/logisim/util/UniquelyNamedThread.java:    var id = 0;
src/main/java/com/cburch/logisim/util/UniquelyNamedThread.java:      final var i = lastID.get(prefix);
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var in = VerticalSplitPane.this.getInsets();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var maxWidth = parent.getWidth() - (in.left + in.right);
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var maxHeight = parent.getHeight() - (in.top + in.bottom);
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var d0 = compLeft.getMinimumSize();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var d1 = compRight.getMinimumSize();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var in = parent.getInsets();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var d0 = compLeft.getPreferredSize();
src/main/java/com/cburch/logisim/util/VerticalSplitPane.java:      final var d1 = compRight.getPreferredSize();
src/main/java/com/cburch/logisim/util/WindowMenu.java:      final var src = e.getSource();
src/main/java/com/cburch/logisim/util/WindowMenu.java:          final var item = findOwnerItem();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    final var menuMask = getToolkit().getMenuShortcutKeyMaskEx();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    final var bgroup = new ButtonGroup();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    final var screenSize = owner.getToolkit().getScreenSize();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    final var windowSize = owner.getPreferredSize();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    final var windowLoc = owner.getLocation();
src/main/java/com/cburch/logisim/util/WindowMenu.java:    var locChanged = false;
src/main/java/com/cburch/logisim/util/WindowMenu.java:    var sizeChanged = false;
src/main/java/com/cburch/logisim/util/WindowMenuItem.java:    final var frame = getJFrame();
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:      final var frame = getJFrame(false, null);
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:    final var ret = new WindowMenuItem(this);
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:      for (final var menu : WindowMenuManager.getMenus()) {
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:        final var menuItem = menuItems.get(menu);
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:    final var item = menuItems.remove(menu);
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:    for (final var item : menuItems.values()) {
src/main/java/com/cburch/logisim/util/WindowMenuItemManager.java:    for (final var menuItem : menuItems.values()) {
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    for (final var menu : menus) {
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    for (final var manager : managers) {
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    for (final var menu : menus) {
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    for (final var menu : menus) {
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    final var doEnable = (currentManager == null) != (value == null);
src/main/java/com/cburch/logisim/util/WindowMenuManager.java:    for (final var menu : menus) {
src/main/java/com/cburch/logisim/util/XmlUtil.java:    var dbf = DocumentBuilderFactory.newInstance();
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:      var aborted = false;
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:      final var act = action == REQUEST_LOAD ? "load" : action == REQUEST_FIND ? "find" : "act" + action;
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:          final var res = req.resource;
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:          final var zipEntry = zipFile.getEntry(res);
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:            final var url = "jar:" + zipPath.toURI() + "!/" + res;
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:          final var zipEntry = zipFile.getEntry(req.resource);
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:            final var result = new byte[(int) zipEntry.getSize()];
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:          final var request = waitForNextRequest();
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:    var found = false;
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:      final var resourceName = className.replace('.', '/') + ".class";
src/main/java/com/cburch/logisim/util/ZipClassLoader.java:    final var ret = request(REQUEST_FIND, resourceName);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var atrs = (VhdlEntityAttributes) attrs;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var label = (!attrs.getValue(StdAttr.LABEL).equals("")) ? getHDLTopName(attrs) : sName;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var atrs = (VhdlEntityAttributes) attrs;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var attrs = (VhdlEntityAttributes) instance.getAttributeSet();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    var label = "";
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var facing = attrs.getValue(StdAttr.FACING);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      for (final var j : myInstances) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var attrs = (VhdlEntityAttributes) painter.getAttributeSet();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var facing = attrs.getFacing();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var gfx = painter.getGraphics();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var loc = painter.getLocation();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var label = painter.getAttributeValue(StdAttr.LABEL);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var bds = painter.getBounds();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var oldFont = gfx.getFont();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var color = gfx.getColor();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var vhdlSimulator = state.getProject().getVhdlSimulator();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      for (final var singlePort : state.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var index = state.getPortIndex(singlePort);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var val = state.getPortValue(index);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var vhdlEntityName = getSimName(state.getAttributeSet());
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var parameters = serverResponse.split(":");
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var busValue = parameters[1];
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var vectorValues = new Value[busValue.length()];
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        var idx = busValue.length() - 1;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        for (final var bit : busValue.toCharArray()) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      for (final var port : state.getInstance().getPorts()) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:        final var index = state.getPortIndex(port);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:          final var vectorValues = new Value[port.getFixedBitWidth().getWidth()];
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:          for (var k = 0; k < port.getFixedBitWidth().getWidth(); k++) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    final var pins = new ArrayList<Instance>();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    var yPos = 0;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:    for (final var port : content.getPorts()) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var attr = Pin.FACTORY.createAttributeSet();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntity.java:      final var component = (InstanceComponent) Pin.FACTORY.createComponent(Location.create(100, yPos, true), attr);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var name = generic.getName();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var disp = StringUtil.constantGetter(name);
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var generic = content.getGenerics();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var genericAttr = content.getGenericAttributes();
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var attrs = new Attribute<?>[7 + generic.length];
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    final var value = new Object[7 + generic.length];
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:    for (var i = 0; i < generic.length; i++) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var newValue = (String) value;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var oldlabel = label;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var newVisibility = (Boolean) value;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var direction = (Direction) value;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var name = (String) value;
src/main/java/com/cburch/logisim/vhdl/base/VhdlEntityAttributes.java:      final var attrOpt = (AttributeOption) value;
src/main/java/com/cburch/logisim/vhdl/base/VhdlHdlGeneratorFactory.java:    var i = 0;
src/main/java/com/cburch/logisim/vhdl/base/VhdlHdlGeneratorFactory.java:    for (final var port : content.getPorts()) {
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var input = new Scanner(removeComments());
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var justEndForEntity = input.next(END);
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var names = input.match().group(1).trim();
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var ptype = getPortType(input.match().group(2).trim());
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var type = input.match().group(3).trim();
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var isOneBit = type.equalsIgnoreCase("std_logic");
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    final var isBitVector = type.equalsIgnoreCase("std_logic_vector");
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    var width = 1;
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:      final var upper = Integer.parseInt(input.match().group(1));
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:      final var lower = Integer.parseInt(input.match().group(2));
src/main/java/com/cburch/logisim/vhdl/base/VhdlParser.java:    for (final var name : names.split("\\s*,\\s*")) {
src/main/java/com/cburch/logisim/vhdl/gui/HdlToolbarModel.java:    final var rawItems = new ArrayList<ToolbarItem>();
src/main/java/com/cburch/logisim/vhdl/gui/HdlToolbarModel.java:      var w = 16;
src/main/java/com/cburch/logisim/vhdl/gui/HdlToolbarModel.java:      var h = 16;
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclBinder.java:    final var command = new ArrayList<String>();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclBinder.java:                final var errorMessage =
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclBinder.java:                final var msgCheckOnError =
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclComp.java:    final var compFiles = new StringBuilder();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclComp.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclComp.java:        final var state = vsim.getProject().getCircuitState().getInstanceState(comp);
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclComp.java:        final var fact = comp.getFactory();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorTclComp.java:        final var componentName =
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:    final var lineSeparator = System.getProperty("line.separator");
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:    final var ports = new StringBuilder();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:    final var components = new StringBuilder();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:    final var map = new StringBuilder();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:    for (final var comp : comps) {
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      final var state = vhdlSimulator.getProject().getCircuitState().getInstanceState(comp);
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      final var fac = comp.getFactory();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      final var myPorts = new ArrayList<VhdlParser.PortDescription>();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:        for (final var port :
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      for (final var port : myPorts) {
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:        final var portName = vhdlEntityName + "_" + port.getName();
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      for (final var port : myPorts) {
src/main/java/com/cburch/logisim/vhdl/sim/VhdlSimulatorVhdlTop.java:      for (final var port : myPorts) {
src/main/resources/doc/de/html/style.css:var {
src/main/resources/doc/de/html/webstyle.css:var {
src/main/resources/doc/el/html/style.css:var {
src/main/resources/doc/el/html/webstyle.css:var {
src/main/resources/doc/en/html/style.css:var {
src/main/resources/doc/en/html/webstyle.css:var {
src/main/resources/doc/en/testhtml/styletest.css:var {
src/main/resources/doc/en/testhtml/styletest1.css:var { /* variable */
src/main/resources/doc/es/html/style.css:var {
src/main/resources/doc/es/html/webstyle.css:var {
src/main/resources/doc/fr/html/style.css:var {
src/main/resources/doc/fr/html/webstyle.css:var {
src/main/resources/doc/it/html/style.css:var {
src/main/resources/doc/it/html/webstyle.css:var {
src/main/resources/doc/nl/html/style.css:var {
src/main/resources/doc/nl/html/webstyle.css:var {
src/main/resources/doc/pt/html/guide/analyze/ana-open.html:        Ao construir as expressões lógicas (booleanas) correspondentes a um circuito, o Logisim irá tentar, primeiro, construir expressões que correspondam exatamente às portas do circuito. Mas, se o circuito utilizar componentes que não sejam portas (como um multiplexador), ou se o circuito tiver mais de 100 níveis de profundidade (pouco provável), então aparecerá uma caixa de diálogo informando que foi impossível montar a expressão; e alternativamente, o Logisim tentará derivar as expressões baseando-se na tabela-verdade, que será determinada para cada combinação de entradas e pelas leituras das saídas resultantes.
src/main/resources/doc/pt/html/guide/feature/fet-autolabel.html:	  De agora em diante, quando você soltar componentes deste tipo, eles serão automaticamente rotulados com um incremento. Quando a opção é ativada, a sombra dos componentes antes da sua colocação é colorida de rosa.<br> É possível activar esta opção para diferentes componentes simultaneamente.
src/main/resources/doc/pt/html/guide/feature/fet-autolabel.html:	     <b class="tkeybd">L</b> : Ativar a função e definir/modificar a etiqueta<br>
src/main/resources/doc/pt/html/guide/feature/fet-splitting.html:        Observar que qualquer alteração nos atributos <b class=propertie>Nbr. ramificações</b> ou <b class=propertie>Largura feixe</b> irá recompor todas os atributos <var>Bit x</var> de modo que eles possam distribuir os bits combinados da maneira mais uniforme possível entre as ramificações.
src/main/resources/doc/pt/html/guide/gui/_canvas.html:quando os componentes forem movidos para preservar suas conexões. Por padrão estará
src/main/resources/doc/pt/html/guide/log/file.html:reativar a gravação manualmente utilizando o botão na parte superior.
src/main/resources/doc/pt/html/guide/log/index.html:simulação, ela deixará de gravar qualquer registro em arquivo. Se você alternar
src/main/resources/doc/pt/html/guide/log/index.html:a simulação anterior, mas você terá que reativar o registro manualmente.
src/main/resources/doc/pt/html/guide/log/selection.html:Observar que o componente RAM exige a escolha de quais endereços da memória deverão
src/main/resources/doc/pt/html/guide/mem/mem-hex.html:	   Dois botões (<b class="button">Abrir...</b>, <b class="button">Salvar...</b>) são usados para carregar ou salvar dados de um arquivo. Informações sobre tipos de arquivos podem ser encontradas em <a href="mem-menu.html"> Menus pop-up e arquivos</a>
src/main/resources/doc/pt/html/guide/mem/mem-menu.html:          <b>Salvar imagem... :</b>
src/main/resources/doc/pt/html/guide/menu/file.html:            Salvar o projeto atualmente em foco, substituindo o que estiver anteriormente no arquivo.
src/main/resources/doc/pt/html/guide/menu/file.html:          <strong>Salvar como ...</strong>&nbsp;&nbsp;<b class="tkeybd">Ctrl-Maj-S</b>
src/main/resources/doc/pt/html/guide/menu/file.html:            Salvar o projeto atualmente em foco, solicitando que o usuário salve em um arquivo diferente do anterior.
src/main/resources/doc/pt/html/guide/menu/simulate.html:           Activar os relógios. Isto só terá um efeito se o circuito contiver componentes de relógio. (na biblioteca Conexão). A opção é desabilitada por padrão.
src/main/resources/doc/pt/html/guide/opts/opts-simulate.html:            As <strong>Iterações Até Oscilação</strong> serve para especificar por quanto tempo deverá simular um circuito antes de decidir que é oscilante. O número representa a quantidade de cliques no relógio interno oculto (um porta simples, leva apenas um clique). O valor padrão 1000 é suficiente para quase todos os fins, inclusive para os circuitos de grande porte. Mas você poderá aumentar o número de iterações, caso estiver trabalhando com um circuito onde o Logisim reporte oscilações falsas. É pouco provável que isso seja um problema na prática; uma dessas circunstâncias é a de um circuito que incorpora muitos <i>latches</i> que podem travar quando a opção ruído aleatório é habilitada. Você poderá querer diminuir o número de iterações, se estiver trabalhando com um circuito que é propenso a oscilar e estiver usando um processador extremamente lento.
src/main/resources/doc/pt/html/guide/opts/opts-simulate.html:            O <strong>Adicionar Ruído Aos Atrasos de Componente</strong> permitirá ativar ou desativar o ruído aleatório a ser adicionado aos atrasos de componentes. A simulação interna usa um relógio oculto para sua simulação, e para fornecer maior verossimilhança, cada componente (excluindo conexões e distribuidores) tem um atraso entre o momento em que recebe uma entrada e quando ele emitirá uma saída. Se esta opção for habilitada, o Logisim ocasionalmente (uma vez a cada 16 reações do componente) fará com que ele tenha um clique a mais que normal. Essa aleatoriedade é adicionada especificamente para se lidar com a trava circuito (conforme abaixo): sem o ruído aleatório, o circuito oscila, uma vez que as duas portas vão trabalhar em sintonia, mas com ruído aleatório acrescentado, um porta finalmente ultrapassará a outra.
src/main/resources/doc/pt/html/guide/prefs/_pref-tools.html:Se desmarcar a opção, irá desativar esse comportamento.
src/main/resources/doc/pt/html/guide/prefs/pref-layout.html:            <b>Manter conexões ao mover-se:</b> Indica se Logisim deverá adicionar fios quando os componentes forem movidos para preservar suas conexões. Por padrão estará habilitada — embora possa ser desabilitada temporariamente pressionando-se a tecla <i>Shift</i> enquanto mover os componentes. Se essa opção estiver desmarcada, então o comportamento padrão será para não adicionar fios durante uma movimentação — embora você possa habilitá-la temporariamente pressionando a tecla <i>Shift</i> durante a movimentação.
src/main/resources/doc/pt/html/guide/prop/oscillate.html:        Quando Logisim detectar oscilação, ele desligará todas as simulações. Você poderá reativar a simulação usando o menu Simulação e a opção Simulação Ativada.
src/main/resources/doc/pt/html/guide/prop/shortcome.html:        <li>O Logisim suspenderá sua simulação após um número fixo de iterações supondo haver um erro de oscilação. É concebível, que em um grande circuito isso não se trate de problema que possa levar à oscilação.
src/main/resources/doc/pt/html/guide/prop/shortcome.html:        <li>Há outras lacunas, também, que eu tenha omitido porque elas podem ser tão obscuras que se estivesse ciente delas, seria óbvio que o Logisim nem perto chegaria a esse nível. Como um exemplo extremo, tenho um amigo que trabalha para um grande fabricante de <i>chips</i>, e seu trabalho é de se preocupar com "bolhas" em fios de <i>chips</i> com largura crescente em nanômetros e que possam levar a desconexão aleatória.
src/main/resources/doc/pt/html/guide/subcirc/sub-library.html:        Cada projeto Logisim é também uma biblioteca que poderá ser carregada em outros projetos: basta salvar em um arquivo e depois carregá-la como biblioteca em outro projeto.
src/main/resources/doc/pt/html/guide/tutorial/tutor-gates.html:        Observar que haverá cinco pontos do lado esquerdo da porta AND. Esses serão os pontos onde os fios poderão ser conectados. Acontece que nós iremos usar apenas dois deles para o nosso circuito XOR, mas para outros circuitos, você poderá achar mais útil ter mais de duas conexões em uma porta AND.
src/main/resources/doc/pt/html/guide/tutorial/tutor-step.html:        Em determinadas circunstâncias de estudo ou em caso de problema sutil relacionado com a propagação dos sinais, é muito útil poder observar estes fenómenos. Logisim simula de uma forma ligeiramente ingénua a propagação em Portas. (os Portas têm todos o mesmo atraso de propagação), mas ainda permite observar os principais problemas relacionados com estes parâmetros.
src/main/resources/doc/pt/html/guide/tutorial/tutor-step.html:	    Para observar o fenômeno, proceda da seguinte forma : Traga o circuito para o estado em que <var>e</var> é 0. Depois faça <b class="tkeybd">Ctrl-E</b> para desactivar a simulação automática. Carregue na entrada e para a mudar para 1. Nada acontece, é normal. Em seguida, use a combinação <b class="tkeybd">Ctr-I</b> e observe. Faça-o tantas vezes quantas forem necessárias.
src/main/resources/doc/pt/html/guide/tutorial/tutor-step.html:        Você notará círculos azuis em algumas extremidades da linha, estes indicam que há uma mudança no estado desta linha nesta etapa da simulação. Você pode observar a breve passagem por 1 da saída da porta AND.
src/main/resources/doc/pt/html/guide/tutorial/tutor-step.html:        Este método também permite observar a operação assíncrona do contador ou a propagação do Carry em um Somador.
src/main/resources/doc/pt/html/guide/tutorial/tutor-test.html:        Observar que os pinos de entrada contêm zeros, e assim também o pino de saída. Isso já nos diz que o circuito já calcula um 0 quando ambas as entradas são iguais a 0.
src/main/resources/doc/pt/html/guide/tutorial/tutor-test.html:        Para arquivar o seu trabalho concluído, talvez você queira salvar ou imprimir seu circuito. O menu <b class=menu>|&nbsp;Arquivo&nbsp;|</b> permitirá isso, e é claro que também lhe permitirá sair do Logisim. Mas por que parar agora?
src/main/resources/doc/pt/html/guide/verify/multi.html:        Se você estiver completamente confortável com a linha de comando, você poderá construir seu próprio <i>shell script</i> para fazer isso. Aqui, vamos usar o redirecionamento (o operador&gt;) para salvar a saída de cada circuito em um arquivo. Por exemplo, poderíamos emitir os seguintes comandos para coletar a saída do circuito principal e do circuito de consulta.
src/main/resources/doc/pt/html/guide/verify/other.html:<p> Observar que a exibição de informações durante a simulação
src/main/resources/doc/pt/html/libs/arith/bitfinder.html:Observar que isso ocorrerá apenas se o bit com problema for encontrado antes do bit
src/main/resources/doc/pt/html/libs/arith/multiplier.html:bits flutuantes ou de erro. Observar que se a entrada <i>carry-in</i> for completamente
src/main/resources/doc/pt/html/libs/arith/shifter.html:<p> Observar que <var>dist</var> contiver quaisquer entradas flutuantes ou erro,
src/main/resources/doc/pt/html/libs/base/clock.html:<p> Observar que a simulação de <i>clocks</i> no Logisim's é pouco realista:
src/main/resources/doc/pt/html/libs/base/clock.html:em circuitos reais, vários <i>clocks</i> podem derivar de outros e dificilmente
src/main/resources/doc/pt/html/libs/base/edit.html:<p> Ao arrastar uma seleção isso poderá levar a um comportamento inesperado dos fios:
src/main/resources/doc/pt/html/libs/base/pin.html:          Serve para especificar se o componente irá funcionar com entrada ou saída. (Observar que se for um pino de entrada, então o pino irá funcionar como se sua interface dentro do circuito fosse uma saída, e vice-versa.)
src/main/resources/doc/pt/html/libs/base/select.html:<p> Ao arrastar uma seleção isso poderá levar a um comportamento inesperado dos fios:
src/main/resources/doc/pt/html/libs/gates/basic.html:          Observar que se você estiver usando portas convencionais, o lado oeste das portas OR e NOR serão curvos. No entanto, os pinos de entrada estarão sobre uma linha. O Logisim irá traçar marcas curtas para indicar essas entradas; se você ultrapassar essas indicações, ele irá supor que a intenção seria apenas atingi-los. Em "Prévia da Impressão", essas marcas não serão desenhadas a menos que estejam conectados a fios.
src/main/resources/doc/pt/html/libs/gates/xor.html:<p> Observar que se você estiver usando portas convencionais, o lado oeste das
src/main/resources/doc/pt/html/libs/io/keyboard.html:<dd> Ativar Leitura - quando 1 (ou flutuante, ou erro), quando houver uma variação de
src/main/resources/doc/pt/html/libs/io/keyboard.html:A entrada de <i>clock</i> será ignorada quando o Ativar Leitura for 0. </dd>
src/main/resources/doc/pt/html/libs/mem/flipflops.html:<i>clock</i> se mantiver em 0. Observar que as duas últimas opções não estão disponíveis
src/main/resources/doc/pt/html/libs/mem/ram.html:para ler quanto para gravar dados. Qual a ação a ser executada dependerá
src/main/resources/doc/pt/html/libs/mem/register.html:assíncronamente - ou seja, sem levar em conta o valor atual da entrada de <i>clock</i>.
src/main/resources/doc/pt/html/libs/wiring/clock.html:        Observar que a simulação de <i>clocks</i> no Logisim's é pouco realista: em circuitos reais, vários <i>clocks</i> podem derivar de outros e dificilmente estão em sincronia. Mas em Logisim, todos eles experimentarão a mesma taxa de variação de tempo.
src/main/resources/doc/pt/html/libs/wiring/pin.html:          Serve para especificar se o componente irá funcionar com entrada ou saída. (Observar que se for um pino de entrada, então o pino irá funcionar como se sua interface dentro do circuito fosse uma saída, e vice-versa.)
src/main/resources/doc/pt/html/libs/wiring/tunnel.html:		No exemplo seguinte, podemos observar o aparecimento de um erro quando o tampão controlado é activado em conflito com o pino inferior.
src/main/resources/doc/pt/html/style.css:var {
src/main/resources/doc/pt/html/webstyle.css:var {
src/main/resources/doc/ru/html/style.css:var {
src/main/resources/doc/ru/html/webstyle.css:var {
src/main/resources/resources/logisim/sim/modelsim.ini:; Turn on/off SVA concurrent assertion local var printing in -assertdebug mode.  Default is on.
src/main/resources/resources/logisim/strings/analyze/analyze_pt.properties:saveErrorTitle = Erro ao salvar o arquivo
src/main/resources/resources/logisim/strings/file/file_pt.properties:fileSaveError = Impossível salvar arquivo: %s
src/main/resources/resources/logisim/strings/file/file_pt.properties:fileSaveErrorTitle = Impossível salvar arquivo
src/main/resources/resources/logisim/strings/file/file_pt.properties:FileMergeQuestion = O arquivo de fusão contém uma versão diferente do circuito '%s'.\nDeseja sobregravar a versão em seu projeto original?
src/main/resources/resources/logisim/strings/fpga/fpga_es.properties:FpgaDownloadInfo = Generación de archivos FPGA y realización de descargas; esto puede llevar un tiempo
src/main/resources/resources/logisim/strings/fpga/fpga_pt.properties:FpgaDownloadInfo = Geração de arquivos FPGA e realização de download; isso pode levar algum tempo
src/main/resources/resources/logisim/strings/gui/gui_es.properties:zoomShowGrid = Activar o desactivar cuadrícula
src/main/resources/resources/logisim/strings/gui/gui_es.properties:simulateDisableTicksTip = Desactivar reloj
src/main/resources/resources/logisim/strings/gui/gui_es.properties:simulateEnableTicksTip = Activar reloj
src/main/resources/resources/logisim/strings/gui/gui_es.properties:simulateTickItem = Activar reloj
src/main/resources/resources/logisim/strings/gui/gui_es.properties:analyzeTooManyInputsError = El análisis no se puede llevar cabo con mas de %s entradas.
src/main/resources/resources/logisim/strings/gui/gui_es.properties:analyzeTooManyOutputsError = El análisis no se puede llevar a cabo con mas de %s salidas.
src/main/resources/resources/logisim/strings/gui/gui_pt.properties:hexFileWriteError = Erro ao gravar arquivo.
src/main/resources/resources/logisim/strings/gui/gui_pt.properties:ramSaveDialogTitle = Salvar Imagem de Memória
src/main/resources/resources/logisim/strings/gui/gui_pt.properties:timeSelectionEnable = Ativar seleção de tempo
src/main/resources/resources/logisim/strings/gui/gui_pt.properties:fileSaveAsItem = Salvar como...
src/main/resources/resources/logisim/strings/hdl/hdl_pt.properties:hdlFileWriterError = Erro ao gravar arquivo.
src/main/resources/resources/logisim/strings/hdl/hdl_pt.properties:hexSaveErrorTitle = Salvar erro
src/main/resources/resources/logisim/strings/soc/soc_pt.properties:AsmPanSaveFile = Gravar file (CTRL-S)
src/main/resources/resources/logisim/strings/soc/soc_pt.properties:AsmPanSaveFileAs = Salvar arquivo como
src/main/resources/resources/logisim/strings/std/std_pt.properties:subtractorBorrowOutTip = Borrow Out: 1 se a diferença levar a um valor negativo
src/main/resources/resources/logisim/strings/std/std_pt.properties:plaSaveDialogTitle = Salvar Programa PLA
src/main/resources/resources/logisim/strings/std/std_pt.properties:plaSaveErrorTitle = Erro ao salvar o programa PLA
src/main/resources/resources/logisim/strings/std/std_pt.properties:ioActiveAttr = Ativar em alto?
src/main/resources/resources/logisim/strings/std/std_pt.properties:ramSaveMenuItem = Salvar imagem...
src/main/resources/resources/logisim/strings/util/util_pt.properties:LMsaveButtonToolTipText = Salvar arquivo selecionado
src/main/resources/resources/logisim/strings/util/util_pt.properties:LMsaveInLabelText = Gravar em:
src/test/java/com/cburch/logisim/CollectionUtilTest.java:    final var collection = List.of(getRandomString());
src/test/java/com/cburch/logisim/CollectionUtilTest.java:    final var emptyCollection = new ArrayList<String>();
src/test/java/com/cburch/logisim/CollectionUtilTest.java:    final var nonEmptyCollection = List.of(getRandomString());
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var val = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var itemCount = getRandomInt(10, 20);
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (var i = 0; i < itemCount; i++) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var test = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb1 = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb1Strings = new ArrayList<String>();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb1Cnt = getRandomInt(1, 10);
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (var i = 0; i < lb1Cnt; i++) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var str = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb2 = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb2Strings = new ArrayList<String>();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb2Cnt = getRandomInt(1, 10);
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (var i = 0; i < lb2Cnt; i++) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var str = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    var idx = 0;
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var line : lb1Strings) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var line : lb2Strings) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var foo = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var bar = getRandomInt(0, 100);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var pair = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var foo = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var bar = getRandomInt(0, 100);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer().pair("pair", pair).add("{{pair}}-{{1}}-{{2}}", foo, bar);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var expected = String.format("%s-%s-%d", pair, foo, bar);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var pairs =
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var test : tests.entrySet()) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expected = new LineBuffer(test.getValue());
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var globalPairs = (new LineBuffer.Pairs()).pair("foo", "FOO").pair("bar", "BAR");
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var test : tests.entrySet()) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var lb = new LineBuffer(globalPairs);
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expected = LineBuffer.getBuffer().add(test.getValue(), globalPairs);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var globalPairs = (new LineBuffer.Pairs()).pair("foo", "FOO").pair("bar", "BAR");
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var test : tests.entrySet()) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var lb = new LineBuffer(globalPairs);
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expPairs = new LineBuffer.Pairs();
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expected = new LineBuffer(test.getValue(), expPairs);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var arg1 = "ARG_1";
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var fmt = "{{assign}}{{ins}}{{id}}{{<}}{{pin}}{{>}}{{=}}{{1}};";
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var buffer = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    // final var buffer = LineBuffer.getHdlBuffer();  // FIXME: mock isVHDL() first!
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var assign = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var eq = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var ob = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var cb = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var id = getRandomInt(1, 1023);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var pin = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var ins = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var exp =
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var tests = Map.of("$", "\\");
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var test : tests.entrySet()) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var result = LineBuffer.format("{{1}}", test.getValue());
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var indentSize = getRandomInt(2, 6);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var indent = getRandomString(indentSize);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var line = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var result = this.lb.getWithIndent(indent).get(0);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var line = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var ctors = LineBuffer.class.getDeclaredConstructors();
src/test/java/com/cburch/logisim/LineBufferTest.java:    var found = false;
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (final var ctor : ctors) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var fmt = "{{{1}}{{2}},{{{3}}{testText}}};";
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var buffer = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var arg1 = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var arg2 = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var arg3 = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var exp = String.format("{%s%s,{%s{testText}}};", arg1, arg2, arg3);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var remark = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    try (final var mockedHdl = mockStatic(Hdl.class)) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expected = String.format("%s%s", Hdl.getLineCommentStart(), remark);
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var wordCnt = getRandomInt(20, 30);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var sb = new StringBuilder();
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (var i = 0; i < wordCnt; i++) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var cnt = getRandomInt(20, 30);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var remark = getRandomString().repeat(cnt);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var sb = new StringBuilder();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var cnt = getRandomInt(20, 30);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var tooLongWord = getRandomString().repeat(cnt);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var wordCnt = getRandomInt(20, 30);
src/test/java/com/cburch/logisim/LineBufferTest.java:    for (var i = 0; i < wordCnt; i++) {
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var remark = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var remark = getRandomString();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var indent = getRandomInt(-100, -1);
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var lb = LineBuffer.getBuffer();
src/test/java/com/cburch/logisim/LineBufferTest.java:    final var indent = " ".repeat(indentSpaces);
src/test/java/com/cburch/logisim/LineBufferTest.java:    try (final var mockedHdl = mockStatic(Hdl.class)) {
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var maxLineLength =
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var remarkLines =
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var lineSep = indent + "-".repeat(LineBuffer.MAX_LINE_LENGTH - indentSpaces);
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var expected = new ArrayList<String>();
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var header = new StringBuilder();
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var tmpLine = new StringBuilder();
src/test/java/com/cburch/logisim/LineBufferTest.java:      for (final var remarkLine : remarkLines) {
src/test/java/com/cburch/logisim/LineBufferTest.java:        final var remaining =
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var footer = new StringBuilder();
src/test/java/com/cburch/logisim/LineBufferTest.java:      final var result = lb.get();
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    for (final var test : tests) {
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var vfs = LogisimVersion.fromString(test);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var major = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var minor = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var patch = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var lsv = new LogisimVersion(major, minor, patch);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var exp = String.format("%d.%d.%d", major, minor, patch);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var suffix = getRandomString(false);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    for (var i = 0; i < 10; i++) {
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var major = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var minor = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var patch = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var sep = (getRandomInt(0, 1) == 1) ? "-" : "";
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var suffix = getRandomString(false);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var exp = String.format("%d.%d.%d%s%s", major, minor, patch, sep, suffix);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      var lsv = LogisimVersion.fromString(exp);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    final var major = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    final var minor = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    final var patch = getRandomInt(0, 10);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    final var suffix = getRandomString(1, false);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var exp = String.format("%d.%d.%d%s", major, minor, patch, suffix);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    var lsv = LogisimVersion.fromString(exp);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    for (final var test : tests) {
src/test/java/com/cburch/logisim/LogisimVersionTest.java:            var vfs = LogisimVersion.fromString(test);
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    final var tests =
src/test/java/com/cburch/logisim/LogisimVersionTest.java:    for (final var test : tests.entrySet()) {
src/test/java/com/cburch/logisim/LogisimVersionTest.java:      final var version = LogisimVersion.fromString(test.getKey());
src/test/java/com/cburch/logisim/StringUtilTest.java:    final var haystick = getRandomString();
src/test/java/com/cburch/logisim/StringUtilTest.java:    final var offset = getRandomInt(3, 6);
src/test/java/com/cburch/logisim/StringUtilTest.java:    final var needle = haystick.substring(0, getRandomInt(offset, haystick.length() - offset));
src/test/java/com/cburch/logisim/TestBase.java:    final var allowedCharsBuilder = new StringBuilder("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
src/test/java/com/cburch/logisim/TestBase.java:    final var allowedChars = allowedCharsBuilder.toString();
src/test/java/com/cburch/logisim/TestBase.java:    final var sb = new StringBuilder(length);
src/test/java/com/cburch/logisim/TestBase.java:    for (var i = 0; i < length; i++) {
src/test/java/com/cburch/logisim/TestBase.java:      final var index = (int) (allowedChars.length() * Math.random());
src/test/java/com/cburch/logisim/TestBase.java:    final var len =
src/test/java/com/cburch/logisim/TestBase.java:    final var len =
src/test/java/com/cburch/logisim/TestBase.java:    for (final var line : list) {
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:    final var tests =
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:    for (final var test : tests) {
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:    final var tests =
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:    for (final var test : tests) {
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:      final var vhdl = callMockedHdl(test, true);
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:      final var verilog = callMockedHdl(test, false);
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:      final var mockedHdl = mockStatic(Hdl.class, Mockito.CALLS_REAL_METHODS);
src/test/java/com/cburch/logisim/fpga/hdlgenerator/HdlTest.java:      final var method = Hdl.class.getMethod(methodName);
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var memory = MemContents.create(addressSize, wordSize, true);
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var memEnd = memory.getLastOffset();
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var max = HexFile.formatDescriptions.length;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var triples = new int[max * aSizes.length * wSizes.length][3];
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    var tIndex = 0;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    for (var index = 0; index < max; index++) {
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      for (final var aSize : aSizes) {
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:        for (final var wSize : wSizes) {
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var index = triple[0];
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var addressSize = triple[1];
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var wordSize = triple[2];
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var rng = new Random(index * addressSize * wordSize + 1);
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var memoryContents = MemContents.create(addressSize, wordSize, true);
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var values = new HashMap<Long, Long>();
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var addressMask = (2L << (addressSize - 1)) - 1L;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var wordMask = (2L << (wordSize - 1)) - 1L;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var count = addressMask / 2 + 1;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    for (var i = 0; i < count; i++) {
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      final var a = rng.nextLong() & addressMask;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      final var v = rng.nextLong() & wordMask;
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var desc = HexFile.formatDescriptions[index];
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:    final var tempFile = new File(tempDir, "hexfile-" + index + ".dat");
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      final var endian = desc.endsWith("big-endian") ? "big-endian" : "little-endian";
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      final var otherFile = new File(tempFile + ".xxd");
src/test/java/com/cburch/logisim/gui/hex/HexFileTest.java:      final var plainFile = new File(tempFile + ".xxd-plain");
